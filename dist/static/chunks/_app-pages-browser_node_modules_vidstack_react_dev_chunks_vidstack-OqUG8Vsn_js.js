"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_vidstack_react_dev_chunks_vidstack-OqUG8Vsn_js"],{

/***/ "(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-OqUG8Vsn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-OqUG8Vsn.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleCastProvider: function() { return /* binding */ GoogleCastProvider; }\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-VGbd3Q_b.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ GoogleCastProvider auto */ \n\n\n\n\nclass GoogleCastMediaInfoBuilder {\n    build() {\n        return this._info;\n    }\n    _setStreamType(streamType) {\n        if (streamType.includes(\"live\")) {\n            this._info.streamType = chrome.cast.media.StreamType.LIVE;\n        } else {\n            this._info.streamType = chrome.cast.media.StreamType.BUFFERED;\n        }\n        return this;\n    }\n    _setTracks(tracks) {\n        this._info.tracks = tracks.map(this._buildCastTrack);\n        return this;\n    }\n    _setMetadata(title, poster) {\n        this._info.metadata = new chrome.cast.media.GenericMediaMetadata();\n        this._info.metadata.title = title;\n        this._info.metadata.images = [\n            {\n                url: poster\n            }\n        ];\n        return this;\n    }\n    _buildCastTrack(track, trackId) {\n        const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n        castTrack.name = track.label;\n        castTrack.trackContentId = track.src;\n        castTrack.trackContentType = \"text/vtt\";\n        castTrack.language = track.language;\n        castTrack.subtype = track.kind.toUpperCase();\n        return castTrack;\n    }\n    constructor(src){\n        this._info = new chrome.cast.media.MediaInfo(src.src, src.type);\n    }\n}\nconst REMOTE_TRACK_TEXT_TYPE = chrome.cast.media.TrackType.TEXT, REMOTE_TRACK_AUDIO_TYPE = chrome.cast.media.TrackType.AUDIO;\nclass GoogleCastTracksManager {\n    _setup() {\n        const syncRemoteActiveIds = this._syncRemoteActiveIds.bind(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.audioTracks, \"change\", syncRemoteActiveIds);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.textTracks, \"mode-change\", syncRemoteActiveIds);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._syncLocalTracks.bind(this));\n    }\n    _getLocalTextTracks() {\n        return this._ctx.$state.textTracks().filter((track)=>track.src && track.type === \"vtt\");\n    }\n    _getLocalAudioTracks() {\n        return this._ctx.$state.audioTracks();\n    }\n    _getRemoteTracks(type) {\n        var _this__cast_mediaInfo;\n        var _this__cast_mediaInfo_tracks;\n        const tracks = (_this__cast_mediaInfo_tracks = (_this__cast_mediaInfo = this._cast.mediaInfo) === null || _this__cast_mediaInfo === void 0 ? void 0 : _this__cast_mediaInfo.tracks) !== null && _this__cast_mediaInfo_tracks !== void 0 ? _this__cast_mediaInfo_tracks : [];\n        return type ? tracks.filter((track)=>track.type === type) : tracks;\n    }\n    _getRemoteActiveIds() {\n        const activeIds = [], activeLocalAudioTrack = this._getLocalAudioTracks().find((track)=>track.selected), activeLocalTextTracks = this._getLocalTextTracks().filter((track)=>track.mode === \"showing\");\n        if (activeLocalAudioTrack) {\n            const remoteAudioTracks = this._getRemoteTracks(REMOTE_TRACK_AUDIO_TYPE), remoteAudioTrack = this._findRemoteTrack(remoteAudioTracks, activeLocalAudioTrack);\n            if (remoteAudioTrack) activeIds.push(remoteAudioTrack.trackId);\n        }\n        if (activeLocalTextTracks === null || activeLocalTextTracks === void 0 ? void 0 : activeLocalTextTracks.length) {\n            const remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n            if (remoteTextTracks.length) {\n                for (const localTrack of activeLocalTextTracks){\n                    const remoteTextTrack = this._findRemoteTrack(remoteTextTracks, localTrack);\n                    if (remoteTextTrack) activeIds.push(remoteTextTrack.trackId);\n                }\n            }\n        }\n        return activeIds;\n    }\n    _syncLocalTracks() {\n        const localTextTracks = this._getLocalTextTracks();\n        if (!this._cast.isMediaLoaded) return;\n        const remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n        for (const localTrack of localTextTracks){\n            const hasRemoteTrack = this._findRemoteTrack(remoteTextTracks, localTrack);\n            if (!hasRemoteTrack) {\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(()=>{\n                    var _this__onNewLocalTracks, _this;\n                    return (_this__onNewLocalTracks = (_this = this)._onNewLocalTracks) === null || _this__onNewLocalTracks === void 0 ? void 0 : _this__onNewLocalTracks.call(_this);\n                });\n                break;\n            }\n        }\n    }\n    _syncRemoteTracks(event) {\n        if (!this._cast.isMediaLoaded) return;\n        const localAudioTracks = this._getLocalAudioTracks(), localTextTracks = this._getLocalTextTracks(), remoteAudioTracks = this._getRemoteTracks(REMOTE_TRACK_AUDIO_TYPE), remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n        for (const remoteAudioTrack of remoteAudioTracks){\n            const hasLocalTrack = this._findLocalTrack(localAudioTracks, remoteAudioTrack);\n            if (hasLocalTrack) continue;\n            var _remoteAudioTrack_subtype;\n            const localAudioTrack = {\n                id: remoteAudioTrack.trackId.toString(),\n                label: remoteAudioTrack.name,\n                language: remoteAudioTrack.language,\n                kind: (_remoteAudioTrack_subtype = remoteAudioTrack.subtype) !== null && _remoteAudioTrack_subtype !== void 0 ? _remoteAudioTrack_subtype : \"main\",\n                selected: false\n            };\n            this._ctx.audioTracks[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._add](localAudioTrack, event);\n        }\n        for (const remoteTextTrack of remoteTextTracks){\n            const hasLocalTrack = this._findLocalTrack(localTextTracks, remoteTextTrack);\n            if (hasLocalTrack) continue;\n            const localTextTrack = {\n                id: remoteTextTrack.trackId.toString(),\n                src: remoteTextTrack.trackContentId,\n                label: remoteTextTrack.name,\n                language: remoteTextTrack.language,\n                kind: remoteTextTrack.subtype.toLowerCase()\n            };\n            this._ctx.textTracks.add(localTextTrack, event);\n        }\n    }\n    _syncRemoteActiveIds(event) {\n        if (!this._cast.isMediaLoaded) return;\n        const activeIds = this._getRemoteActiveIds(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);\n        this._editTracksInfo(editRequest).catch((error)=>{\n            {\n                var _this__ctx_logger;\n                (_this__ctx_logger = this._ctx.logger) === null || _this__ctx_logger === void 0 ? void 0 : _this__ctx_logger.errorGroup(\"[vidstack] failed to edit cast tracks info\").labelledLog(\"Edit Request\", editRequest).labelledLog(\"Error\", error).dispatch();\n            }\n        });\n    }\n    _editTracksInfo(request) {\n        const media = (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastSessionMedia)();\n        return new Promise((resolve, reject)=>media === null || media === void 0 ? void 0 : media.editTracksInfo(request, resolve, reject));\n    }\n    _findLocalTrack(localTracks, remoteTrack) {\n        return localTracks.find((localTrack)=>this._isMatch(localTrack, remoteTrack));\n    }\n    _findRemoteTrack(remoteTracks, localTrack) {\n        return remoteTracks.find((remoteTrack)=>this._isMatch(localTrack, remoteTrack));\n    }\n    // Note: we can't rely on id matching because they will differ between local/remote. A local\n    // track id might not even exist.\n    _isMatch(localTrack, remoteTrack) {\n        return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();\n    }\n    constructor(_cast, _ctx, _onNewLocalTracks){\n        this._cast = _cast;\n        this._ctx = _ctx;\n        this._onNewLocalTracks = _onNewLocalTracks;\n    }\n}\nclass GoogleCastProvider {\n    get _notify() {\n        return this._ctx.delegate._notify;\n    }\n    get type() {\n        return \"google-cast\";\n    }\n    get currentSrc() {\n        return this._currentSrc;\n    }\n    /**\n   * The Google Cast remote player.\n   *\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}\n   */ get player() {\n        return this._player;\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */ get cast() {\n        return (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastContext)();\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}\n   */ get session() {\n        return (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastSession)();\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}\n   */ get media() {\n        return (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastSessionMedia)();\n    }\n    /**\n   * Whether the current Google Cast session belongs to this provider.\n   */ get hasActiveSession() {\n        return (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.hasActiveCastSession)(this._currentSrc);\n    }\n    setup() {\n        this._attachCastContextEventListeners();\n        this._attachCastPlayerEventListeners();\n        this._tracks._setup();\n        this._notify(\"provider-setup\", this);\n    }\n    _attachCastContextEventListeners() {\n        (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.listenCastContextEvent)(cast.framework.CastContextEventType.CAST_STATE_CHANGED, this._onCastStateChange.bind(this));\n    }\n    _attachCastPlayerEventListeners() {\n        const Event2 = cast.framework.RemotePlayerEventType, handlers = {\n            [Event2.IS_CONNECTED_CHANGED]: this._onCastStateChange,\n            [Event2.IS_MEDIA_LOADED_CHANGED]: this._onMediaLoadedChange,\n            [Event2.CAN_CONTROL_VOLUME_CHANGED]: this._onCanControlVolumeChange,\n            [Event2.CAN_SEEK_CHANGED]: this._onCanSeekChange,\n            [Event2.DURATION_CHANGED]: this._onDurationChange,\n            [Event2.IS_MUTED_CHANGED]: this._onVolumeChange,\n            [Event2.VOLUME_LEVEL_CHANGED]: this._onVolumeChange,\n            [Event2.IS_PAUSED_CHANGED]: this._onPausedChange,\n            [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this._onProgress,\n            [Event2.PLAYER_STATE_CHANGED]: this._onPlayerStateChange\n        };\n        this._playerEventHandlers = handlers;\n        const handler = this._onRemotePlayerEvent.bind(this);\n        for (const type of (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.keysOf)(handlers)){\n            this._player.controller.addEventListener(type, handler);\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            for (const type of (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.keysOf)(handlers)){\n                this._player.controller.removeEventListener(type, handler);\n            }\n        });\n    }\n    async play() {\n        var _this__player_controller;\n        if (!this._player.isPaused && !this._isIdle) return;\n        if (this._isIdle) {\n            await this._reload(false, 0);\n            return;\n        }\n        (_this__player_controller = this._player.controller) === null || _this__player_controller === void 0 ? void 0 : _this__player_controller.playOrPause();\n    }\n    async pause() {\n        var _this__player_controller;\n        if (this._player.isPaused) return;\n        (_this__player_controller = this._player.controller) === null || _this__player_controller === void 0 ? void 0 : _this__player_controller.playOrPause();\n    }\n    getMediaStatus(request) {\n        return new Promise((resolve, reject)=>{\n            var _this_media;\n            (_this_media = this.media) === null || _this_media === void 0 ? void 0 : _this_media.getStatus(request, resolve, reject);\n        });\n    }\n    setMuted(muted) {\n        var _this__player_controller;\n        const hasChanged = muted && !this._player.isMuted || !muted && this._player.isMuted;\n        if (hasChanged) (_this__player_controller = this._player.controller) === null || _this__player_controller === void 0 ? void 0 : _this__player_controller.muteOrUnmute();\n    }\n    setCurrentTime(time) {\n        var _this__player_controller;\n        this._player.currentTime = time;\n        this._notify(\"seeking\", time);\n        (_this__player_controller = this._player.controller) === null || _this__player_controller === void 0 ? void 0 : _this__player_controller.seek();\n    }\n    setVolume(volume) {\n        var _this__player_controller;\n        this._player.volumeLevel = volume;\n        (_this__player_controller = this._player.controller) === null || _this__player_controller === void 0 ? void 0 : _this__player_controller.setVolumeLevel();\n    }\n    async loadSource(src) {\n        var _this__reloadInfo;\n        if (((_this__reloadInfo = this._reloadInfo) === null || _this__reloadInfo === void 0 ? void 0 : _this__reloadInfo.src) !== src) this._reloadInfo = null;\n        if ((0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.hasActiveCastSession)(src)) {\n            this._resumeSession();\n            this._currentSrc = src;\n            return;\n        }\n        this._notify(\"load-start\");\n        const loadRequest = this._buildLoadRequest(src), errorCode = await this.session.loadMedia(loadRequest);\n        if (errorCode) {\n            this._currentSrc = null;\n            this._notify(\"error\", Error((0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastErrorMessage)(errorCode)));\n            return;\n        }\n        this._currentSrc = src;\n    }\n    destroy() {\n        this._reset();\n        this._endSession();\n    }\n    _reset() {\n        if (!this._reloadInfo) {\n            this._played = 0;\n            this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0);\n        }\n        this._timeRAF._stop();\n        this._currentTime = 0;\n        this._reloadInfo = null;\n    }\n    _resumeSession() {\n        const resumeSessionEvent = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"resume-session\", {\n            detail: this.session\n        });\n        this._onMediaLoadedChange(resumeSessionEvent);\n        const { muted, volume, savedState } = this._ctx.$state, localState = savedState();\n        var _localState_currentTime;\n        this.setCurrentTime(Math.max(this._player.currentTime, (_localState_currentTime = localState === null || localState === void 0 ? void 0 : localState.currentTime) !== null && _localState_currentTime !== void 0 ? _localState_currentTime : 0));\n        this.setMuted(muted());\n        this.setVolume(volume());\n        if ((localState === null || localState === void 0 ? void 0 : localState.paused) === false) this.play();\n    }\n    _endSession() {\n        this.cast.endCurrentSession(true);\n        const { remotePlaybackLoader } = this._ctx.$state;\n        remotePlaybackLoader.set(null);\n    }\n    _disconnectFromReceiver() {\n        const { savedState } = this._ctx.$state;\n        savedState.set({\n            paused: this._player.isPaused,\n            currentTime: this._player.currentTime\n        });\n        this._endSession();\n    }\n    _onAnimationFrame() {\n        this._onCurrentTimeChange();\n    }\n    _onRemotePlayerEvent(event) {\n        this._playerEventHandlers[event.type].call(this, event);\n    }\n    _onCastStateChange(data) {\n        const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? \"connected\" : castState === cast.framework.CastState.CONNECTING ? \"connecting\" : \"disconnected\";\n        if (this._state === state) return;\n        const detail = {\n            type: \"google-cast\",\n            state\n        }, trigger = this._createEvent(data);\n        this._state = state;\n        this._notify(\"remote-playback-change\", detail, trigger);\n        if (state === \"disconnected\") {\n            this._disconnectFromReceiver();\n        }\n    }\n    _onMediaLoadedChange(event) {\n        const hasLoaded = !!this._player.isMediaLoaded;\n        if (!hasLoaded) return;\n        const src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source);\n        Promise.resolve().then(()=>{\n            if (src !== (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source) || !this._player.isMediaLoaded) return;\n            this._reset();\n            const duration = this._player.duration;\n            this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, duration);\n            const detail = {\n                provider: this,\n                duration,\n                buffered: new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0),\n                seekable: this._getSeekableRange()\n            }, trigger = this._createEvent(event);\n            this._notify(\"loaded-metadata\", void 0, trigger);\n            this._notify(\"loaded-data\", void 0, trigger);\n            this._notify(\"can-play\", detail, trigger);\n            this._onCanControlVolumeChange();\n            this._onCanSeekChange(event);\n            const { volume, muted } = this._ctx.$state;\n            this.setVolume(volume());\n            this.setMuted(muted());\n            this._timeRAF._start();\n            this._tracks._syncRemoteTracks(trigger);\n            this._tracks._syncRemoteActiveIds(trigger);\n        });\n    }\n    _onCanControlVolumeChange() {\n        this._ctx.$state.canSetVolume.set(this._player.canControlVolume);\n    }\n    _onCanSeekChange(event) {\n        const trigger = this._createEvent(event);\n        this._notify(\"stream-type-change\", this._getStreamType(), trigger);\n    }\n    _getStreamType() {\n        var _this__player_mediaInfo;\n        const streamType = (_this__player_mediaInfo = this._player.mediaInfo) === null || _this__player_mediaInfo === void 0 ? void 0 : _this__player_mediaInfo.streamType;\n        return streamType === chrome.cast.media.StreamType.LIVE ? this._player.canSeek ? \"live:dvr\" : \"live\" : \"on-demand\";\n    }\n    _onCurrentTimeChange() {\n        if (this._reloadInfo) return;\n        const currentTime = this._player.currentTime;\n        if (currentTime === this._currentTime) return;\n        this._notify(\"time-change\", currentTime);\n        if (currentTime > this._played) {\n            this._played = currentTime;\n            this._onProgress();\n        }\n        if (this._ctx.$state.seeking()) {\n            this._notify(\"seeked\", currentTime);\n        }\n        this._currentTime = currentTime;\n    }\n    _onDurationChange(event) {\n        if (!this._player.isMediaLoaded || this._reloadInfo) return;\n        const duration = this._player.duration, trigger = this._createEvent(event);\n        this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, duration);\n        this._notify(\"duration-change\", duration, trigger);\n    }\n    _onVolumeChange(event) {\n        if (!this._player.isMediaLoaded) return;\n        const detail = {\n            muted: this._player.isMuted,\n            volume: this._player.volumeLevel\n        }, trigger = this._createEvent(event);\n        this._notify(\"volume-change\", detail, trigger);\n    }\n    _onPausedChange(event) {\n        const trigger = this._createEvent(event);\n        if (this._player.isPaused) {\n            this._notify(\"pause\", void 0, trigger);\n        } else {\n            this._notify(\"play\", void 0, trigger);\n        }\n    }\n    _onProgress(event) {\n        const detail = {\n            seekable: this._getSeekableRange(),\n            buffered: new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, this._played)\n        }, trigger = event ? this._createEvent(event) : void 0;\n        this._notify(\"progress\", detail, trigger);\n    }\n    _onPlayerStateChange(event) {\n        const state = this._player.playerState, PlayerState = chrome.cast.media.PlayerState;\n        this._isIdle = state === PlayerState.IDLE;\n        if (state === PlayerState.PAUSED) return;\n        const trigger = this._createEvent(event);\n        switch(state){\n            case PlayerState.PLAYING:\n                this._notify(\"playing\", void 0, trigger);\n                break;\n            case PlayerState.BUFFERING:\n                this._notify(\"waiting\", void 0, trigger);\n                break;\n            case PlayerState.IDLE:\n                this._timeRAF._stop();\n                this._notify(\"pause\");\n                this._notify(\"end\");\n                break;\n        }\n    }\n    _getSeekableRange() {\n        return this._player.liveSeekableRange ? new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(this._player.liveSeekableRange.start, this._player.liveSeekableRange.end) : this._seekableRange;\n    }\n    _createEvent(detail) {\n        return detail instanceof Event ? detail : new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(detail.type, {\n            detail\n        });\n    }\n    _buildMediaInfo(src) {\n        const { streamType, title, poster } = this._ctx.$state;\n        return new GoogleCastMediaInfoBuilder(src)._setMetadata(title(), poster())._setStreamType(streamType())._setTracks(this._tracks._getLocalTextTracks()).build();\n    }\n    _buildLoadRequest(src) {\n        var _this__reloadInfo, _this__reloadInfo1;\n        const mediaInfo = this._buildMediaInfo(src), request = new chrome.cast.media.LoadRequest(mediaInfo), savedState = this._ctx.$state.savedState();\n        var _this__reloadInfo_paused;\n        request.autoplay = ((_this__reloadInfo_paused = (_this__reloadInfo = this._reloadInfo) === null || _this__reloadInfo === void 0 ? void 0 : _this__reloadInfo.paused) !== null && _this__reloadInfo_paused !== void 0 ? _this__reloadInfo_paused : savedState === null || savedState === void 0 ? void 0 : savedState.paused) === false;\n        var _this__reloadInfo_time, _ref;\n        request.currentTime = (_ref = (_this__reloadInfo_time = (_this__reloadInfo1 = this._reloadInfo) === null || _this__reloadInfo1 === void 0 ? void 0 : _this__reloadInfo1.time) !== null && _this__reloadInfo_time !== void 0 ? _this__reloadInfo_time : savedState === null || savedState === void 0 ? void 0 : savedState.currentTime) !== null && _ref !== void 0 ? _ref : 0;\n        return request;\n    }\n    async _reload(paused, time) {\n        const src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source);\n        this._reloadInfo = {\n            src,\n            paused,\n            time\n        };\n        await this.loadSource(src);\n    }\n    _onNewLocalTracks() {\n        this._reload(this._player.isPaused, this._player.currentTime).catch((error)=>{\n            {\n                var _this__ctx_logger;\n                (_this__ctx_logger = this._ctx.logger) === null || _this__ctx_logger === void 0 ? void 0 : _this__ctx_logger.errorGroup(\"[vidstack] cast failed to load new local tracks\").labelledLog(\"Error\", error).dispatch();\n            }\n        });\n    }\n    constructor(_player, _ctx){\n        this._player = _player;\n        this._ctx = _ctx;\n        this.$$PROVIDER_TYPE = \"GOOGLE_CAST\";\n        this.scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createScope)();\n        this._currentSrc = null;\n        this._state = \"disconnected\";\n        this._currentTime = 0;\n        this._played = 0;\n        this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0);\n        this._timeRAF = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.RAFLoop(this._onAnimationFrame.bind(this));\n        this._reloadInfo = null;\n        this._isIdle = false;\n        this._tracks = new GoogleCastTracksManager(this._player, this._ctx, this._onNewLocalTracks.bind(this));\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-OqUG8Vsn.js\n"));

/***/ })

}]);