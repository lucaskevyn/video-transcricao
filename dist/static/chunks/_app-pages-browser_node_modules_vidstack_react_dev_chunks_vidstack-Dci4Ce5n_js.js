"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_vidstack_react_dev_chunks_vidstack-Dci4Ce5n_js"],{

/***/ "(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dci4Ce5n.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Dci4Ce5n.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HLSProvider: function() { return /* binding */ HLSProvider; }\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ HLSProvider auto */ \n\n\n\nconst toDOMEventType = (type)=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.camelToKebabCase)(type);\nclass HLSController {\n    get instance() {\n        return this._instance;\n    }\n    setup(ctor) {\n        const { streamType } = this._ctx.$state;\n        const isLive = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(streamType).includes(\"live\"), isLiveLowLatency = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(streamType).includes(\"ll-\");\n        this._instance = new ctor({\n            lowLatencyMode: isLiveLowLatency,\n            backBufferLength: isLiveLowLatency ? 4 : isLive ? 8 : void 0,\n            renderTextTracksNatively: false,\n            ...this._config\n        });\n        const dispatcher = this._dispatchHLSEvent.bind(this);\n        for (const event of Object.values(ctor.Events))this._instance.on(event, dispatcher);\n        this._instance.on(ctor.Events.ERROR, this._onError.bind(this));\n        for (const callback of this._callbacks)callback(this._instance);\n        this._ctx.player.dispatch(\"hls-instance\", {\n            detail: this._instance\n        });\n        this._instance.attachMedia(this._video);\n        this._instance.on(ctor.Events.AUDIO_TRACK_SWITCHED, this._onAudioSwitch.bind(this));\n        this._instance.on(ctor.Events.LEVEL_SWITCHED, this._onLevelSwitched.bind(this));\n        this._instance.on(ctor.Events.LEVEL_LOADED, this._onLevelLoaded.bind(this));\n        this._instance.on(ctor.Events.NON_NATIVE_TEXT_TRACKS_FOUND, this._onTracksFound.bind(this));\n        this._instance.on(ctor.Events.CUES_PARSED, this._onCuesParsed.bind(this));\n        this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.QualitySymbol._enableAuto] = this._enableAutoQuality.bind(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.qualities, \"change\", this._onUserQualityChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.audioTracks, \"change\", this._onUserAudioChange.bind(this));\n        this._stopLiveSync = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._liveSync.bind(this));\n    }\n    _createDOMEvent(type, data) {\n        return new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(toDOMEventType(type), {\n            detail: data\n        });\n    }\n    _liveSync() {\n        if (!this._ctx.$state.live()) return;\n        const raf = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.RAFLoop(this._liveSyncPosition.bind(this));\n        raf._start();\n        return raf._stop.bind(raf);\n    }\n    _liveSyncPosition() {\n        var _this__instance;\n        var _this__instance_liveSyncPosition;\n        this._ctx.$state.liveSyncPosition.set((_this__instance_liveSyncPosition = (_this__instance = this._instance) === null || _this__instance === void 0 ? void 0 : _this__instance.liveSyncPosition) !== null && _this__instance_liveSyncPosition !== void 0 ? _this__instance_liveSyncPosition : Infinity);\n    }\n    _dispatchHLSEvent(type, data) {\n        var _this__ctx_player;\n        (_this__ctx_player = this._ctx.player) === null || _this__ctx_player === void 0 ? void 0 : _this__ctx_player.dispatch(this._createDOMEvent(type, data));\n    }\n    _onTracksFound(eventType, data) {\n        const event = this._createDOMEvent(eventType, data);\n        let currentTrack = -1;\n        for(let i = 0; i < data.tracks.length; i++){\n            var _nonNativeTrack_subtitleTrack;\n            const nonNativeTrack = data.tracks[i], init = (_nonNativeTrack_subtitleTrack = nonNativeTrack.subtitleTrack) !== null && _nonNativeTrack_subtitleTrack !== void 0 ? _nonNativeTrack_subtitleTrack : nonNativeTrack.closedCaptions, track = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TextTrack({\n                id: \"hls-\".concat(nonNativeTrack.kind, \"-\").concat(i),\n                src: init === null || init === void 0 ? void 0 : init.url,\n                label: nonNativeTrack.label,\n                language: init === null || init === void 0 ? void 0 : init.lang,\n                kind: nonNativeTrack.kind,\n                default: nonNativeTrack.default\n            });\n            track[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TextTrackSymbol._readyState] = 2;\n            track[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TextTrackSymbol._onModeChange] = ()=>{\n                if (track.mode === \"showing\") {\n                    this._instance.subtitleTrack = i;\n                    currentTrack = i;\n                } else if (currentTrack === i) {\n                    this._instance.subtitleTrack = -1;\n                    currentTrack = -1;\n                }\n            };\n            this._ctx.textTracks.add(track, event);\n        }\n    }\n    _onCuesParsed(eventType, data) {\n        var _this__instance;\n        const index = (_this__instance = this._instance) === null || _this__instance === void 0 ? void 0 : _this__instance.subtitleTrack, track = this._ctx.textTracks.getById(\"hls-\".concat(data.type, \"-\").concat(index));\n        if (!track) return;\n        const event = this._createDOMEvent(eventType, data);\n        for (const cue of data.cues){\n            cue.positionAlign = \"auto\";\n            track.addCue(cue, event);\n        }\n    }\n    _onAudioSwitch(eventType, data) {\n        const track = this._ctx.audioTracks[data.id];\n        if (track) {\n            const trigger = this._createDOMEvent(eventType, data);\n            this._ctx.audioTracks[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._select](track, true, trigger);\n        }\n    }\n    _onLevelSwitched(eventType, data) {\n        const quality = this._ctx.qualities[data.level];\n        if (quality) {\n            const trigger = this._createDOMEvent(eventType, data);\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._select](quality, true, trigger);\n        }\n    }\n    _onLevelLoaded(eventType, data) {\n        if (this._ctx.$state.canPlay()) return;\n        const { type, live, totalduration: duration, targetduration } = data.details, trigger = this._createDOMEvent(eventType, data);\n        this._ctx.delegate._notify(\"stream-type-change\", live ? type === \"EVENT\" && Number.isFinite(duration) && targetduration >= 10 ? \"live:dvr\" : \"live\" : \"on-demand\", trigger);\n        this._ctx.delegate._notify(\"duration-change\", duration, trigger);\n        const media = this._instance.media;\n        if (this._instance.currentLevel === -1) {\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.QualitySymbol._setAuto](true, trigger);\n        }\n        for (const remoteTrack of this._instance.audioTracks){\n            const localTrack = {\n                id: remoteTrack.id.toString(),\n                label: remoteTrack.name,\n                language: remoteTrack.lang || \"\",\n                kind: \"main\"\n            };\n            this._ctx.audioTracks[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._add](localTrack, trigger);\n        }\n        for (const level of this._instance.levels){\n            var _level_id;\n            var _level_id_toString;\n            const videoQuality = {\n                id: (_level_id_toString = (_level_id = level.id) === null || _level_id === void 0 ? void 0 : _level_id.toString()) !== null && _level_id_toString !== void 0 ? _level_id_toString : level.height + \"p\",\n                width: level.width,\n                height: level.height,\n                codec: level.codecSet,\n                bitrate: level.bitrate\n            };\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._add](videoQuality, trigger);\n        }\n        media.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"canplay\", {\n            trigger\n        }));\n    }\n    _onError(eventType, data) {\n        {\n            var _this__instance, _this__ctx_logger;\n            (_this__ctx_logger = this._ctx.logger) === null || _this__ctx_logger === void 0 ? void 0 : _this__ctx_logger.errorGroup(\"[vidstack] HLS error `\".concat(eventType, \"`\")).labelledLog(\"Media Element\", (_this__instance = this._instance) === null || _this__instance === void 0 ? void 0 : _this__instance.media).labelledLog(\"HLS Instance\", this._instance).labelledLog(\"Event Type\", eventType).labelledLog(\"Data\", data).labelledLog(\"Src\", (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source)).labelledLog(\"Media Store\", {\n                ...this._ctx.$state\n            }).dispatch();\n        }\n        if (data.fatal) {\n            switch(data.type){\n                case \"mediaError\":\n                    var _this__instance1;\n                    (_this__instance1 = this._instance) === null || _this__instance1 === void 0 ? void 0 : _this__instance1.recoverMediaError();\n                    break;\n                default:\n                    this._onFatalError(data.error);\n                    break;\n            }\n        }\n    }\n    _onFatalError(error) {\n        this._ctx.delegate._notify(\"error\", {\n            message: error.message,\n            code: 1,\n            error\n        });\n    }\n    _enableAutoQuality() {\n        if (this._instance) this._instance.currentLevel = -1;\n    }\n    _onUserQualityChange() {\n        const { qualities } = this._ctx;\n        if (!this._instance || qualities.auto) return;\n        this._instance[qualities.switch + \"Level\"] = qualities.selectedIndex;\n        if (_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.IS_CHROME) {\n            this._video.currentTime = this._video.currentTime;\n        }\n    }\n    _onUserAudioChange() {\n        const { audioTracks } = this._ctx;\n        if (this._instance && this._instance.audioTrack !== audioTracks.selectedIndex) {\n            this._instance.audioTrack = audioTracks.selectedIndex;\n        }\n    }\n    _loadSource(src) {\n        var _this__instance;\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) return;\n        (_this__instance = this._instance) === null || _this__instance === void 0 ? void 0 : _this__instance.loadSource(src.src);\n    }\n    _destroy() {\n        var _this__instance, _this__stopLiveSync, _this, _this__ctx_logger, _this__ctx;\n        (_this__instance = this._instance) === null || _this__instance === void 0 ? void 0 : _this__instance.destroy();\n        this._instance = null;\n        (_this__stopLiveSync = (_this = this)._stopLiveSync) === null || _this__stopLiveSync === void 0 ? void 0 : _this__stopLiveSync.call(_this);\n        this._stopLiveSync = null;\n        (_this__ctx = this._ctx) === null || _this__ctx === void 0 ? void 0 : (_this__ctx_logger = _this__ctx.logger) === null || _this__ctx_logger === void 0 ? void 0 : _this__ctx_logger.info(\"\\uD83C\\uDFD7️ Destroyed HLS instance\");\n    }\n    constructor(_video, _ctx){\n        this._video = _video;\n        this._ctx = _ctx;\n        this._instance = null;\n        this._stopLiveSync = null;\n        this._config = {};\n        this._callbacks = /* @__PURE__ */ new Set();\n    }\n}\nclass HLSLibLoader {\n    async _startLoading() {\n        var _this__ctx_logger;\n        (_this__ctx_logger = this._ctx.logger) === null || _this__ctx_logger === void 0 ? void 0 : _this__ctx_logger.info(\"\\uD83C\\uDFD7️ Loading HLS Library\");\n        const callbacks = {\n            onLoadStart: this._onLoadStart.bind(this),\n            onLoaded: this._onLoaded.bind(this),\n            onLoadError: this._onLoadError.bind(this)\n        };\n        let ctor = await loadHLSScript(this._lib, callbacks);\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(ctor) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this._lib)) ctor = await importHLS(this._lib, callbacks);\n        if (!ctor) return null;\n        if (!ctor.isSupported()) {\n            var _this__ctx_logger1;\n            const message = \"[vidstack] `hls.js` is not supported in this environment\";\n            (_this__ctx_logger1 = this._ctx.logger) === null || _this__ctx_logger1 === void 0 ? void 0 : _this__ctx_logger1.error(message);\n            this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-unsupported\"));\n            this._ctx.delegate._notify(\"error\", {\n                message,\n                code: 4\n            });\n            return null;\n        }\n        return ctor;\n    }\n    _onLoadStart() {\n        {\n            var _this__ctx_logger;\n            (_this__ctx_logger = this._ctx.logger) === null || _this__ctx_logger === void 0 ? void 0 : _this__ctx_logger.infoGroup(\"Starting to load `hls.js`\").labelledLog(\"URL\", this._lib).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-load-start\"));\n    }\n    _onLoaded(ctor) {\n        {\n            var _this__ctx_logger;\n            (_this__ctx_logger = this._ctx.logger) === null || _this__ctx_logger === void 0 ? void 0 : _this__ctx_logger.infoGroup(\"Loaded `hls.js`\").labelledLog(\"Library\", this._lib).labelledLog(\"Constructor\", ctor).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-loaded\", {\n            detail: ctor\n        }));\n        this._callback(ctor);\n    }\n    _onLoadError(e) {\n        const error = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.coerceToError)(e);\n        {\n            var _this__ctx_logger;\n            (_this__ctx_logger = this._ctx.logger) === null || _this__ctx_logger === void 0 ? void 0 : _this__ctx_logger.errorGroup(\"[vidstack] Failed to load `hls.js`\").labelledLog(\"Library\", this._lib).labelledLog(\"Error\", e).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-load-error\", {\n            detail: error\n        }));\n        this._ctx.delegate._notify(\"error\", {\n            message: error.message,\n            code: 4,\n            error\n        });\n    }\n    constructor(_lib, _ctx, _callback){\n        this._lib = _lib;\n        this._ctx = _ctx;\n        this._callback = _callback;\n        this._startLoading();\n    }\n}\nasync function importHLS(loader) {\n    let callbacks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    var _callbacks_onLoadStart;\n    if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(loader)) return void 0;\n    (_callbacks_onLoadStart = callbacks.onLoadStart) === null || _callbacks_onLoadStart === void 0 ? void 0 : _callbacks_onLoadStart.call(callbacks);\n    if (loader.prototype && loader.prototype !== Function) {\n        var _callbacks_onLoaded;\n        (_callbacks_onLoaded = callbacks.onLoaded) === null || _callbacks_onLoaded === void 0 ? void 0 : _callbacks_onLoaded.call(callbacks, loader);\n        return loader;\n    }\n    try {\n        var _this;\n        const ctor = (_this = await loader()) === null || _this === void 0 ? void 0 : _this.default;\n        if (ctor && !!ctor.isSupported) {\n            var _callbacks_onLoaded1;\n            (_callbacks_onLoaded1 = callbacks.onLoaded) === null || _callbacks_onLoaded1 === void 0 ? void 0 : _callbacks_onLoaded1.call(callbacks, ctor);\n        } else {\n            throw Error( true ? \"[vidstack] failed importing `hls.js`. Dynamic import returned invalid constructor.\" : 0);\n        }\n        return ctor;\n    } catch (err) {\n        var _callbacks_onLoadError;\n        (_callbacks_onLoadError = callbacks.onLoadError) === null || _callbacks_onLoadError === void 0 ? void 0 : _callbacks_onLoadError.call(callbacks, err);\n    }\n    return void 0;\n}\nasync function loadHLSScript(src) {\n    let callbacks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    var _callbacks_onLoadStart;\n    if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) return void 0;\n    (_callbacks_onLoadStart = callbacks.onLoadStart) === null || _callbacks_onLoadStart === void 0 ? void 0 : _callbacks_onLoadStart.call(callbacks);\n    try {\n        var _callbacks_onLoaded;\n        await (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.loadScript)(src);\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(window.Hls)) {\n            throw Error( true ? \"[vidstack] failed loading `hls.js`. Could not find a valid `Hls` constructor on window\" : 0);\n        }\n        const ctor = window.Hls;\n        (_callbacks_onLoaded = callbacks.onLoaded) === null || _callbacks_onLoaded === void 0 ? void 0 : _callbacks_onLoaded.call(callbacks, ctor);\n        return ctor;\n    } catch (err) {\n        var _callbacks_onLoadError;\n        (_callbacks_onLoadError = callbacks.onLoadError) === null || _callbacks_onLoadError === void 0 ? void 0 : _callbacks_onLoadError.call(callbacks, err);\n    }\n    return void 0;\n}\nconst JS_DELIVR_CDN = \"https://cdn.jsdelivr.net\";\nclass HLSProvider extends _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.VideoProvider {\n    /**\n   * The `hls.js` constructor.\n   */ get ctor() {\n        return this._ctor;\n    }\n    /**\n   * The current `hls.js` instance.\n   */ get instance() {\n        return this._controller.instance;\n    }\n    get type() {\n        return \"hls\";\n    }\n    get canLiveSync() {\n        return true;\n    }\n    /**\n   * The `hls.js` configuration object.\n   *\n   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning}\n   */ get config() {\n        return this._controller._config;\n    }\n    set config(config) {\n        this._controller._config = config;\n    }\n    /**\n   * The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.\n   *\n   * @defaultValue `https://cdn.jsdelivr.net/npm/hls.js@^1.0.0/dist/hls.min.js`\n   */ get library() {\n        return this._library;\n    }\n    set library(library) {\n        this._library = library;\n    }\n    preconnect() {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this._library)) return;\n        (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.preconnect)(this._library);\n    }\n    setup() {\n        super.setup();\n        new HLSLibLoader(this._library, this._ctx, (ctor)=>{\n            this._ctor = ctor;\n            this._controller.setup(ctor);\n            this._ctx.delegate._notify(\"provider-setup\", this);\n            const src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source);\n            if (src) this.loadSource(src);\n        });\n    }\n    async loadSource(src, preload) {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) {\n            this._removeSource();\n            return;\n        }\n        this._media.preload = preload || \"\";\n        this._appendSource(src, \"application/x-mpegurl\");\n        this._controller._loadSource(src);\n        this._currentSrc = src;\n    }\n    /**\n   * The given callback is invoked when a new `hls.js` instance is created and right before it's\n   * attached to media.\n   */ onInstance(callback) {\n        const instance = this._controller.instance;\n        if (instance) callback(instance);\n        this._controller._callbacks.add(callback);\n        return ()=>this._controller._callbacks.delete(callback);\n    }\n    destroy() {\n        this._controller._destroy();\n    }\n    constructor(){\n        super(...arguments);\n        this.$$PROVIDER_TYPE = \"HLS\";\n        this._ctor = null;\n        this._controller = new HLSController(this.video, this._ctx);\n        this._library = \"\".concat(JS_DELIVR_CDN, \"/npm/hls.js@^1.5.0/dist/hls\", \".js\");\n    }\n}\n/**\n * Whether `hls.js` is supported in this environment.\n */ HLSProvider.supported = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.isHLSSupported)();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dci4Ce5n.js\n"));

/***/ })

}]);