"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_vidstack_react_dev_chunks_vidstack-Bby4qdTP_js"],{

/***/ "(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmbedProvider: function() { return /* binding */ EmbedProvider; }\n/* harmony export */ });\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* __next_internal_client_entry_do_not_use__ EmbedProvider auto */ \n\nclass EmbedProvider {\n    get iframe() {\n        return this._iframe;\n    }\n    setup() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(window, \"message\", this._onWindowMessage.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(this._iframe, \"load\", this._onLoad.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.effect)(this._watchSrc.bind(this));\n    }\n    _watchSrc() {\n        const src = this._src();\n        if (!src.length) {\n            this._iframe.setAttribute(\"src\", \"\");\n            return;\n        }\n        const params = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.peek)(()=>this._buildParams());\n        this._iframe.setAttribute(\"src\", (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__.appendParamsToURL)(src, params));\n    }\n    _postMessage(message, target) {\n        var _this__iframe_contentWindow;\n        if (_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__.IS_SERVER) return;\n        (_this__iframe_contentWindow = this._iframe.contentWindow) === null || _this__iframe_contentWindow === void 0 ? void 0 : _this__iframe_contentWindow.postMessage(JSON.stringify(message), target !== null && target !== void 0 ? target : \"*\");\n    }\n    _onWindowMessage(event) {\n        var _this__iframe;\n        const origin = this._getOrigin(), isOriginMatch = (event.source === null || event.source === ((_this__iframe = this._iframe) === null || _this__iframe === void 0 ? void 0 : _this__iframe.contentWindow)) && (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.isString)(origin) || origin === event.origin);\n        if (!isOriginMatch) return;\n        try {\n            const message = JSON.parse(event.data);\n            if (message) this._onMessage(message, event);\n            return;\n        } catch (e) {}\n        if (event.data) this._onMessage(event.data, event);\n    }\n    constructor(_iframe){\n        this._iframe = _iframe;\n        this._src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.signal)(\"\");\n        /**\n     * Defines which referrer is sent when fetching the resource.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy}\n     */ this.referrerPolicy = null;\n        _iframe.setAttribute(\"frameBorder\", \"0\");\n        _iframe.setAttribute(\"aria-hidden\", \"true\");\n        _iframe.setAttribute(\"allow\", \"autoplay; fullscreen; encrypted-media; picture-in-picture; accelerometer; gyroscope\");\n        if (this.referrerPolicy !== null) {\n            _iframe.setAttribute(\"referrerpolicy\", this.referrerPolicy);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Admlkc3RhY2svcmVhY3QvZGV2L2NodW5rcy92aWRzdGFjay1CS1Zpei1RQy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7bUVBRXNFO0FBQ2U7QUFFckYsTUFBTU87SUFvQkosSUFBSUMsU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDQyxPQUFPO0lBQ3JCO0lBQ0FDLFFBQVE7UUFDTlAsaUVBQVdBLENBQUNRLFFBQVEsV0FBVyxJQUFJLENBQUNDLGdCQUFnQixDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUM5RFYsaUVBQVdBLENBQUMsSUFBSSxDQUFDTSxPQUFPLEVBQUUsUUFBUSxJQUFJLENBQUNLLE9BQU8sQ0FBQ0QsSUFBSSxDQUFDLElBQUk7UUFDeERULDREQUFNQSxDQUFDLElBQUksQ0FBQ1csU0FBUyxDQUFDRixJQUFJLENBQUMsSUFBSTtJQUNqQztJQUNBRSxZQUFZO1FBQ1YsTUFBTUMsTUFBTSxJQUFJLENBQUNDLElBQUk7UUFDckIsSUFBSSxDQUFDRCxJQUFJRSxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUNULE9BQU8sQ0FBQ1UsWUFBWSxDQUFDLE9BQU87WUFDakM7UUFDRjtRQUNBLE1BQU1DLFNBQVNmLDBEQUFJQSxDQUFDLElBQU0sSUFBSSxDQUFDZ0IsWUFBWTtRQUMzQyxJQUFJLENBQUNaLE9BQU8sQ0FBQ1UsWUFBWSxDQUFDLE9BQU9uQix3RUFBaUJBLENBQUNnQixLQUFLSTtJQUMxRDtJQUNBRSxhQUFhQyxPQUFPLEVBQUVDLE1BQU0sRUFBRTtZQUU1QjtRQURBLElBQUl2Qiw0REFBU0EsRUFBRTtTQUNmLGtDQUFJLENBQUNRLE9BQU8sQ0FBQ2dCLGFBQWEsY0FBMUIsOEVBQTRCQyxXQUFXLENBQUNDLEtBQUtDLFNBQVMsQ0FBQ0wsVUFBVUMsbUJBQUFBLG9CQUFBQSxTQUFVO0lBQzdFO0lBQ0FaLGlCQUFpQmlCLEtBQUssRUFBRTtZQUN1RTtRQUE3RixNQUFNQyxTQUFTLElBQUksQ0FBQ0MsVUFBVSxJQUFJQyxnQkFBZ0IsQ0FBQ0gsTUFBTUksTUFBTSxLQUFLLFFBQVFKLE1BQU1JLE1BQU0sT0FBSyxvQkFBSSxDQUFDeEIsT0FBTyxjQUFaLGtEQUFjZ0IsYUFBYSxDQUFELEtBQU8sRUFBQ25CLDhEQUFRQSxDQUFDd0IsV0FBV0EsV0FBV0QsTUFBTUMsTUFBTTtRQUMxSyxJQUFJLENBQUNFLGVBQWU7UUFDcEIsSUFBSTtZQUNGLE1BQU1ULFVBQVVJLEtBQUtPLEtBQUssQ0FBQ0wsTUFBTU0sSUFBSTtZQUNyQyxJQUFJWixTQUFTLElBQUksQ0FBQ2EsVUFBVSxDQUFDYixTQUFTTTtZQUN0QztRQUNGLEVBQUUsT0FBT1EsR0FBRyxDQUNaO1FBQ0EsSUFBSVIsTUFBTU0sSUFBSSxFQUFFLElBQUksQ0FBQ0MsVUFBVSxDQUFDUCxNQUFNTSxJQUFJLEVBQUVOO0lBQzlDO0lBbERBUyxZQUFZN0IsT0FBTyxDQUFFO1FBQ25CLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ1EsSUFBSSxHQUFHZiw0REFBTUEsQ0FBQztRQUNuQjs7OztLQUlDLEdBQ0QsSUFBSSxDQUFDcUMsY0FBYyxHQUFHO1FBQ3RCOUIsUUFBUVUsWUFBWSxDQUFDLGVBQWU7UUFDcENWLFFBQVFVLFlBQVksQ0FBQyxlQUFlO1FBQ3BDVixRQUFRVSxZQUFZLENBQ2xCLFNBQ0E7UUFFRixJQUFJLElBQUksQ0FBQ29CLGNBQWMsS0FBSyxNQUFNO1lBQ2hDOUIsUUFBUVUsWUFBWSxDQUFDLGtCQUFrQixJQUFJLENBQUNvQixjQUFjO1FBQzVEO0lBQ0Y7QUFpQ0Y7QUFFeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B2aWRzdGFjay9yZWFjdC9kZXYvY2h1bmtzL3ZpZHN0YWNrLUJLVml6LVFDLmpzPzU0MzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0IHsgYXBwZW5kUGFyYW1zVG9VUkwsIElTX1NFUlZFUiB9IGZyb20gJy4vdmlkc3RhY2stTm05T0p5N3guanMnO1xuaW1wb3J0IHsgc2lnbmFsLCBsaXN0ZW5FdmVudCwgZWZmZWN0LCBwZWVrLCBpc1N0cmluZyB9IGZyb20gJy4vdmlkc3RhY2stM2hzMy04aV8uanMnO1xuXG5jbGFzcyBFbWJlZFByb3ZpZGVyIHtcbiAgY29uc3RydWN0b3IoX2lmcmFtZSkge1xuICAgIHRoaXMuX2lmcmFtZSA9IF9pZnJhbWU7XG4gICAgdGhpcy5fc3JjID0gc2lnbmFsKFwiXCIpO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgd2hpY2ggcmVmZXJyZXIgaXMgc2VudCB3aGVuIGZldGNoaW5nIHRoZSByZXNvdXJjZS5cbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MSUZyYW1lRWxlbWVudC9yZWZlcnJlclBvbGljeX1cbiAgICAgKi9cbiAgICB0aGlzLnJlZmVycmVyUG9saWN5ID0gbnVsbDtcbiAgICBfaWZyYW1lLnNldEF0dHJpYnV0ZShcImZyYW1lQm9yZGVyXCIsIFwiMFwiKTtcbiAgICBfaWZyYW1lLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICBfaWZyYW1lLnNldEF0dHJpYnV0ZShcbiAgICAgIFwiYWxsb3dcIixcbiAgICAgIFwiYXV0b3BsYXk7IGZ1bGxzY3JlZW47IGVuY3J5cHRlZC1tZWRpYTsgcGljdHVyZS1pbi1waWN0dXJlOyBhY2NlbGVyb21ldGVyOyBneXJvc2NvcGVcIlxuICAgICk7XG4gICAgaWYgKHRoaXMucmVmZXJyZXJQb2xpY3kgIT09IG51bGwpIHtcbiAgICAgIF9pZnJhbWUuc2V0QXR0cmlidXRlKFwicmVmZXJyZXJwb2xpY3lcIiwgdGhpcy5yZWZlcnJlclBvbGljeSk7XG4gICAgfVxuICB9XG4gIGdldCBpZnJhbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lmcmFtZTtcbiAgfVxuICBzZXR1cCgpIHtcbiAgICBsaXN0ZW5FdmVudCh3aW5kb3csIFwibWVzc2FnZVwiLCB0aGlzLl9vbldpbmRvd01lc3NhZ2UuYmluZCh0aGlzKSk7XG4gICAgbGlzdGVuRXZlbnQodGhpcy5faWZyYW1lLCBcImxvYWRcIiwgdGhpcy5fb25Mb2FkLmJpbmQodGhpcykpO1xuICAgIGVmZmVjdCh0aGlzLl93YXRjaFNyYy5iaW5kKHRoaXMpKTtcbiAgfVxuICBfd2F0Y2hTcmMoKSB7XG4gICAgY29uc3Qgc3JjID0gdGhpcy5fc3JjKCk7XG4gICAgaWYgKCFzcmMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9pZnJhbWUuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbXMgPSBwZWVrKCgpID0+IHRoaXMuX2J1aWxkUGFyYW1zKCkpO1xuICAgIHRoaXMuX2lmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgYXBwZW5kUGFyYW1zVG9VUkwoc3JjLCBwYXJhbXMpKTtcbiAgfVxuICBfcG9zdE1lc3NhZ2UobWVzc2FnZSwgdGFyZ2V0KSB7XG4gICAgaWYgKElTX1NFUlZFUikgcmV0dXJuO1xuICAgIHRoaXMuX2lmcmFtZS5jb250ZW50V2luZG93Py5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgdGFyZ2V0ID8/IFwiKlwiKTtcbiAgfVxuICBfb25XaW5kb3dNZXNzYWdlKGV2ZW50KSB7XG4gICAgY29uc3Qgb3JpZ2luID0gdGhpcy5fZ2V0T3JpZ2luKCksIGlzT3JpZ2luTWF0Y2ggPSAoZXZlbnQuc291cmNlID09PSBudWxsIHx8IGV2ZW50LnNvdXJjZSA9PT0gdGhpcy5faWZyYW1lPy5jb250ZW50V2luZG93KSAmJiAoIWlzU3RyaW5nKG9yaWdpbikgfHwgb3JpZ2luID09PSBldmVudC5vcmlnaW4pO1xuICAgIGlmICghaXNPcmlnaW5NYXRjaCkgcmV0dXJuO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgIGlmIChtZXNzYWdlKSB0aGlzLl9vbk1lc3NhZ2UobWVzc2FnZSwgZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gICAgaWYgKGV2ZW50LmRhdGEpIHRoaXMuX29uTWVzc2FnZShldmVudC5kYXRhLCBldmVudCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgRW1iZWRQcm92aWRlciB9O1xuIl0sIm5hbWVzIjpbImFwcGVuZFBhcmFtc1RvVVJMIiwiSVNfU0VSVkVSIiwic2lnbmFsIiwibGlzdGVuRXZlbnQiLCJlZmZlY3QiLCJwZWVrIiwiaXNTdHJpbmciLCJFbWJlZFByb3ZpZGVyIiwiaWZyYW1lIiwiX2lmcmFtZSIsInNldHVwIiwid2luZG93IiwiX29uV2luZG93TWVzc2FnZSIsImJpbmQiLCJfb25Mb2FkIiwiX3dhdGNoU3JjIiwic3JjIiwiX3NyYyIsImxlbmd0aCIsInNldEF0dHJpYnV0ZSIsInBhcmFtcyIsIl9idWlsZFBhcmFtcyIsIl9wb3N0TWVzc2FnZSIsIm1lc3NhZ2UiLCJ0YXJnZXQiLCJjb250ZW50V2luZG93IiwicG9zdE1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZXZlbnQiLCJvcmlnaW4iLCJfZ2V0T3JpZ2luIiwiaXNPcmlnaW5NYXRjaCIsInNvdXJjZSIsInBhcnNlIiwiZGF0YSIsIl9vbk1lc3NhZ2UiLCJlIiwiY29uc3RydWN0b3IiLCJyZWZlcnJlclBvbGljeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Bby4qdTP.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Bby4qdTP.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeProvider: function() { return /* binding */ YouTubeProvider; }\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_BKViz_QC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-BKViz-QC.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js\");\n/* harmony import */ var _vidstack_Zc3I7oOd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vidstack-Zc3I7oOd.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ YouTubeProvider auto */ \n\n\n\n\n\nconst YouTubePlayerState = {\n    _Unstarted: -1,\n    _Ended: 0,\n    _Playing: 1,\n    _Paused: 2,\n    _Buffering: 3,\n    _Cued: 5\n};\nclass YouTubeProvider extends _vidstack_BKViz_QC_js__WEBPACK_IMPORTED_MODULE_1__.EmbedProvider {\n    get _notify() {\n        return this._ctx.delegate._notify;\n    }\n    get currentSrc() {\n        return this._currentSrc;\n    }\n    get type() {\n        return \"youtube\";\n    }\n    get videoId() {\n        return this._videoId();\n    }\n    preconnect() {\n        (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.preconnect)(this._getOrigin());\n    }\n    setup() {\n        super.setup();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.effect)(this._watchVideoId.bind(this));\n        this._notify(\"provider-setup\", this);\n    }\n    destroy() {\n        this._reset();\n        const message = \"provider destroyed\";\n        for (const promises of this._promises.values()){\n            for (const { reject } of promises)reject(message);\n        }\n        this._promises.clear();\n    }\n    async play() {\n        return this._remote(\"playVideo\");\n    }\n    _playFail(message) {\n        var _this__getPromise;\n        (_this__getPromise = this._getPromise(\"playVideo\")) === null || _this__getPromise === void 0 ? void 0 : _this__getPromise.reject(message);\n    }\n    async pause() {\n        return this._remote(\"pauseVideo\");\n    }\n    _pauseFail(message) {\n        var _this__getPromise;\n        (_this__getPromise = this._getPromise(\"pauseVideo\")) === null || _this__getPromise === void 0 ? void 0 : _this__getPromise.reject(message);\n    }\n    setMuted(muted) {\n        if (muted) this._remote(\"mute\");\n        else this._remote(\"unMute\");\n    }\n    setCurrentTime(time) {\n        this._pausedSeeking = this._ctx.$state.paused();\n        this._remote(\"seekTo\", time);\n        this._notify(\"seeking\", time);\n    }\n    setVolume(volume) {\n        this._remote(\"setVolume\", volume * 100);\n    }\n    setPlaybackRate(rate) {\n        this._remote(\"setPlaybackRate\", rate);\n    }\n    async loadSource(src) {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isString)(src.src)) {\n            this._currentSrc = null;\n            this._videoId.set(\"\");\n            return;\n        }\n        const videoId = (0,_vidstack_Zc3I7oOd_js__WEBPACK_IMPORTED_MODULE_4__.resolveYouTubeVideoId)(src.src);\n        this._videoId.set(videoId !== null && videoId !== void 0 ? videoId : \"\");\n        this._currentSrc = src;\n    }\n    _getOrigin() {\n        return !this.cookies ? \"https://www.youtube-nocookie.com\" : \"https://www.youtube.com\";\n    }\n    _watchVideoId() {\n        this._reset();\n        const videoId = this._videoId();\n        if (!videoId) {\n            this._src.set(\"\");\n            return;\n        }\n        this._src.set(\"\".concat(this._getOrigin(), \"/embed/\").concat(videoId));\n        this._notify(\"load-start\");\n    }\n    _buildParams() {\n        const { keyDisabled } = this._ctx.$props, { muted, playsInline, nativeControls } = this._ctx.$state, showControls = nativeControls();\n        return {\n            autoplay: 0,\n            cc_lang_pref: this.language,\n            cc_load_policy: showControls ? 1 : void 0,\n            color: this.color,\n            controls: showControls ? 1 : 0,\n            disablekb: !showControls || keyDisabled() ? 1 : 0,\n            enablejsapi: 1,\n            fs: 1,\n            hl: this.language,\n            iv_load_policy: showControls ? 1 : 3,\n            mute: muted() ? 1 : 0,\n            playsinline: playsInline() ? 1 : 0\n        };\n    }\n    _remote(command, arg) {\n        let promise = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.deferredPromise)(), promises = this._promises.get(command);\n        if (!promises) this._promises.set(command, promises = []);\n        promises.push(promise);\n        this._postMessage({\n            event: \"command\",\n            func: command,\n            args: arg ? [\n                arg\n            ] : void 0\n        });\n        return promise.promise;\n    }\n    _onLoad() {\n        window.setTimeout(()=>this._postMessage({\n                event: \"listening\"\n            }), 100);\n    }\n    _onReady(trigger) {\n        this._notify(\"loaded-metadata\");\n        this._notify(\"loaded-data\");\n        this._ctx.delegate._ready(void 0, trigger);\n    }\n    _onPause(trigger) {\n        var _this__getPromise;\n        (_this__getPromise = this._getPromise(\"pauseVideo\")) === null || _this__getPromise === void 0 ? void 0 : _this__getPromise.resolve();\n        this._notify(\"pause\", void 0, trigger);\n    }\n    _onTimeUpdate(time, trigger) {\n        const { duration, realCurrentTime } = this._ctx.$state, hasEnded = this._state === YouTubePlayerState._Ended, boundTime = hasEnded ? duration() : time;\n        this._notify(\"time-change\", boundTime, trigger);\n        if (!hasEnded && Math.abs(boundTime - realCurrentTime()) > 1) {\n            this._notify(\"seeking\", boundTime, trigger);\n        }\n    }\n    _onProgress(buffered, seekable, trigger) {\n        const detail = {\n            buffered: new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, buffered),\n            seekable\n        };\n        this._notify(\"progress\", detail, trigger);\n        const { seeking, realCurrentTime } = this._ctx.$state;\n        if (seeking() && buffered > realCurrentTime()) {\n            this._onSeeked(trigger);\n        }\n    }\n    _onSeeked(trigger) {\n        const { paused, realCurrentTime } = this._ctx.$state;\n        window.clearTimeout(this._seekingTimer);\n        this._seekingTimer = window.setTimeout(()=>{\n            this._notify(\"seeked\", realCurrentTime(), trigger);\n            this._seekingTimer = -1;\n        }, paused() ? 100 : 0);\n        this._pausedSeeking = false;\n    }\n    _onEnded(trigger) {\n        const { seeking } = this._ctx.$state;\n        if (seeking()) this._onSeeked(trigger);\n        this._notify(\"pause\", void 0, trigger);\n        this._notify(\"end\", void 0, trigger);\n    }\n    _onStateChange(state, trigger) {\n        const { started, paused, seeking } = this._ctx.$state, isPlaying = state === YouTubePlayerState._Playing, isBuffering = state === YouTubePlayerState._Buffering, isPendingPlay = !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(this._getPromise(\"playVideo\")), isPlay = (paused() || isPendingPlay) && (isBuffering || isPlaying);\n        if (isBuffering) this._notify(\"waiting\", void 0, trigger);\n        if (seeking() && isPlaying) {\n            this._onSeeked(trigger);\n        }\n        if (!started() && isPlay && this._pausedSeeking) {\n            this._playFail(\"invalid internal play operation\");\n            if (isPlaying) {\n                this.pause();\n                this._pausedSeeking = false;\n            }\n            return;\n        }\n        if (isPlay) {\n            var _this__getPromise;\n            (_this__getPromise = this._getPromise(\"playVideo\")) === null || _this__getPromise === void 0 ? void 0 : _this__getPromise.resolve();\n            this._notify(\"play\", void 0, trigger);\n        }\n        switch(state){\n            case YouTubePlayerState._Unstarted:\n                this._playFail(\"provider rejected\");\n                this._pauseFail(\"provider rejected\");\n                this._notify(\"pause\", void 0, trigger);\n                break;\n            case YouTubePlayerState._Cued:\n                this._onReady(trigger);\n                break;\n            case YouTubePlayerState._Playing:\n                this._notify(\"playing\", void 0, trigger);\n                break;\n            case YouTubePlayerState._Paused:\n                this._onPause(trigger);\n                break;\n            case YouTubePlayerState._Ended:\n                this._onEnded(trigger);\n                break;\n        }\n        this._state = state;\n    }\n    _onMessage(param, event) {\n        let { info } = param;\n        if (!info) return;\n        const { title, intrinsicDuration, playbackRate } = this._ctx.$state;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(info.videoData) && info.videoData.title !== title()) {\n            this._notify(\"title-change\", info.videoData.title, event);\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(info.duration) && info.duration !== intrinsicDuration()) {\n            if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(info.videoLoadedFraction)) {\n                var _info_progressState;\n                var _info_progressState_loaded;\n                const buffered = (_info_progressState_loaded = (_info_progressState = info.progressState) === null || _info_progressState === void 0 ? void 0 : _info_progressState.loaded) !== null && _info_progressState_loaded !== void 0 ? _info_progressState_loaded : info.videoLoadedFraction * info.duration, seekable = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, info.duration);\n                this._onProgress(buffered, seekable, event);\n            }\n            this._notify(\"duration-change\", info.duration, event);\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(info.playbackRate) && info.playbackRate !== playbackRate()) {\n            this._notify(\"rate-change\", info.playbackRate, event);\n        }\n        if (info.progressState) {\n            const { current, seekableStart, seekableEnd, loaded, duration: _duration } = info.progressState;\n            this._onTimeUpdate(current, event);\n            this._onProgress(loaded, new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(seekableStart, seekableEnd), event);\n            if (_duration !== intrinsicDuration()) {\n                this._notify(\"duration-change\", _duration, event);\n            }\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(info.volume) && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isBoolean)(info.muted)) {\n            const detail = {\n                muted: info.muted,\n                volume: info.volume / 100\n            };\n            this._notify(\"volume-change\", detail, event);\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(info.playerState) && info.playerState !== this._state) {\n            this._onStateChange(info.playerState, event);\n        }\n    }\n    _reset() {\n        this._state = -1;\n        this._seekingTimer = -1;\n        this._pausedSeeking = false;\n    }\n    _getPromise(command) {\n        var _this__promises_get;\n        return (_this__promises_get = this._promises.get(command)) === null || _this__promises_get === void 0 ? void 0 : _this__promises_get.shift();\n    }\n    constructor(iframe, _ctx){\n        super(iframe);\n        this._ctx = _ctx;\n        this.$$PROVIDER_TYPE = \"YOUTUBE\";\n        this.scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.createScope)();\n        this._videoId = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.signal)(\"\");\n        this._state = -1;\n        this._currentSrc = null;\n        this._seekingTimer = -1;\n        this._pausedSeeking = false;\n        this._promises = /* @__PURE__ */ new Map();\n        /**\n     * Sets the player's interface language. The parameter value is an ISO 639-1 two-letter\n     * language code or a fully specified locale. For example, fr and fr-ca are both valid values.\n     * Other language input codes, such as IETF language tags (BCP 47) might also be handled properly.\n     *\n     * The interface language is used for tooltips in the player and also affects the default caption\n     * track. Note that YouTube might select a different caption track language for a particular\n     * user based on the user's individual language preferences and the availability of caption tracks.\n     *\n     * @defaultValue 'en'\n     */ this.language = \"en\";\n        this.color = \"red\";\n        /**\n     * Whether cookies should be enabled on the embed. This is turned off by default to be\n     * GDPR-compliant.\n     *\n     * @defaultValue `false`\n     */ this.cookies = false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Bby4qdTP.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findYouTubePoster: function() { return /* binding */ findYouTubePoster; },\n/* harmony export */   resolveYouTubeVideoId: function() { return /* binding */ resolveYouTubeVideoId; }\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ findYouTubePoster,resolveYouTubeVideoId auto */ const videoIdRE = /(?:youtu\\.be|youtube|youtube\\.com|youtube-nocookie\\.com)\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=|)((?:\\w|-){11})/;\nconst posterCache = /* @__PURE__ */ new Map();\nconst pendingFetch = /* @__PURE__ */ new Map();\nfunction resolveYouTubeVideoId(src) {\n    var _src_match;\n    return (_src_match = src.match(videoIdRE)) === null || _src_match === void 0 ? void 0 : _src_match[1];\n}\nasync function findYouTubePoster(videoId, abort) {\n    if (posterCache.has(videoId)) return posterCache.get(videoId);\n    if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);\n    const pending = new Promise(async (resolve)=>{\n        const sizes = [\n            \"maxresdefault\",\n            \"sddefault\",\n            \"hqdefault\"\n        ];\n        for (const size of sizes){\n            for (const webp of [\n                true,\n                false\n            ]){\n                const url = resolveYouTubePosterURL(videoId, size, webp), response = await fetch(url, {\n                    mode: \"no-cors\",\n                    signal: abort.signal\n                });\n                if (response.status < 400) {\n                    posterCache.set(videoId, url);\n                    resolve(url);\n                    return;\n                }\n            }\n        }\n    }).catch(()=>\"\").finally(()=>pendingFetch.delete(videoId));\n    pendingFetch.set(videoId, pending);\n    return pending;\n}\nfunction resolveYouTubePosterURL(videoId, size, webp) {\n    const type = webp ? \"webp\" : \"jpg\";\n    return \"https://i.ytimg.com/\".concat(webp ? \"vi_webp\" : \"vi\", \"/\").concat(videoId, \"/\").concat(size, \".\").concat(type);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Admlkc3RhY2svcmVhY3QvZGV2L2NodW5rcy92aWRzdGFjay1aYzNJN29PZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs2RkFFQSxNQUFNQSxZQUFZO0FBQ2xCLE1BQU1DLGNBQWMsYUFBYSxHQUFHLElBQUlDO0FBQ3hDLE1BQU1DLGVBQWUsYUFBYSxHQUFHLElBQUlEO0FBQ3pDLFNBQVNFLHNCQUFzQkMsR0FBRztRQUN6QkE7SUFBUCxRQUFPQSxhQUFBQSxJQUFJQyxLQUFLLENBQUNOLHdCQUFWSyxpQ0FBQUEsVUFBc0IsQ0FBQyxFQUFFO0FBQ2xDO0FBQ0EsZUFBZUUsa0JBQWtCQyxPQUFPLEVBQUVDLEtBQUs7SUFDN0MsSUFBSVIsWUFBWVMsR0FBRyxDQUFDRixVQUFVLE9BQU9QLFlBQVlVLEdBQUcsQ0FBQ0g7SUFDckQsSUFBSUwsYUFBYU8sR0FBRyxDQUFDRixVQUFVLE9BQU9MLGFBQWFRLEdBQUcsQ0FBQ0g7SUFDdkQsTUFBTUksVUFBVSxJQUFJQyxRQUFRLE9BQU9DO1FBQ2pDLE1BQU1DLFFBQVE7WUFBQztZQUFpQjtZQUFhO1NBQVk7UUFDekQsS0FBSyxNQUFNQyxRQUFRRCxNQUFPO1lBQ3hCLEtBQUssTUFBTUUsUUFBUTtnQkFBQztnQkFBTTthQUFNLENBQUU7Z0JBQ2hDLE1BQU1DLE1BQU1DLHdCQUF3QlgsU0FBU1EsTUFBTUMsT0FBT0csV0FBVyxNQUFNQyxNQUFNSCxLQUFLO29CQUNwRkksTUFBTTtvQkFDTkMsUUFBUWQsTUFBTWMsTUFBTTtnQkFDdEI7Z0JBQ0EsSUFBSUgsU0FBU0ksTUFBTSxHQUFHLEtBQUs7b0JBQ3pCdkIsWUFBWXdCLEdBQUcsQ0FBQ2pCLFNBQVNVO29CQUN6QkosUUFBUUk7b0JBQ1I7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0YsR0FBR1EsS0FBSyxDQUFDLElBQU0sSUFBSUMsT0FBTyxDQUFDLElBQU14QixhQUFheUIsTUFBTSxDQUFDcEI7SUFDckRMLGFBQWFzQixHQUFHLENBQUNqQixTQUFTSTtJQUMxQixPQUFPQTtBQUNUO0FBQ0EsU0FBU08sd0JBQXdCWCxPQUFPLEVBQUVRLElBQUksRUFBRUMsSUFBSTtJQUNsRCxNQUFNWSxPQUFPWixPQUFPLFNBQVM7SUFDN0IsT0FBTyx1QkFBa0RULE9BQTNCUyxPQUFPLFlBQVksTUFBSyxLQUFjRCxPQUFYUixTQUFRLEtBQVdxQixPQUFSYixNQUFLLEtBQVEsT0FBTGE7QUFDOUU7QUFFb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B2aWRzdGFjay9yZWFjdC9kZXYvY2h1bmtzL3ZpZHN0YWNrLVpjM0k3b09kLmpzPzUxMTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuY29uc3QgdmlkZW9JZFJFID0gLyg/OnlvdXR1XFwuYmV8eW91dHViZXx5b3V0dWJlXFwuY29tfHlvdXR1YmUtbm9jb29raWVcXC5jb20pXFwvKD86ZW1iZWRcXC98dlxcL3x3YXRjaFxcP3Y9fHdhdGNoXFw/Lismdj18KSgoPzpcXHd8LSl7MTF9KS87XG5jb25zdCBwb3N0ZXJDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5jb25zdCBwZW5kaW5nRmV0Y2ggPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuZnVuY3Rpb24gcmVzb2x2ZVlvdVR1YmVWaWRlb0lkKHNyYykge1xuICByZXR1cm4gc3JjLm1hdGNoKHZpZGVvSWRSRSk/LlsxXTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGZpbmRZb3VUdWJlUG9zdGVyKHZpZGVvSWQsIGFib3J0KSB7XG4gIGlmIChwb3N0ZXJDYWNoZS5oYXModmlkZW9JZCkpIHJldHVybiBwb3N0ZXJDYWNoZS5nZXQodmlkZW9JZCk7XG4gIGlmIChwZW5kaW5nRmV0Y2guaGFzKHZpZGVvSWQpKSByZXR1cm4gcGVuZGluZ0ZldGNoLmdldCh2aWRlb0lkKTtcbiAgY29uc3QgcGVuZGluZyA9IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3Qgc2l6ZXMgPSBbXCJtYXhyZXNkZWZhdWx0XCIsIFwic2RkZWZhdWx0XCIsIFwiaHFkZWZhdWx0XCJdO1xuICAgIGZvciAoY29uc3Qgc2l6ZSBvZiBzaXplcykge1xuICAgICAgZm9yIChjb25zdCB3ZWJwIG9mIFt0cnVlLCBmYWxzZV0pIHtcbiAgICAgICAgY29uc3QgdXJsID0gcmVzb2x2ZVlvdVR1YmVQb3N0ZXJVUkwodmlkZW9JZCwgc2l6ZSwgd2VicCksIHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgICAgbW9kZTogXCJuby1jb3JzXCIsXG4gICAgICAgICAgc2lnbmFsOiBhYm9ydC5zaWduYWxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPCA0MDApIHtcbiAgICAgICAgICBwb3N0ZXJDYWNoZS5zZXQodmlkZW9JZCwgdXJsKTtcbiAgICAgICAgICByZXNvbHZlKHVybCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KS5jYXRjaCgoKSA9PiBcIlwiKS5maW5hbGx5KCgpID0+IHBlbmRpbmdGZXRjaC5kZWxldGUodmlkZW9JZCkpO1xuICBwZW5kaW5nRmV0Y2guc2V0KHZpZGVvSWQsIHBlbmRpbmcpO1xuICByZXR1cm4gcGVuZGluZztcbn1cbmZ1bmN0aW9uIHJlc29sdmVZb3VUdWJlUG9zdGVyVVJMKHZpZGVvSWQsIHNpemUsIHdlYnApIHtcbiAgY29uc3QgdHlwZSA9IHdlYnAgPyBcIndlYnBcIiA6IFwianBnXCI7XG4gIHJldHVybiBgaHR0cHM6Ly9pLnl0aW1nLmNvbS8ke3dlYnAgPyBcInZpX3dlYnBcIiA6IFwidmlcIn0vJHt2aWRlb0lkfS8ke3NpemV9LiR7dHlwZX1gO1xufVxuXG5leHBvcnQgeyBmaW5kWW91VHViZVBvc3RlciwgcmVzb2x2ZVlvdVR1YmVWaWRlb0lkIH07XG4iXSwibmFtZXMiOlsidmlkZW9JZFJFIiwicG9zdGVyQ2FjaGUiLCJNYXAiLCJwZW5kaW5nRmV0Y2giLCJyZXNvbHZlWW91VHViZVZpZGVvSWQiLCJzcmMiLCJtYXRjaCIsImZpbmRZb3VUdWJlUG9zdGVyIiwidmlkZW9JZCIsImFib3J0IiwiaGFzIiwiZ2V0IiwicGVuZGluZyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2l6ZXMiLCJzaXplIiwid2VicCIsInVybCIsInJlc29sdmVZb3VUdWJlUG9zdGVyVVJMIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1vZGUiLCJzaWduYWwiLCJzdGF0dXMiLCJzZXQiLCJjYXRjaCIsImZpbmFsbHkiLCJkZWxldGUiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js\n"));

/***/ })

}]);