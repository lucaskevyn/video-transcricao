"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_vidstack_react_dev_chunks_vidstack-VGbd3Q_b_js"],{

/***/ "(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCastContext: function() { return /* binding */ getCastContext; },\n/* harmony export */   getCastErrorMessage: function() { return /* binding */ getCastErrorMessage; },\n/* harmony export */   getCastSession: function() { return /* binding */ getCastSession; },\n/* harmony export */   getCastSessionMedia: function() { return /* binding */ getCastSessionMedia; },\n/* harmony export */   hasActiveCastSession: function() { return /* binding */ hasActiveCastSession; },\n/* harmony export */   listenCastContextEvent: function() { return /* binding */ listenCastContextEvent; },\n/* harmony export */   loader: function() { return /* binding */ loader; }\n/* harmony export */ });\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* __next_internal_client_entry_do_not_use__ getCastContext,getCastErrorMessage,getCastSession,getCastSessionMedia,hasActiveCastSession,listenCastContextEvent,loader auto */ \n\nfunction getCastFrameworkURL() {\n    return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n    var _window_cast;\n    return !!((_window_cast = window.cast) === null || _window_cast === void 0 ? void 0 : _window_cast.framework);\n}\nfunction isCastAvailable() {\n    var _window_chrome_cast, _window_chrome;\n    return !!((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : (_window_chrome_cast = _window_chrome.cast) === null || _window_chrome_cast === void 0 ? void 0 : _window_chrome_cast.isAvailable);\n}\nfunction isCastConnected() {\n    return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n    return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n    return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n    var _getCastSession;\n    return (_getCastSession = getCastSession()) === null || _getCastSession === void 0 ? void 0 : _getCastSession.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n    var _getCastSessionMedia;\n    const contentId = (_getCastSessionMedia = getCastSessionMedia()) === null || _getCastSessionMedia === void 0 ? void 0 : _getCastSessionMedia.media.contentId;\n    return contentId === (src === null || src === void 0 ? void 0 : src.src);\n}\nfunction getDefaultCastOptions() {\n    return {\n        language: \"en-US\",\n        autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n        receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n        resumeSavedSession: true,\n        androidReceiverCompatible: true\n    };\n}\nfunction getCastErrorMessage(code) {\n    const defaultMessage = \"Google Cast Error Code: \".concat(code);\n    {\n        switch(code){\n            case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n                return \"The API is not initialized.\";\n            case chrome.cast.ErrorCode.CANCEL:\n                return \"The operation was canceled by the user\";\n            case chrome.cast.ErrorCode.CHANNEL_ERROR:\n                return \"A channel to the receiver is not available.\";\n            case chrome.cast.ErrorCode.EXTENSION_MISSING:\n                return \"The Cast extension is not available.\";\n            case chrome.cast.ErrorCode.INVALID_PARAMETER:\n                return \"The parameters to the operation were not valid.\";\n            case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n                return \"No receiver was compatible with the session request.\";\n            case chrome.cast.ErrorCode.SESSION_ERROR:\n                return \"A session could not be created, or a session was invalid.\";\n            case chrome.cast.ErrorCode.TIMEOUT:\n                return \"The operation timed out.\";\n            default:\n                return defaultMessage;\n        }\n    }\n}\nfunction listenCastContextEvent(type, handler) {\n    return (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.listen)(getCastContext(), type, handler);\n}\nclass GoogleCastLoader {\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */ get cast() {\n        return getCastContext();\n    }\n    mediaType() {\n        return \"video\";\n    }\n    canPlay(src) {\n        return _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.IS_CHROME && !_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.IS_IOS && (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canGoogleCastSrc)(src);\n    }\n    async prompt(ctx) {\n        let loadEvent, openEvent, errorEvent;\n        try {\n            var _getCastSession;\n            loadEvent = await this._loadCastFramework(ctx);\n            if (!this._player) {\n                this._player = new cast.framework.RemotePlayer();\n                new cast.framework.RemotePlayerController(this._player);\n            }\n            openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n                trigger: loadEvent\n            });\n            ctx.player.dispatchEvent(openEvent);\n            this._notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n            await this._showPrompt((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(ctx.$props.googleCast));\n            ctx.$state.remotePlaybackInfo.set({\n                deviceName: (_getCastSession = getCastSession()) === null || _getCastSession === void 0 ? void 0 : _getCastSession.getCastDevice().friendlyName\n            });\n            if (isCastConnected()) this._notifyRemoteStateChange(ctx, \"connected\", openEvent);\n        } catch (code) {\n            const error = code instanceof Error ? code : this._createError((code + \"\").toUpperCase(), \"Prompt failed.\");\n            errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n                detail: error,\n                trigger: openEvent !== null && openEvent !== void 0 ? openEvent : loadEvent,\n                cancelable: true\n            });\n            ctx.player.dispatch(errorEvent);\n            this._notifyRemoteStateChange(ctx, isCastConnected() ? \"connected\" : \"disconnected\", errorEvent);\n            throw error;\n        } finally{\n            var _ref;\n            ctx.player.dispatch(\"google-cast-prompt-close\", {\n                trigger: (_ref = errorEvent !== null && errorEvent !== void 0 ? errorEvent : openEvent) !== null && _ref !== void 0 ? _ref : loadEvent\n            });\n        }\n    }\n    async load(ctx) {\n        if (_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.IS_SERVER) {\n            throw Error(\"[vidstack] can not load google cast provider server-side\");\n        }\n        if (!this._player) {\n            throw Error(\"[vidstack] google cast player was not initialized\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_vidstack_react_dev_chunks_vidstack-OqUG8Vsn_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-OqUG8Vsn.js */ \"(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-OqUG8Vsn.js\"))).GoogleCastProvider(this._player, ctx);\n    }\n    async _loadCastFramework(ctx) {\n        if (hasLoadedCastFramework()) return;\n        const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n        ctx.player.dispatch(loadStartEvent);\n        await (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.loadScript)(getCastFrameworkURL());\n        await customElements.whenDefined(\"google-cast-launcher\");\n        const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", {\n            trigger: loadStartEvent\n        });\n        ctx.player.dispatch(loadedEvent);\n        if (!isCastAvailable()) {\n            throw this._createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n        }\n        return loadedEvent;\n    }\n    async _showPrompt(options) {\n        this._setOptions(options);\n        const errorCode = await this.cast.requestSession();\n        if (errorCode) {\n            throw this._createError(errorCode.toUpperCase(), getCastErrorMessage(errorCode));\n        }\n    }\n    _setOptions(options) {\n        var _this_cast;\n        (_this_cast = this.cast) === null || _this_cast === void 0 ? void 0 : _this_cast.setOptions({\n            ...getDefaultCastOptions(),\n            ...options\n        });\n    }\n    _notifyRemoteStateChange(ctx, state, trigger) {\n        const detail = {\n            type: \"google-cast\",\n            state\n        };\n        ctx.delegate._notify(\"remote-playback-change\", detail, trigger);\n    }\n    _createError(code, message) {\n        const error = Error(message);\n        error.code = code;\n        return error;\n    }\n    constructor(){\n        this.name = \"google-cast\";\n    }\n}\nvar loader = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    GoogleCastLoader: GoogleCastLoader\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js\n"));

/***/ })

}]);