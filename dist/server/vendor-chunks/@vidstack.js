"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vidstack";
exports.ids = ["vendor-chunks/@vidstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@vidstack/react/player/styles/default/layouts/video.css":
/*!******************************************************************************!*\
  !*** ./node_modules/@vidstack/react/player/styles/default/layouts/video.css ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"29eb89cab38e\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L3BsYXllci9zdHlsZXMvZGVmYXVsdC9sYXlvdXRzL3ZpZGVvLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Rqcm9wcm9qZXRvMS8uL25vZGVfbW9kdWxlcy9Admlkc3RhY2svcmVhY3QvcGxheWVyL3N0eWxlcy9kZWZhdWx0L2xheW91dHMvdmlkZW8uY3NzPzNlYTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyOWViODljYWIzOGVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/player/styles/default/layouts/video.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/player/styles/default/theme.css":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/player/styles/default/theme.css ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"a8e434c13ea6\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L3BsYXllci9zdHlsZXMvZGVmYXVsdC90aGVtZS5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90anJvcHJvamV0bzEvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L3BsYXllci9zdHlsZXMvZGVmYXVsdC90aGVtZS5jc3M/NWQ3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImE4ZTQzNGMxM2VhNlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/player/styles/default/theme.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Component: () => (/* binding */ Component),\n/* harmony export */   DOMEvent: () => (/* binding */ DOMEvent),\n/* harmony export */   EventsTarget: () => (/* binding */ EventsTarget),\n/* harmony export */   Icon$0: () => (/* binding */ Icon$0),\n/* harmony export */   Icon$104: () => (/* binding */ Icon$104),\n/* harmony export */   Icon$105: () => (/* binding */ Icon$105),\n/* harmony export */   Icon$11: () => (/* binding */ Icon$11),\n/* harmony export */   Icon$13: () => (/* binding */ Icon$13),\n/* harmony export */   Icon$16: () => (/* binding */ Icon$16),\n/* harmony export */   Icon$19: () => (/* binding */ Icon$19),\n/* harmony export */   Icon$22: () => (/* binding */ Icon$22),\n/* harmony export */   Icon$24: () => (/* binding */ Icon$24),\n/* harmony export */   Icon$26: () => (/* binding */ Icon$26),\n/* harmony export */   Icon$27: () => (/* binding */ Icon$27),\n/* harmony export */   Icon$31: () => (/* binding */ Icon$31),\n/* harmony export */   Icon$33: () => (/* binding */ Icon$33),\n/* harmony export */   Icon$34: () => (/* binding */ Icon$34),\n/* harmony export */   Icon$35: () => (/* binding */ Icon$35),\n/* harmony export */   Icon$39: () => (/* binding */ Icon$39),\n/* harmony export */   Icon$40: () => (/* binding */ Icon$40),\n/* harmony export */   Icon$5: () => (/* binding */ Icon$5),\n/* harmony export */   Icon$53: () => (/* binding */ Icon$53),\n/* harmony export */   Icon$54: () => (/* binding */ Icon$54),\n/* harmony export */   Icon$56: () => (/* binding */ Icon$56),\n/* harmony export */   Icon$59: () => (/* binding */ Icon$59),\n/* harmony export */   Icon$60: () => (/* binding */ Icon$60),\n/* harmony export */   Icon$61: () => (/* binding */ Icon$61),\n/* harmony export */   Icon$62: () => (/* binding */ Icon$62),\n/* harmony export */   Icon$63: () => (/* binding */ Icon$63),\n/* harmony export */   Icon$74: () => (/* binding */ Icon$74),\n/* harmony export */   Icon$77: () => (/* binding */ Icon$77),\n/* harmony export */   Icon$8: () => (/* binding */ Icon$8),\n/* harmony export */   Icon$81: () => (/* binding */ Icon$81),\n/* harmony export */   Icon$88: () => (/* binding */ Icon$88),\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   ViewController: () => (/* binding */ ViewController),\n/* harmony export */   animationFrameThrottle: () => (/* binding */ animationFrameThrottle),\n/* harmony export */   appendTriggerEvent: () => (/* binding */ appendTriggerEvent),\n/* harmony export */   ariaBool: () => (/* binding */ ariaBool),\n/* harmony export */   camelToKebabCase: () => (/* binding */ camelToKebabCase),\n/* harmony export */   chromecast: () => (/* binding */ chromecast),\n/* harmony export */   composeRefs: () => (/* binding */ composeRefs),\n/* harmony export */   computed: () => (/* binding */ computed),\n/* harmony export */   createContext: () => (/* binding */ createContext),\n/* harmony export */   createDisposalBin: () => (/* binding */ createDisposalBin),\n/* harmony export */   createReactComponent: () => (/* binding */ createReactComponent),\n/* harmony export */   createScope: () => (/* binding */ createScope),\n/* harmony export */   deferredPromise: () => (/* binding */ deferredPromise),\n/* harmony export */   effect: () => (/* binding */ effect),\n/* harmony export */   findTriggerEvent: () => (/* binding */ findTriggerEvent),\n/* harmony export */   fscreen: () => (/* binding */ fscreen),\n/* harmony export */   functionDebounce: () => (/* binding */ functionDebounce),\n/* harmony export */   functionThrottle: () => (/* binding */ functionThrottle),\n/* harmony export */   getScope: () => (/* binding */ getScope),\n/* harmony export */   hasProvidedContext: () => (/* binding */ hasProvidedContext),\n/* harmony export */   hasTriggerEvent: () => (/* binding */ hasTriggerEvent),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDOMNode: () => (/* binding */ isDOMNode),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isKeyboardClick: () => (/* binding */ isKeyboardClick),\n/* harmony export */   isKeyboardEvent: () => (/* binding */ isKeyboardEvent),\n/* harmony export */   isMouseEvent: () => (/* binding */ isMouseEvent),\n/* harmony export */   isNil: () => (/* binding */ isNil),\n/* harmony export */   isNull: () => (/* binding */ isNull),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isPointerEvent: () => (/* binding */ isPointerEvent),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTouchEvent: () => (/* binding */ isTouchEvent),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isWriteSignal: () => (/* binding */ isWriteSignal),\n/* harmony export */   kebabToCamelCase: () => (/* binding */ kebabToCamelCase),\n/* harmony export */   keysOf: () => (/* binding */ keysOf),\n/* harmony export */   listenEvent: () => (/* binding */ listenEvent),\n/* harmony export */   method: () => (/* binding */ method),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   onDispose: () => (/* binding */ onDispose),\n/* harmony export */   peek: () => (/* binding */ peek),\n/* harmony export */   prop: () => (/* binding */ prop),\n/* harmony export */   provideContext: () => (/* binding */ provideContext),\n/* harmony export */   r: () => (/* binding */ r),\n/* harmony export */   scoped: () => (/* binding */ scoped),\n/* harmony export */   setAttribute: () => (/* binding */ setAttribute),\n/* harmony export */   setStyle: () => (/* binding */ setStyle),\n/* harmony export */   signal: () => (/* binding */ signal),\n/* harmony export */   tick: () => (/* binding */ tick),\n/* harmony export */   toggleClass: () => (/* binding */ toggleClass),\n/* harmony export */   untrack: () => (/* binding */ untrack),\n/* harmony export */   uppercaseFirstChar: () => (/* binding */ uppercaseFirstChar),\n/* harmony export */   useContext: () => (/* binding */ useContext),\n/* harmony export */   useDisposalBin: () => (/* binding */ useDisposalBin),\n/* harmony export */   useReactContext: () => (/* binding */ useReactContext),\n/* harmony export */   useReactScope: () => (/* binding */ useReactScope),\n/* harmony export */   useSignal: () => (/* binding */ useSignal),\n/* harmony export */   useSignalRecord: () => (/* binding */ useSignalRecord),\n/* harmony export */   useState: () => (/* binding */ useState),\n/* harmony export */   useStateContext: () => (/* binding */ useStateContext),\n/* harmony export */   waitIdlePeriod: () => (/* binding */ waitIdlePeriod),\n/* harmony export */   waitTimeout: () => (/* binding */ waitTimeout),\n/* harmony export */   walkTriggerEventChain: () => (/* binding */ walkTriggerEventChain),\n/* harmony export */   wasEnterKeyPressed: () => (/* binding */ wasEnterKeyPressed)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Component,DOMEvent,EventsTarget,Icon$0,Icon$104,Icon$105,Icon$11,Icon$13,Icon$16,Icon$19,Icon$22,Icon$24,Icon$26,Icon$27,Icon$31,Icon$33,Icon$34,Icon$35,Icon$39,Icon$40,Icon$5,Icon$53,Icon$54,Icon$56,Icon$59,Icon$60,Icon$61,Icon$62,Icon$63,Icon$74,Icon$77,Icon$8,Icon$81,Icon$88,State,ViewController,animationFrameThrottle,appendTriggerEvent,ariaBool,camelToKebabCase,chromecast,composeRefs,computed,createContext,createDisposalBin,createReactComponent,createScope,deferredPromise,effect,findTriggerEvent,fscreen,functionDebounce,functionThrottle,getScope,hasProvidedContext,hasTriggerEvent,isArray,isBoolean,isDOMNode,isFunction,isKeyboardClick,isKeyboardEvent,isMouseEvent,isNil,isNull,isNumber,isObject,isPointerEvent,isString,isTouchEvent,isUndefined,isWriteSignal,kebabToCamelCase,keysOf,listenEvent,method,noop,onDispose,peek,prop,provideContext,r,scoped,setAttribute,setStyle,signal,tick,toggleClass,untrack,uppercaseFirstChar,useContext,useDisposalBin,useReactContext,useReactScope,useSignal,useSignalRecord,useState,useStateContext,waitIdlePeriod,waitTimeout,walkTriggerEventChain,wasEnterKeyPressed auto */ \nconst IS_SERVER = typeof document === \"undefined\";\nconst SCOPE = Symbol(\"SCOPE\");\nlet scheduledEffects = false, runningEffects = false, currentScope = null, currentObserver = null, currentObservers = null, currentObserversIndex = 0, effects = [], defaultContext = {};\nconst NOOP = ()=>{}, STATE_CLEAN = 0, STATE_CHECK = 1, STATE_DIRTY = 2, STATE_DISPOSED = 3;\nfunction flushEffects() {\n    scheduledEffects = true;\n    queueMicrotask(runEffects);\n}\nfunction runEffects() {\n    if (!effects.length) {\n        scheduledEffects = false;\n        return;\n    }\n    runningEffects = true;\n    for(let i = 0; i < effects.length; i++){\n        if (effects[i]._state !== STATE_CLEAN) runTop(effects[i]);\n    }\n    effects = [];\n    scheduledEffects = false;\n    runningEffects = false;\n}\nfunction runTop(node) {\n    let ancestors = [\n        node\n    ];\n    while(node = node[SCOPE]){\n        if (node._effect && node._state !== STATE_CLEAN) ancestors.push(node);\n    }\n    for(let i = ancestors.length - 1; i >= 0; i--){\n        updateCheck(ancestors[i]);\n    }\n}\nfunction root(init) {\n    const scope = createScope();\n    return compute(scope, !init.length ? init : init.bind(null, dispose.bind(scope)), null);\n}\nfunction peek(fn) {\n    return compute(currentScope, fn, null);\n}\nfunction untrack(fn) {\n    return compute(null, fn, null);\n}\nfunction tick() {\n    if (!runningEffects) runEffects();\n}\nfunction getScope() {\n    return currentScope;\n}\nfunction scoped(run2, scope) {\n    try {\n        return compute(scope, run2, null);\n    } catch (error) {\n        handleError(scope, error);\n        return;\n    }\n}\nfunction getContext(key, scope = currentScope) {\n    return scope?._context[key];\n}\nfunction setContext(key, value, scope = currentScope) {\n    if (scope) scope._context = {\n        ...scope._context,\n        [key]: value\n    };\n}\nfunction onDispose(disposable) {\n    if (!disposable || !currentScope) return disposable || NOOP;\n    const node = currentScope;\n    if (!node._disposal) {\n        node._disposal = disposable;\n    } else if (Array.isArray(node._disposal)) {\n        node._disposal.push(disposable);\n    } else {\n        node._disposal = [\n            node._disposal,\n            disposable\n        ];\n    }\n    return function removeDispose() {\n        if (node._state === STATE_DISPOSED) return;\n        disposable.call(null);\n        if (isFunction$1(node._disposal)) {\n            node._disposal = null;\n        } else if (Array.isArray(node._disposal)) {\n            node._disposal.splice(node._disposal.indexOf(disposable), 1);\n        }\n    };\n}\nfunction dispose(self = true) {\n    if (this._state === STATE_DISPOSED) return;\n    if (this._children) {\n        if (Array.isArray(this._children)) {\n            for(let i = this._children.length - 1; i >= 0; i--){\n                dispose.call(this._children[i]);\n            }\n        } else {\n            dispose.call(this._children);\n        }\n    }\n    if (self) {\n        const parent = this[SCOPE];\n        if (parent) {\n            if (Array.isArray(parent._children)) {\n                parent._children.splice(parent._children.indexOf(this), 1);\n            } else {\n                parent._children = null;\n            }\n        }\n        disposeNode(this);\n    }\n}\nfunction disposeNode(node) {\n    node._state = STATE_DISPOSED;\n    if (node._disposal) emptyDisposal(node);\n    if (node._sources) removeSourceObservers(node, 0);\n    node[SCOPE] = null;\n    node._sources = null;\n    node._observers = null;\n    node._children = null;\n    node._context = defaultContext;\n    node._handlers = null;\n}\nfunction emptyDisposal(scope) {\n    try {\n        if (Array.isArray(scope._disposal)) {\n            for(let i = scope._disposal.length - 1; i >= 0; i--){\n                const callable = scope._disposal[i];\n                callable.call(callable);\n            }\n        } else {\n            scope._disposal.call(scope._disposal);\n        }\n        scope._disposal = null;\n    } catch (error) {\n        handleError(scope, error);\n    }\n}\nfunction compute(scope, compute2, observer) {\n    const prevScope = currentScope, prevObserver = currentObserver;\n    currentScope = scope;\n    currentObserver = observer;\n    try {\n        return compute2.call(scope);\n    } finally{\n        currentScope = prevScope;\n        currentObserver = prevObserver;\n    }\n}\nfunction handleError(scope, error) {\n    if (!scope || !scope._handlers) throw error;\n    let i = 0, len = scope._handlers.length, currentError = error;\n    for(i = 0; i < len; i++){\n        try {\n            scope._handlers[i](currentError);\n            break;\n        } catch (error2) {\n            currentError = error2;\n        }\n    }\n    if (i === len) throw currentError;\n}\nfunction read() {\n    if (this._state === STATE_DISPOSED) return this._value;\n    if (currentObserver && !this._effect) {\n        if (!currentObservers && currentObserver._sources && currentObserver._sources[currentObserversIndex] == this) {\n            currentObserversIndex++;\n        } else if (!currentObservers) currentObservers = [\n            this\n        ];\n        else currentObservers.push(this);\n    }\n    if (this._compute) updateCheck(this);\n    return this._value;\n}\nfunction write(newValue) {\n    const value = isFunction$1(newValue) ? newValue(this._value) : newValue;\n    if (this._changed(this._value, value)) {\n        this._value = value;\n        if (this._observers) {\n            for(let i = 0; i < this._observers.length; i++){\n                notify(this._observers[i], STATE_DIRTY);\n            }\n        }\n    }\n    return this._value;\n}\nconst ScopeNode = function Scope() {\n    this[SCOPE] = null;\n    this._children = null;\n    if (currentScope) currentScope.append(this);\n};\nconst ScopeProto = ScopeNode.prototype;\nScopeProto._context = defaultContext;\nScopeProto._handlers = null;\nScopeProto._compute = null;\nScopeProto._disposal = null;\nScopeProto.append = function(child) {\n    child[SCOPE] = this;\n    if (!this._children) {\n        this._children = child;\n    } else if (Array.isArray(this._children)) {\n        this._children.push(child);\n    } else {\n        this._children = [\n            this._children,\n            child\n        ];\n    }\n    child._context = child._context === defaultContext ? this._context : {\n        ...this._context,\n        ...child._context\n    };\n    if (this._handlers) {\n        child._handlers = !child._handlers ? this._handlers : [\n            ...child._handlers,\n            ...this._handlers\n        ];\n    }\n};\nScopeProto.dispose = function() {\n    dispose.call(this);\n};\nfunction createScope() {\n    return new ScopeNode();\n}\nconst ComputeNode = function Computation(initialValue, compute2, options) {\n    ScopeNode.call(this);\n    this._state = compute2 ? STATE_DIRTY : STATE_CLEAN;\n    this._init = false;\n    this._effect = false;\n    this._sources = null;\n    this._observers = null;\n    this._value = initialValue;\n    this.id = options?.id ?? (this._compute ? \"computed\" : \"signal\");\n    if (compute2) this._compute = compute2;\n    if (options && options.dirty) this._changed = options.dirty;\n};\nconst ComputeProto = ComputeNode.prototype;\nObject.setPrototypeOf(ComputeProto, ScopeProto);\nComputeProto._changed = isNotEqual;\nComputeProto.call = read;\nfunction createComputation(initialValue, compute2, options) {\n    return new ComputeNode(initialValue, compute2, options);\n}\nfunction isNotEqual(a, b) {\n    return a !== b;\n}\nfunction isFunction$1(value) {\n    return typeof value === \"function\";\n}\nfunction updateCheck(node) {\n    if (node._state === STATE_CHECK) {\n        for(let i = 0; i < node._sources.length; i++){\n            updateCheck(node._sources[i]);\n            if (node._state === STATE_DIRTY) {\n                break;\n            }\n        }\n    }\n    if (node._state === STATE_DIRTY) update(node);\n    else node._state = STATE_CLEAN;\n}\nfunction cleanup(node) {\n    if (node._children) dispose.call(node, false);\n    if (node._disposal) emptyDisposal(node);\n    node._handlers = node[SCOPE] ? node[SCOPE]._handlers : null;\n}\nfunction update(node) {\n    let prevObservers = currentObservers, prevObserversIndex = currentObserversIndex;\n    currentObservers = null;\n    currentObserversIndex = 0;\n    try {\n        cleanup(node);\n        const result = compute(node, node._compute, node);\n        updateObservers(node);\n        if (!node._effect && node._init) {\n            write.call(node, result);\n        } else {\n            node._value = result;\n            node._init = true;\n        }\n    } catch (error) {\n        if (!node._init && typeof node._value === \"undefined\") {\n            console.error(`computed \\`${node.id}\\` threw error during first run, this can be fatal.\n\nSolutions:\n\n1. Set the \\`initial\\` option to silence this error`, \"\\n2. Or, use an `effect` if the return value is not being used\", \"\\n\\n\", error);\n        }\n        updateObservers(node);\n        handleError(node, error);\n    } finally{\n        currentObservers = prevObservers;\n        currentObserversIndex = prevObserversIndex;\n        node._state = STATE_CLEAN;\n    }\n}\nfunction updateObservers(node) {\n    if (currentObservers) {\n        if (node._sources) removeSourceObservers(node, currentObserversIndex);\n        if (node._sources && currentObserversIndex > 0) {\n            node._sources.length = currentObserversIndex + currentObservers.length;\n            for(let i = 0; i < currentObservers.length; i++){\n                node._sources[currentObserversIndex + i] = currentObservers[i];\n            }\n        } else {\n            node._sources = currentObservers;\n        }\n        let source;\n        for(let i = currentObserversIndex; i < node._sources.length; i++){\n            source = node._sources[i];\n            if (!source._observers) source._observers = [\n                node\n            ];\n            else source._observers.push(node);\n        }\n    } else if (node._sources && currentObserversIndex < node._sources.length) {\n        removeSourceObservers(node, currentObserversIndex);\n        node._sources.length = currentObserversIndex;\n    }\n}\nfunction notify(node, state) {\n    if (node._state >= state) return;\n    if (node._effect && node._state === STATE_CLEAN) {\n        effects.push(node);\n        if (!scheduledEffects) flushEffects();\n    }\n    node._state = state;\n    if (node._observers) {\n        for(let i = 0; i < node._observers.length; i++){\n            notify(node._observers[i], STATE_CHECK);\n        }\n    }\n}\nfunction removeSourceObservers(node, index) {\n    let source, swap;\n    for(let i = index; i < node._sources.length; i++){\n        source = node._sources[i];\n        if (source._observers) {\n            swap = source._observers.indexOf(node);\n            source._observers[swap] = source._observers[source._observers.length - 1];\n            source._observers.pop();\n        }\n    }\n}\nfunction signal(initialValue, options) {\n    const node = createComputation(initialValue, null, options), signal2 = read.bind(node);\n    signal2.node = node;\n    signal2[SCOPE] = true;\n    signal2.set = write.bind(node);\n    return signal2;\n}\nfunction isReadSignal(fn) {\n    return isFunction$1(fn) && SCOPE in fn;\n}\nfunction computed(compute2, options) {\n    const node = createComputation(options?.initial, compute2, options), signal2 = read.bind(node);\n    signal2[SCOPE] = true;\n    signal2.node = node;\n    return signal2;\n}\nfunction effect$1(effect2, options) {\n    const signal2 = createComputation(null, function runEffect() {\n        let effectResult = effect2();\n        isFunction$1(effectResult) && onDispose(effectResult);\n        return null;\n    }, {\n        id: options?.id ?? \"effect\"\n    });\n    signal2._effect = true;\n    update(signal2);\n    {\n        return function stopEffect() {\n            dispose.call(signal2, true);\n        };\n    }\n}\nfunction isWriteSignal(fn) {\n    return isReadSignal(fn) && \"set\" in fn;\n}\nfunction noop(...args) {}\nfunction isNull(value) {\n    return value === null;\n}\nfunction isUndefined(value) {\n    return typeof value === \"undefined\";\n}\nfunction isNil(value) {\n    return isNull(value) || isUndefined(value);\n}\nfunction isObject(value) {\n    return value?.constructor === Object;\n}\nfunction isNumber(value) {\n    return typeof value === \"number\" && !Number.isNaN(value);\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\nfunction isBoolean(value) {\n    return typeof value === \"boolean\";\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nconst effect = IS_SERVER ? serverEffect : effect$1;\nfunction serverEffect(effect2, options) {\n    if (typeof process !== \"undefined\" && \"development\" === \"test\") {}\n    return noop;\n}\nvar _a$1;\nconst EVENT = IS_SERVER ? class Event2 {\n} : Event, DOM_EVENT = Symbol(\"DOM_EVENT\");\nclass DOMEvent extends EVENT {\n    constructor(type, ...init){\n        super(type, init[0]);\n        this[_a$1] = true;\n        this.triggers = new EventTriggers();\n        this.detail = init[0]?.detail;\n        const trigger = init[0]?.trigger;\n        if (trigger) this.triggers.add(trigger);\n    }\n    /**\n   * The preceding event that was responsible for this event being fired.\n   */ get trigger() {\n        return this.triggers.source;\n    }\n    /**\n   * The origin event that lead to this event being fired.\n   */ get originEvent() {\n        return this.triggers.origin;\n    }\n    /**\n   * Whether the origin event was triggered by the user.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted}\n   */ get isOriginTrusted() {\n        return this.triggers.origin?.isTrusted ?? false;\n    }\n}\n_a$1 = DOM_EVENT;\nclass EventTriggers {\n    constructor(){\n        this.chain = [];\n    }\n    get source() {\n        return this.chain[0];\n    }\n    get origin() {\n        return this.chain[this.chain.length - 1];\n    }\n    /**\n   * Appends the event to the end of the chain.\n   */ add(event) {\n        this.chain.push(event);\n        if (isDOMEvent(event)) {\n            this.chain.push(...event.triggers);\n        }\n    }\n    /**\n   * Removes the event from the chain and returns it (if found).\n   */ remove(event) {\n        return this.chain.splice(this.chain.indexOf(event), 1)[0];\n    }\n    /**\n   * Returns whether the chain contains the given `event`.\n   */ has(event) {\n        return this.chain.some((e)=>e === event);\n    }\n    /**\n   * Returns whether the chain contains the given event type.\n   */ hasType(type) {\n        return !!this.findType(type);\n    }\n    /**\n   * Returns the first event with the given `type` found in the chain.\n   */ findType(type) {\n        return this.chain.find((e)=>e.type === type);\n    }\n    /**\n   * Walks an event chain on a given `event`, and invokes the given `callback` for each trigger event.\n   */ walk(callback) {\n        for (const event of this.chain){\n            const returnValue = callback(event);\n            if (returnValue) return [\n                event,\n                returnValue\n            ];\n        }\n    }\n    [Symbol.iterator]() {\n        return this.chain.values();\n    }\n}\nfunction isDOMEvent(event) {\n    return !!event?.[DOM_EVENT];\n}\nfunction walkTriggerEventChain(event, callback) {\n    if (!isDOMEvent(event)) return;\n    return event.triggers.walk(callback);\n}\nfunction findTriggerEvent(event, type) {\n    return isDOMEvent(event) ? event.triggers.findType(type) : void 0;\n}\nfunction hasTriggerEvent(event, type) {\n    return !!findTriggerEvent(event, type);\n}\nfunction appendTriggerEvent(event, trigger) {\n    if (trigger) event.triggers.add(trigger);\n}\nclass EventsTarget extends EventTarget {\n    addEventListener(type, callback, options) {\n        return super.addEventListener(type, callback, options);\n    }\n    removeEventListener(type, callback, options) {\n        return super.removeEventListener(type, callback, options);\n    }\n}\nfunction listenEvent(target, type, handler1, options) {\n    if (IS_SERVER) return noop;\n    target.addEventListener(type, handler1, options);\n    return onDispose(()=>target.removeEventListener(type, handler1, options));\n}\nfunction isPointerEvent(event) {\n    return !!event?.type.startsWith(\"pointer\");\n}\nfunction isTouchEvent(event) {\n    return !!event?.type.startsWith(\"touch\");\n}\nfunction isMouseEvent(event) {\n    return /^(click|mouse)/.test(event?.type ?? \"\");\n}\nfunction isKeyboardEvent(event) {\n    return !!event?.type.startsWith(\"key\");\n}\nfunction wasEnterKeyPressed(event) {\n    return isKeyboardEvent(event) && event.key === \"Enter\";\n}\nfunction isKeyboardClick(event) {\n    return isKeyboardEvent(event) && (event.key === \"Enter\" || event.key === \" \");\n}\nfunction isDOMNode(node) {\n    return node instanceof Node;\n}\nfunction setAttribute(host, name, value) {\n    if (!host) return;\n    else if (!value && value !== \"\" && value !== 0) {\n        host.removeAttribute(name);\n    } else {\n        const attrValue = value === true ? \"\" : value + \"\";\n        if (host.getAttribute(name) !== attrValue) {\n            host.setAttribute(name, attrValue);\n        }\n    }\n}\nfunction setStyle(host, property, value) {\n    if (!host) return;\n    else if (!value && value !== 0) {\n        host.style.removeProperty(property);\n    } else {\n        host.style.setProperty(property, value + \"\");\n    }\n}\nfunction toggleClass(host, name, value) {\n    host.classList[value ? \"add\" : \"remove\"](name);\n}\nfunction unwrapDeep(fn) {\n    let value = fn;\n    while(typeof value === \"function\")value = value.call(this);\n    return value;\n}\nfunction createContext(provide) {\n    return {\n        id: Symbol(),\n        provide\n    };\n}\nfunction provideContext(context, value, scope = getScope()) {\n    if (!scope) {\n        throw Error(\"[maverick] attempting to provide context outside root\");\n    }\n    const hasProvidedValue = !isUndefined(value);\n    if (!hasProvidedValue && !context.provide) {\n        throw Error(\"[maverick] context can not be provided without a value or `provide` function\");\n    }\n    setContext(context.id, hasProvidedValue ? value : context.provide?.(), scope);\n}\nfunction useContext(context) {\n    const value = getContext(context.id);\n    if (isUndefined(value)) {\n        throw Error(\"[maverick] attempting to use context without providing first\");\n    }\n    return value;\n}\nfunction hasProvidedContext(context) {\n    return !isUndefined(getContext(context.id));\n}\nconst PROPS = /* @__PURE__ */ Symbol(\"PROPS\");\nconst METHODS = /* @__PURE__ */ Symbol(\"METHODS\");\nconst ON_DISPATCH = /* @__PURE__ */ Symbol(\"ON_DISPATCH\");\nvar _a;\nconst EMPTY_PROPS = {};\nclass Instance {\n    constructor(Component2, scope, init){\n        this[_a] = null;\n        this.$el = signal(null);\n        this._el = null;\n        this._scope = null;\n        this._attachScope = null;\n        this._connectScope = null;\n        this._component = null;\n        this._destroyed = false;\n        this._props = EMPTY_PROPS;\n        this._attrs = null;\n        this._styles = null;\n        this._setupCallbacks = [];\n        this._attachCallbacks = [];\n        this._connectCallbacks = [];\n        this._destroyCallbacks = [];\n        this._scope = scope;\n        if (init?.scope) init.scope.append(scope);\n        let stateFactory = Component2.state, props = Component2.props;\n        if (stateFactory) {\n            this._$state = stateFactory.create();\n            this._state = new Proxy(this._$state, {\n                get: (_, prop2)=>this._$state[prop2]()\n            });\n            provideContext(stateFactory, this._$state);\n        }\n        if (props) {\n            this._props = createInstanceProps(props);\n            if (init?.props) {\n                for (const prop2 of Object.keys(init.props)){\n                    this._props[prop2]?.set(init.props[prop2]);\n                }\n            }\n        }\n        onDispose(this._destroy.bind(this));\n    }\n    _setup() {\n        scoped(()=>{\n            for (const callback of this._setupCallbacks)callback();\n        }, this._scope);\n    }\n    _attach(el) {\n        if (this._el) return;\n        this._el = el;\n        this.$el.set(el);\n        {\n            el.$$COMPONENT_NAME = this._component?.constructor.name;\n        }\n        scoped(()=>{\n            this._attachScope = createScope();\n            scoped(()=>{\n                for (const callback of this._attachCallbacks)callback(this._el);\n                this._attachAttrs();\n                this._attachStyles();\n            }, this._attachScope);\n        }, this._scope);\n        el.dispatchEvent(new Event(\"attached\"));\n    }\n    _detach() {\n        this._attachScope?.dispose();\n        this._attachScope = null;\n        this._connectScope = null;\n        if (this._el) {\n            this._el.$$COMPONENT_NAME = null;\n        }\n        this._el = null;\n        this.$el.set(null);\n    }\n    _connect() {\n        if (!this._el || !this._attachScope || !this._connectCallbacks.length) return;\n        scoped(()=>{\n            this._connectScope = createScope();\n            scoped(()=>{\n                for (const callback of this._connectCallbacks)callback(this._el);\n            }, this._connectScope);\n        }, this._attachScope);\n    }\n    _disconnect() {\n        this._connectScope?.dispose();\n        this._connectScope = null;\n    }\n    _destroy() {\n        if (this._destroyed) return;\n        this._destroyed = true;\n        scoped(()=>{\n            for (const callback of this._destroyCallbacks)callback(this._el);\n        }, this._scope);\n        const el = this._el;\n        this._detach();\n        this._scope.dispose();\n        this._setupCallbacks.length = 0;\n        this._attachCallbacks.length = 0;\n        this._connectCallbacks.length = 0;\n        this._destroyCallbacks.length = 0;\n        this._component = null;\n        this._attrs = null;\n        this._styles = null;\n        this._props = EMPTY_PROPS;\n        this._scope = null;\n        this._state = EMPTY_PROPS;\n        this._$state = null;\n        if (el) delete el.$;\n    }\n    _addHooks(target) {\n        if (target.onSetup) this._setupCallbacks.push(target.onSetup.bind(target));\n        if (target.onAttach) this._attachCallbacks.push(target.onAttach.bind(target));\n        if (target.onConnect) this._connectCallbacks.push(target.onConnect.bind(target));\n        if (target.onDestroy) this._destroyCallbacks.push(target.onDestroy.bind(target));\n    }\n    _attachAttrs() {\n        if (!this._attrs) return;\n        for (const name of Object.keys(this._attrs)){\n            if (IS_SERVER) {\n                setAttribute(this._el, name, unwrapDeep.call(this._component, this._attrs[name]));\n            } else if (isFunction(this._attrs[name])) {\n                effect(this._setAttr.bind(this, name));\n            } else {\n                setAttribute(this._el, name, this._attrs[name]);\n            }\n        }\n    }\n    _attachStyles() {\n        if (!this._styles) return;\n        for (const name of Object.keys(this._styles)){\n            if (IS_SERVER) {\n                setStyle(this._el, name, unwrapDeep.call(this._component, this._styles[name]));\n            } else if (isFunction(this._styles[name])) {\n                effect(this._setStyle.bind(this, name));\n            } else {\n                setStyle(this._el, name, this._styles[name]);\n            }\n        }\n    }\n    _setAttr(name) {\n        setAttribute(this._el, name, this._attrs[name].call(this._component));\n    }\n    _setStyle(name) {\n        setStyle(this._el, name, this._styles[name].call(this._component));\n    }\n}\n_a = ON_DISPATCH;\nfunction createInstanceProps(props) {\n    const $props = {};\n    for (const name of Object.keys(props)){\n        const def = props[name];\n        $props[name] = signal(def, def);\n    }\n    return $props;\n}\nlet currentInstance = {\n    $$: null\n};\nfunction createComponent(Component2, init) {\n    return root(()=>{\n        currentInstance.$$ = new Instance(Component2, getScope(), init);\n        const component = new Component2();\n        currentInstance.$$._component = component;\n        currentInstance.$$ = null;\n        return component;\n    });\n}\nclass ViewController extends EventTarget {\n    constructor(){\n        super();\n        if (currentInstance.$$) this.attach(currentInstance);\n    }\n    get el() {\n        return this.$$._el;\n    }\n    get $el() {\n        return this.$$.$el();\n    }\n    get scope() {\n        return this.$$._scope;\n    }\n    get attachScope() {\n        return this.$$._attachScope;\n    }\n    get connectScope() {\n        return this.$$._connectScope;\n    }\n    /** @internal */ get $props() {\n        return this.$$._props;\n    }\n    /** @internal */ get $state() {\n        return this.$$._$state;\n    }\n    get state() {\n        return this.$$._state;\n    }\n    attach({ $$ }) {\n        this.$$ = $$;\n        $$._addHooks(this);\n        return this;\n    }\n    addEventListener(type, callback, options) {\n        if (!this.el) {\n            const name = this.constructor.name;\n            console.warn(`[maverick] adding event listener to \\`${name}\\` before element is attached`);\n        }\n        this.listen(type, callback, options);\n    }\n    removeEventListener(type, callback, options) {\n        this.el?.removeEventListener(type, callback, options);\n    }\n    /**\n   * This method can be used to specify attributes that should be set on the host element. Any\n   * attributes that are assigned to a function will be considered a signal and updated accordingly.\n   */ setAttributes(attributes) {\n        if (!this.$$._attrs) this.$$._attrs = {};\n        Object.assign(this.$$._attrs, attributes);\n    }\n    /**\n   * This method can be used to specify styles that should set be set on the host element. Any\n   * styles that are assigned to a function will be considered a signal and updated accordingly.\n   */ setStyles(styles) {\n        if (!this.$$._styles) this.$$._styles = {};\n        Object.assign(this.$$._styles, styles);\n    }\n    /**\n   * This method is used to satisfy the CSS variables contract specified on the current\n   * component. Other CSS variables can be set via the `setStyles` method.\n   */ setCSSVars(vars) {\n        this.setStyles(vars);\n    }\n    /**\n   * Type-safe utility for creating component DOM events.\n   */ createEvent(type, ...init) {\n        return new DOMEvent(type, init[0]);\n    }\n    /**\n   * Creates a `DOMEvent` and dispatches it from the host element. This method is typed to\n   * match all component events.\n   */ dispatch(type, ...init) {\n        if (IS_SERVER || !this.el) return false;\n        const event = type instanceof Event ? type : new DOMEvent(type, init[0]);\n        Object.defineProperty(event, \"target\", {\n            get: ()=>this.$$._component\n        });\n        return untrack(()=>{\n            this.$$[ON_DISPATCH]?.(event);\n            return this.el.dispatchEvent(event);\n        });\n    }\n    dispatchEvent(event) {\n        return this.dispatch(event);\n    }\n    /**\n   * Adds an event listener for the given `type` and returns a function which can be invoked to\n   * remove the event listener.\n   *\n   * - The listener is removed if the current scope is disposed.\n   * - This method is safe to use on the server (noop).\n   */ listen(type, handler1, options) {\n        if (IS_SERVER || !this.el) return noop;\n        return listenEvent(this.el, type, handler1, options);\n    }\n}\nclass Component extends ViewController {\n    subscribe(callback) {\n        if (!this.state) {\n            const name = this.constructor.name;\n            throw Error(`[maverick] component \\`${name}\\` can not be subscribed to because it has no internal state`);\n        }\n        return scoped(()=>effect(()=>callback(this.state)), this.$$._scope);\n    }\n    destroy() {\n        this.$$._destroy();\n    }\n}\nfunction prop(target, propertyKey, descriptor) {\n    if (!target[PROPS]) target[PROPS] = /* @__PURE__ */ new Set();\n    target[PROPS].add(propertyKey);\n}\nfunction method(target, propertyKey, descriptor) {\n    if (!target[METHODS]) target[METHODS] = /* @__PURE__ */ new Set();\n    target[METHODS].add(propertyKey);\n}\nclass State {\n    constructor(record){\n        this.id = Symbol(\"STATE\");\n        this.record = record;\n        this._descriptors = Object.getOwnPropertyDescriptors(record);\n    }\n    create() {\n        const store = {}, state = new Proxy(store, {\n            get: (_, prop2)=>store[prop2]()\n        });\n        for (const name of Object.keys(this.record)){\n            const getter = this._descriptors[name].get;\n            store[name] = getter ? computed(getter.bind(state)) : signal(this.record[name]);\n        }\n        return store;\n    }\n    reset(record, filter) {\n        for (const name of Object.keys(record)){\n            if (!this._descriptors[name].get && (!filter || filter(name))) {\n                record[name].set(this.record[name]);\n            }\n        }\n    }\n}\nfunction useState(state) {\n    return useContext(state);\n}\nfunction camelToKebabCase(str) {\n    return str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction kebabToCamelCase(str) {\n    return str.replace(/-./g, (x)=>x[1].toUpperCase());\n}\nfunction kebabToPascalCase(str) {\n    return kebabToTitleCase(str).replace(/\\s/g, \"\");\n}\nfunction kebabToTitleCase(str) {\n    return uppercaseFirstChar(str.replace(/-./g, (x)=>\" \" + x[1].toUpperCase()));\n}\nfunction uppercaseFirstChar(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst ReactScopeContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    current: null\n});\nReactScopeContext.displayName = \"Scope\";\nfunction WithScope(scope, ...children) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReactScopeContext.Provider, {\n        value: scope\n    }, ...children);\n}\nfunction useReactScope() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ReactScopeContext).current;\n}\nfunction useReactContext(context) {\n    const scope = useReactScope();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>getContext(context.id, scope), [\n        scope\n    ]);\n}\nconst _ScopeProvider = class _ScopeProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(props, context){\n        super(props);\n        this._scope = {\n            current: createScope()\n        };\n        if (context) context.append(this._scope.current);\n        const Ctor = this.constructor;\n        if (Ctor._context) provideContext(Ctor._context, Ctor._provide?.(), this._scope.current);\n    }\n    render() {\n        return WithScope(this._scope, this.props?.children);\n    }\n};\n_ScopeProvider.contextType = ReactScopeContext;\nfunction setRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction composeRefs(...refs) {\n    return (node)=>refs.forEach((ref)=>setRef(ref, node));\n}\nfunction createClientComponent(Component2, options) {\n    const forwardComponent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>{\n        let parentScopeRef = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ReactScopeContext), scopeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), stateRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n        if (!stateRef.current) {\n            const state2 = createInternalState(), component = initComponent(Component2, state2, props, parentScopeRef.current);\n            state2._component = component;\n            stateRef.current = state2;\n            scopeRef.current = component.scope;\n        }\n        function onAttach() {\n            let state2 = stateRef.current, scope = parentScopeRef.current;\n            window.cancelAnimationFrame(state2._destroyId);\n            state2._destroyId = -1;\n            if (state2._component.$$._destroyed) {\n                const component = initComponent(Component2, state2, props, scope);\n                state2._component = component;\n                state2._attached = false;\n                state2._forwardedRef = false;\n                scopeRef.current = component.scope;\n            }\n            if (state2._el) {\n                attachToHost(state2, state2._el);\n            }\n            if (!state2._forwardedRef) {\n                setRef(forwardRef, state2._component);\n                state2._forwardedRef = true;\n            }\n            return ()=>detachFromHost(state2);\n        }\n        function onRefChange(el) {\n            const state2 = stateRef.current;\n            if (!state2._forwardedRef) {\n                state2._el = el;\n                return;\n            }\n            window.cancelAnimationFrame(state2._refChangeId);\n            state2._refChangeId = window.requestAnimationFrame(()=>{\n                const state3 = stateRef.current;\n                state3._refChangeId = -1;\n                if (state3._el === el) return;\n                detachFromHost(state3);\n                if (el) attachToHost(state3, el);\n                state3._el = el;\n            });\n        }\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            const state2 = stateRef.current;\n            window.cancelAnimationFrame(state2._destroyId);\n            state2._destroyId = -1;\n            return function onDestroy() {\n                if (!isFunction(props.children)) return;\n                window.cancelAnimationFrame(state2._refChangeId);\n                state2._refChangeId = -1;\n                window.cancelAnimationFrame(state2._connectId);\n                state2._connectId = -1;\n                window.cancelAnimationFrame(state2._destroyId);\n                state2._destroyId = window.requestAnimationFrame(()=>{\n                    state2._destroyId = -1;\n                    detachFromHost(state2);\n                    state2._component.$$._destroy();\n                    state2._component.$$[ON_DISPATCH] = null;\n                    state2._callbacks = {};\n                    state2._domCallbacks = {};\n                    scopeRef.current = null;\n                });\n            };\n        }, []);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(tick);\n        let state = stateRef.current, { children, ...__props } = props, attrs = {}, prevPropNames = state._prevProps, newPropNames = Object.keys(__props);\n        state._callbacks = {};\n        for (const name of [\n            ...prevPropNames,\n            ...newPropNames\n        ]){\n            if (options.props.has(name)) {\n                state._component.$props[name].set(// If the prop was removed we'll use the default value provided on Component creation.\n                isUndefined(__props[name]) ? Component2.props?.[name] : __props[name]);\n            } else if (options.events?.has(name) || options.eventsRE?.test(name)) {\n                state._callbacks[name] = __props[name];\n            } else if (options.domEvents?.has(name) || options.domEventsRE?.test(name)) {\n                let type = camelToKebabCase(name.slice(2));\n                state._domCallbacks[type] = __props[name];\n                if (!newPropNames.includes(name)) {\n                    state._el?.removeEventListener(type, state._onDOMEvent);\n                    state._listening?.delete(type);\n                } else if (state._el && !state._listening?.has(type)) {\n                    if (!state._listening) state._listening = /* @__PURE__ */ new Set();\n                    state._listening.add(type);\n                    state._el.addEventListener(type, state._onDOMEvent);\n                }\n            } else {\n                attrs[name] = __props[name];\n            }\n        }\n        state._prevProps = newPropNames;\n        return WithScope(scopeRef, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AttachEffect, {\n            effect: onAttach\n        }), isFunction(children) ? children?.({\n            ...attrs,\n            suppressHydrationWarning: true,\n            ref: onRefChange\n        }, state._component) : children);\n    });\n    forwardComponent.displayName = Component2.name + \"Bridge\";\n    return forwardComponent;\n}\nfunction AttachEffect({ effect: effect2 }) {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(effect2, []);\n    return null;\n}\nconst eventTypeToCallbackName = /* @__PURE__ */ new Map();\nfunction createInternalState() {\n    const state = {\n        _el: null,\n        _prevProps: [],\n        _callbacks: {},\n        _domCallbacks: {},\n        _refChangeId: -1,\n        _connectId: -1,\n        _destroyId: -1,\n        _attached: false,\n        _forwardedRef: false,\n        _listening: null,\n        _onDOMEvent (event) {\n            const args = !isUndefined(event.detail) ? [\n                event.detail,\n                event\n            ] : [\n                event\n            ];\n            state._domCallbacks[event.type]?.(...args);\n        }\n    };\n    return state;\n}\nfunction attachToHost(state, el) {\n    if (state._el === el && state._attached) return;\n    else if (state._attached) detachFromHost(state);\n    if (state._domCallbacks) {\n        if (!state._listening) state._listening = /* @__PURE__ */ new Set();\n        for (const type of Object.keys(state._domCallbacks)){\n            if (state._listening.has(type)) continue;\n            el.addEventListener(type, state._onDOMEvent);\n            state._listening.add(type);\n        }\n    }\n    state._component.$$._attach(el);\n    state._connectId = window.requestAnimationFrame(()=>{\n        state._component.$$._connect();\n        state._connectId = -1;\n    });\n    state._attached = true;\n}\nfunction detachFromHost(state) {\n    if (!state._attached) return;\n    window.cancelAnimationFrame(state._connectId);\n    state._connectId = -1;\n    state._component.$$._detach();\n    state._attached = false;\n    if (state._el && state._listening) {\n        for (const type of state._listening){\n            state._el.removeEventListener(type, state._onDOMEvent);\n        }\n        state._listening.clear();\n    }\n}\nfunction onDispatch(event) {\n    let callbackProp = eventTypeToCallbackName.get(event.type), args = !isUndefined(event.detail) ? [\n        event.detail,\n        event\n    ] : [\n        event\n    ];\n    if (!callbackProp) {\n        eventTypeToCallbackName.set(event.type, callbackProp = `on${kebabToPascalCase(event.type)}`);\n    }\n    this._callbacks[callbackProp]?.(...args);\n}\nfunction initComponent(Component2, state, props, scope) {\n    const component = createComponent(Component2, {\n        props,\n        scope\n    });\n    component.$$[ON_DISPATCH] = onDispatch.bind(state);\n    component.$$._setup();\n    return component;\n}\nfunction escape(value, isAttr = false) {\n    const type = typeof value;\n    if (type !== \"string\") {\n        if (!isAttr && type === \"function\") return escape(value());\n        if (isAttr && type === \"boolean\") return value + \"\";\n        return value;\n    }\n    const delimeter = isAttr ? '\"' : \"<\", escapeDelimeter = isAttr ? \"&quot;\" : \"&lt;\";\n    let iDelimeter = value.indexOf(delimeter), isAmpersand = value.indexOf(\"&\");\n    if (iDelimeter < 0 && isAmpersand < 0) return value;\n    let left = 0, out = \"\";\n    while(iDelimeter >= 0 && isAmpersand >= 0){\n        if (iDelimeter < isAmpersand) {\n            if (left < iDelimeter) out += value.substring(left, iDelimeter);\n            out += escapeDelimeter;\n            left = iDelimeter + 1;\n            iDelimeter = value.indexOf(delimeter, left);\n        } else {\n            if (left < isAmpersand) out += value.substring(left, isAmpersand);\n            out += \"&amp;\";\n            left = isAmpersand + 1;\n            isAmpersand = value.indexOf(\"&\", left);\n        }\n    }\n    if (iDelimeter >= 0) {\n        do {\n            if (left < iDelimeter) out += value.substring(left, iDelimeter);\n            out += escapeDelimeter;\n            left = iDelimeter + 1;\n            iDelimeter = value.indexOf(delimeter, left);\n        }while (iDelimeter >= 0);\n    } else while(isAmpersand >= 0){\n        if (left < isAmpersand) out += value.substring(left, isAmpersand);\n        out += \"&amp;\";\n        left = isAmpersand + 1;\n        isAmpersand = value.indexOf(\"&\", left);\n    }\n    return left < value.length ? out + value.substring(left) : out;\n}\nconst SETUP = /* @__PURE__ */ Symbol(\"SETUP\");\nconst classSplitRE = /\\s+/;\nfunction parseClassAttr(tokens, attrValue) {\n    const classes = attrValue.trim().split(classSplitRE);\n    for (const token of classes)tokens.add(token);\n}\nconst styleSplitRE = /\\s*:\\s*/;\nconst stylesDelimeterRE = /\\s*;\\s*/;\nfunction parseStyleAttr(tokens, attrValue) {\n    const styles = attrValue.trim().split(stylesDelimeterRE);\n    for(let i = 0; i < styles.length; i++){\n        if (styles[i] === \"\") continue;\n        const [name, value] = styles[i].split(styleSplitRE);\n        tokens.set(name, value);\n    }\n}\nclass MaverickServerElement {\n    constructor(component){\n        this.keepAlive = false;\n        this.forwardKeepAlive = true;\n        this.attributes = new ServerAttributes();\n        this.style = new ServerStyle();\n        this.classList = new ServerClassList();\n        this.$ = component;\n    }\n    get $props() {\n        return this.$.$$._props;\n    }\n    get $state() {\n        return this.$.$$._$state;\n    }\n    get state() {\n        return this.$.state;\n    }\n    setup() {\n        const instance = this.$.$$;\n        scoped(()=>{\n            if (this.hasAttribute(\"class\")) {\n                parseClassAttr(this.classList.tokens, this.getAttribute(\"class\"));\n            }\n            if (this.hasAttribute(\"style\")) {\n                parseStyleAttr(this.style.tokens, this.getAttribute(\"style\"));\n            }\n            instance._setup();\n            instance._attach(this);\n            if (this.classList.length > 0) {\n                this.setAttribute(\"class\", this.classList.toString());\n            }\n            if (this.style.length > 0) {\n                this.setAttribute(\"style\", this.style.toString());\n            }\n            if (this.keepAlive) {\n                this.setAttribute(\"keep-alive\", \"\");\n            }\n        }, instance._scope);\n    }\n    getAttribute(name) {\n        return this.attributes.getAttribute(name);\n    }\n    setAttribute(name, value) {\n        this.attributes.setAttribute(name, value);\n    }\n    hasAttribute(name) {\n        return this.attributes.hasAttribute(name);\n    }\n    removeAttribute(name) {\n        return this.attributes.removeAttribute(name);\n    }\n    [SETUP]() {}\n    addEventListener() {}\n    removeEventListener() {}\n    dispatchEvent() {\n        return false;\n    }\n    subscribe() {\n        return noop;\n    }\n    destroy() {\n        this.$.destroy();\n    }\n}\nclass ServerAttributes {\n    constructor(){\n        this._tokens = /* @__PURE__ */ new Map();\n    }\n    get length() {\n        return this._tokens.size;\n    }\n    get tokens() {\n        return this._tokens;\n    }\n    getAttribute(name) {\n        return this._tokens.get(name) ?? null;\n    }\n    hasAttribute(name) {\n        return this._tokens.has(name);\n    }\n    setAttribute(name, value) {\n        this._tokens.set(name, value + \"\");\n    }\n    removeAttribute(name) {\n        this._tokens.delete(name);\n    }\n    toString() {\n        if (this._tokens.size === 0) return \"\";\n        let result = \"\";\n        for (const [name, value] of this._tokens){\n            result += ` ${name}=\"${escape(value, true)}\"`;\n        }\n        return result;\n    }\n}\nclass ServerStyle {\n    constructor(){\n        this._tokens = /* @__PURE__ */ new Map();\n    }\n    get length() {\n        return this._tokens.size;\n    }\n    get tokens() {\n        return this._tokens;\n    }\n    getPropertyValue(prop2) {\n        return this._tokens.get(prop2) ?? \"\";\n    }\n    setProperty(prop2, value) {\n        this._tokens.set(prop2, value ?? \"\");\n    }\n    removeProperty(prop2) {\n        const value = this._tokens.get(prop2);\n        this._tokens.delete(prop2);\n        return value ?? \"\";\n    }\n    toString() {\n        if (this._tokens.size === 0) return \"\";\n        let result = \"\";\n        for (const [name, value] of this._tokens){\n            result += `${name}: ${value};`;\n        }\n        return result;\n    }\n}\nclass ServerClassList {\n    constructor(){\n        this._tokens = /* @__PURE__ */ new Set();\n    }\n    get length() {\n        return this._tokens.size;\n    }\n    get tokens() {\n        return this._tokens;\n    }\n    add(...tokens) {\n        for (const token of tokens){\n            this._tokens.add(token);\n        }\n    }\n    contains(token) {\n        return this._tokens.has(token);\n    }\n    remove(token) {\n        this._tokens.delete(token);\n    }\n    replace(token, newToken) {\n        if (!this._tokens.has(token)) return false;\n        this._tokens.delete(token);\n        this._tokens.add(newToken);\n        return true;\n    }\n    toggle(token, force) {\n        if (force !== true && (this._tokens.has(token) || force === false)) {\n            this._tokens.delete(token);\n            return false;\n        } else {\n            this._tokens.add(token);\n            return true;\n        }\n    }\n    toString() {\n        return Array.from(this._tokens).join(\" \");\n    }\n}\nconst attrsToProps = {\n    acceptcharset: \"acceptCharset\",\n    \"accept-charset\": \"acceptCharset\",\n    accesskey: \"accessKey\",\n    allowfullscreen: \"allowFullScreen\",\n    autocapitalize: \"autoCapitalize\",\n    autocomplete: \"autoComplete\",\n    autocorrect: \"autoCorrect\",\n    autofocus: \"autoFocus\",\n    autoplay: \"autoPlay\",\n    autosave: \"autoSave\",\n    cellpadding: \"cellPadding\",\n    cellspacing: \"cellSpacing\",\n    charset: \"charSet\",\n    class: \"className\",\n    classid: \"classID\",\n    classname: \"className\",\n    colspan: \"colSpan\",\n    contenteditable: \"contentEditable\",\n    contextmenu: \"contextMenu\",\n    controlslist: \"controlsList\",\n    crossorigin: \"crossOrigin\",\n    dangerouslysetinnerhtml: \"dangerouslySetInnerHTML\",\n    datetime: \"dateTime\",\n    defaultchecked: \"defaultChecked\",\n    defaultvalue: \"defaultValue\",\n    disablepictureinpicture: \"disablePictureInPicture\",\n    disableremoteplayback: \"disableRemotePlayback\",\n    enctype: \"encType\",\n    enterkeyhint: \"enterKeyHint\",\n    fetchpriority: \"fetchPriority\",\n    for: \"htmlFor\",\n    formmethod: \"formMethod\",\n    formaction: \"formAction\",\n    formenctype: \"formEncType\",\n    formnovalidate: \"formNoValidate\",\n    formtarget: \"formTarget\",\n    frameborder: \"frameBorder\",\n    hreflang: \"hrefLang\",\n    htmlfor: \"htmlFor\",\n    httpequiv: \"httpEquiv\",\n    \"http-equiv\": \"httpEquiv\",\n    imagesizes: \"imageSizes\",\n    imagesrcset: \"imageSrcSet\",\n    innerhtml: \"innerHTML\",\n    inputmode: \"inputMode\",\n    itemid: \"itemID\",\n    itemprop: \"itemProp\",\n    itemref: \"itemRef\",\n    itemscope: \"itemScope\",\n    itemtype: \"itemType\",\n    keyparams: \"keyParams\",\n    keytype: \"keyType\",\n    marginwidth: \"marginWidth\",\n    marginheight: \"marginHeight\",\n    maxlength: \"maxLength\",\n    mediagroup: \"mediaGroup\",\n    minlength: \"minLength\",\n    nomodule: \"noModule\",\n    novalidate: \"noValidate\",\n    playsinline: \"playsInline\",\n    radiogroup: \"radioGroup\",\n    readonly: \"readOnly\",\n    referrerpolicy: \"referrerPolicy\",\n    rowspan: \"rowSpan\",\n    spellcheck: \"spellCheck\",\n    srcdoc: \"srcDoc\",\n    srclang: \"srcLang\",\n    srcset: \"srcSet\",\n    tabindex: \"tabIndex\",\n    usemap: \"useMap\"\n};\nfunction createServerComponent(Component2, options) {\n    function ServerComponent(props) {\n        let scope = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ReactScopeContext), component = createComponent(Component2, {\n            props,\n            scope: scope.current\n        }), host = new MaverickServerElement(component), attrs = {}, { style = {}, children, forwardRef, ...__props } = props;\n        if (options.props.size) {\n            for (const prop2 of Object.keys(__props)){\n                if (!options.props.has(prop2)) attrs[prop2] = __props[prop2];\n            }\n        } else {\n            attrs = __props;\n        }\n        host.setup();\n        if (host.hasAttribute(\"style\")) {\n            for (const [name, value] of host.style.tokens){\n                style[name.startsWith(\"--\") ? name : kebabToCamelCase(name)] = value;\n            }\n            host.removeAttribute(\"style\");\n        }\n        for (const [attrName, attrValue] of host.attributes.tokens){\n            const propName = attrsToProps[attrName];\n            if (propName) {\n                if (!(propName in attrs)) {\n                    attrs[propName] = attrValue;\n                }\n                host.removeAttribute(attrName);\n            }\n        }\n        return WithScope({\n            current: component.$$._scope\n        }, isFunction(children) ? children?.({\n            ...Object.fromEntries(host.attributes.tokens),\n            ...attrs,\n            style\n        }, component) : children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(()=>{\n            host.destroy();\n            return null;\n        }));\n    }\n    ServerComponent.displayName = Component2.name + \"Bridge\";\n    return ServerComponent;\n}\nfunction useStateContext(state) {\n    return useReactContext(state);\n}\nfunction useSignal(signal2, key) {\n    const [, scheduleReactUpdate] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return effect$1(()=>{\n            signal2();\n            scheduleReactUpdate({});\n        });\n    }, [\n        key ?? signal2\n    ]);\n    return signal2();\n}\nfunction ariaBool(value) {\n    return value ? \"true\" : \"false\";\n}\nfunction createDisposalBin() {\n    const disposal = /* @__PURE__ */ new Set();\n    return {\n        add (...callbacks) {\n            for (const callback of callbacks)disposal.add(callback);\n        },\n        empty () {\n            for (const callback of disposal)callback();\n            disposal.clear();\n        }\n    };\n}\nfunction useDisposalBin() {\n    const disposal = createDisposalBin();\n    onDispose(disposal.empty);\n    return disposal;\n}\nfunction keysOf(obj) {\n    return Object.keys(obj);\n}\nfunction deferredPromise() {\n    let resolve, reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\nfunction waitTimeout(delay) {\n    return new Promise((resolve)=>setTimeout(resolve, delay));\n}\nfunction animationFrameThrottle(func) {\n    if (IS_SERVER) return noop;\n    let id = -1, lastArgs;\n    function throttle(...args) {\n        lastArgs = args;\n        if (id >= 0) return;\n        id = window.requestAnimationFrame(()=>{\n            func.apply(this, lastArgs);\n            id = -1;\n            lastArgs = void 0;\n        });\n    }\n    return throttle;\n}\nconst requestIdleCallback = IS_SERVER ? noop :  false ? 0 : noop;\nfunction waitIdlePeriod(callback, options) {\n    if (IS_SERVER) return Promise.resolve();\n    return new Promise((resolve)=>{\n        requestIdleCallback((deadline)=>{\n            callback?.(deadline);\n            resolve();\n        }, options);\n    });\n}\nfunction useSignalRecord($state) {\n    const [, scheduleReactUpdate] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), tracking = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    if (tracking.current == null) {\n        tracking.current = {\n            state: {},\n            $update: signal({}),\n            props: /* @__PURE__ */ new Set()\n        };\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let { state, $update, props } = tracking.current;\n        return effect(()=>{\n            for (const prop2 of props){\n                const value = $state[prop2]();\n                state[prop2] = isArray(value) ? [\n                    ...value\n                ] : value;\n            }\n            $update();\n            scheduleReactUpdate({});\n        });\n    }, [\n        $state\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let { state, $update, props } = tracking.current, scheduledUpdate = false;\n        props.clear();\n        return new Proxy(state, {\n            get (_, prop2) {\n                if (!props.has(prop2) && prop2 in $state) {\n                    props.add(prop2);\n                    const value = $state[prop2]();\n                    state[prop2] = isArray(value) ? [\n                        ...value\n                    ] : value;\n                    if (!scheduledUpdate) {\n                        $update.set({});\n                        scheduledUpdate = true;\n                        queueMicrotask(()=>scheduledUpdate = false);\n                    }\n                }\n                return state[prop2];\n            },\n            set (_, prop2, newValue) {\n                if (!(prop2 in $state)) state[prop2] = newValue;\n                return true;\n            }\n        });\n    }, [\n        $state\n    ]);\n}\nfunction createReactComponent(Component2, options) {\n    if (IS_SERVER) {\n        return createServerComponent(Component2, {\n            props: new Set(Object.keys(Component2.props || {}))\n        });\n    } else {\n        return createClientComponent(Component2, {\n            props: new Set(Object.keys(Component2.props || {})),\n            events: new Set(options?.events),\n            eventsRE: options?.eventsRegex,\n            domEvents: options?.domEvents,\n            domEventsRE: options?.domEventsRegex\n        });\n    }\n}\nvar key = {\n    fullscreenEnabled: 0,\n    fullscreenElement: 1,\n    requestFullscreen: 2,\n    exitFullscreen: 3,\n    fullscreenchange: 4,\n    fullscreenerror: 5,\n    fullscreen: 6\n};\nvar webkit = [\n    \"webkitFullscreenEnabled\",\n    \"webkitFullscreenElement\",\n    \"webkitRequestFullscreen\",\n    \"webkitExitFullscreen\",\n    \"webkitfullscreenchange\",\n    \"webkitfullscreenerror\",\n    \"-webkit-full-screen\"\n];\nvar moz = [\n    \"mozFullScreenEnabled\",\n    \"mozFullScreenElement\",\n    \"mozRequestFullScreen\",\n    \"mozCancelFullScreen\",\n    \"mozfullscreenchange\",\n    \"mozfullscreenerror\",\n    \"-moz-full-screen\"\n];\nvar ms = [\n    \"msFullscreenEnabled\",\n    \"msFullscreenElement\",\n    \"msRequestFullscreen\",\n    \"msExitFullscreen\",\n    \"MSFullscreenChange\",\n    \"MSFullscreenError\",\n    \"-ms-fullscreen\"\n];\nvar document$1 =  false ? 0 : {};\nvar vendor = \"fullscreenEnabled\" in document$1 && Object.keys(key) || webkit[0] in document$1 && webkit || moz[0] in document$1 && moz || ms[0] in document$1 && ms || [];\nvar fscreen = {\n    requestFullscreen: function(element) {\n        return element[vendor[key.requestFullscreen]]();\n    },\n    requestFullscreenFunction: function(element) {\n        return element[vendor[key.requestFullscreen]];\n    },\n    get exitFullscreen () {\n        return document$1[vendor[key.exitFullscreen]].bind(document$1);\n    },\n    get fullscreenPseudoClass () {\n        return \":\" + vendor[key.fullscreen];\n    },\n    addEventListener: function(type, handler1, options) {\n        return document$1.addEventListener(vendor[key[type]], handler1, options);\n    },\n    removeEventListener: function(type, handler1, options) {\n        return document$1.removeEventListener(vendor[key[type]], handler1, options);\n    },\n    get fullscreenEnabled () {\n        return Boolean(document$1[vendor[key.fullscreenEnabled]]);\n    },\n    set fullscreenEnabled (val){},\n    get fullscreenElement () {\n        return document$1[vendor[key.fullscreenElement]];\n    },\n    set fullscreenElement (val){},\n    get onfullscreenchange () {\n        return document$1[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()];\n    },\n    set onfullscreenchange (handler){\n        return document$1[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()] = handler;\n    },\n    get onfullscreenerror () {\n        return document$1[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()];\n    },\n    set onfullscreenerror (handler){\n        return document$1[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()] = handler;\n    }\n};\nvar functionThrottle = throttle;\nfunction throttle(fn, interval, options) {\n    var timeoutId = null;\n    var throttledFn = null;\n    var leading = options && options.leading;\n    var trailing = options && options.trailing;\n    if (leading == null) {\n        leading = true; // default\n    }\n    if (trailing == null) {\n        trailing = !leading; //default\n    }\n    if (leading == true) {\n        trailing = false; // forced because there should be invocation per call\n    }\n    var cancel = function() {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n            timeoutId = null;\n        }\n    };\n    var flush = function() {\n        var call = throttledFn;\n        cancel();\n        if (call) {\n            call();\n        }\n    };\n    var throttleWrapper = function() {\n        var callNow = leading && !timeoutId;\n        var context = this;\n        var args = arguments;\n        throttledFn = function() {\n            return fn.apply(context, args);\n        };\n        if (!timeoutId) {\n            timeoutId = setTimeout(function() {\n                timeoutId = null;\n                if (trailing) {\n                    return throttledFn();\n                }\n            }, interval);\n        }\n        if (callNow) {\n            callNow = false;\n            return throttledFn();\n        }\n    };\n    throttleWrapper.cancel = cancel;\n    throttleWrapper.flush = flush;\n    return throttleWrapper;\n}\nvar functionDebounce = debounce;\nfunction debounce(fn, wait, callFirst) {\n    var timeout = null;\n    var debouncedFn = null;\n    var clear = function() {\n        if (timeout) {\n            clearTimeout(timeout);\n            debouncedFn = null;\n            timeout = null;\n        }\n    };\n    var flush = function() {\n        var call = debouncedFn;\n        clear();\n        if (call) {\n            call();\n        }\n    };\n    var debounceWrapper = function() {\n        if (!wait) {\n            return fn.apply(this, arguments);\n        }\n        var context = this;\n        var args = arguments;\n        var callNow = callFirst && !timeout;\n        clear();\n        debouncedFn = function() {\n            fn.apply(context, args);\n        };\n        timeout = setTimeout(function() {\n            timeout = null;\n            if (!callNow) {\n                var call = debouncedFn;\n                debouncedFn = null;\n                return call();\n            }\n        }, wait);\n        if (callNow) {\n            return debouncedFn();\n        }\n    };\n    debounceWrapper.cancel = clear;\n    debounceWrapper.flush = flush;\n    return debounceWrapper;\n}\nconst t = (t2)=>\"object\" == typeof t2 && null != t2 && 1 === t2.nodeType, e = (t2, e2)=>(!e2 || \"hidden\" !== t2) && \"visible\" !== t2 && \"clip\" !== t2, n = (t2, n2)=>{\n    if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {\n        const o2 = getComputedStyle(t2, null);\n        return e(o2.overflowY, n2) || e(o2.overflowX, n2) || ((t3)=>{\n            const e2 = ((t4)=>{\n                if (!t4.ownerDocument || !t4.ownerDocument.defaultView) return null;\n                try {\n                    return t4.ownerDocument.defaultView.frameElement;\n                } catch (t5) {\n                    return null;\n                }\n            })(t3);\n            return !!e2 && (e2.clientHeight < t3.scrollHeight || e2.clientWidth < t3.scrollWidth);\n        })(t2);\n    }\n    return false;\n}, o = (t2, e2, n2, o2, l2, r2, i, s)=>r2 < t2 && i > e2 || r2 > t2 && i < e2 ? 0 : r2 <= t2 && s <= n2 || i >= e2 && s >= n2 ? r2 - t2 - o2 : i > e2 && s < n2 || r2 < t2 && s > n2 ? i - e2 + l2 : 0, l = (t2)=>{\n    const e2 = t2.parentElement;\n    return null == e2 ? t2.getRootNode().host || null : e2;\n}, r = (e2, r2)=>{\n    var i, s, d, h;\n    if (\"undefined\" == typeof document) return [];\n    const { scrollMode: c, block: f, inline: u, boundary: a, skipOverflowHiddenElements: g } = r2, p = \"function\" == typeof a ? a : (t2)=>t2 !== a;\n    if (!t(e2)) throw new TypeError(\"Invalid target\");\n    const m = document.scrollingElement || document.documentElement, w = [];\n    let W = e2;\n    for(; t(W) && p(W);){\n        if (W = l(W), W === m) {\n            w.push(W);\n            break;\n        }\n        null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);\n    }\n    const b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth, H = null != (h = null == (d = window.visualViewport) ? void 0 : d.height) ? h : innerHeight, { scrollX: y, scrollY: M } = window, { height: v, width: E, top: x, right: C, bottom: I, left: R } = e2.getBoundingClientRect(), { top: T, right: B, bottom: F, left: V } = ((t2)=>{\n        const e3 = window.getComputedStyle(t2);\n        return {\n            top: parseFloat(e3.scrollMarginTop) || 0,\n            right: parseFloat(e3.scrollMarginRight) || 0,\n            bottom: parseFloat(e3.scrollMarginBottom) || 0,\n            left: parseFloat(e3.scrollMarginLeft) || 0\n        };\n    })(e2);\n    let k = \"start\" === f || \"nearest\" === f ? x - T : \"end\" === f ? I + F : x + v / 2 - T + F, D = \"center\" === u ? R + E / 2 - V + B : \"end\" === u ? C + B : R - V;\n    const L = [];\n    for(let t2 = 0; t2 < w.length; t2++){\n        const e3 = w[t2], { height: n2, width: l2, top: r3, right: i2, bottom: s2, left: d2 } = e3.getBoundingClientRect();\n        if (\"if-needed\" === c && x >= 0 && R >= 0 && I <= H && C <= b && x >= r3 && I <= s2 && R >= d2 && C <= i2) return L;\n        const h2 = getComputedStyle(e3), a2 = parseInt(h2.borderLeftWidth, 10), g2 = parseInt(h2.borderTopWidth, 10), p2 = parseInt(h2.borderRightWidth, 10), W2 = parseInt(h2.borderBottomWidth, 10);\n        let T2 = 0, B2 = 0;\n        const F2 = \"offsetWidth\" in e3 ? e3.offsetWidth - e3.clientWidth - a2 - p2 : 0, V2 = \"offsetHeight\" in e3 ? e3.offsetHeight - e3.clientHeight - g2 - W2 : 0, S = \"offsetWidth\" in e3 ? 0 === e3.offsetWidth ? 0 : l2 / e3.offsetWidth : 0, X = \"offsetHeight\" in e3 ? 0 === e3.offsetHeight ? 0 : n2 / e3.offsetHeight : 0;\n        if (m === e3) T2 = \"start\" === f ? k : \"end\" === f ? k - H : \"nearest\" === f ? o(M, M + H, H, g2, W2, M + k, M + k + v, v) : k - H / 2, B2 = \"start\" === u ? D : \"center\" === u ? D - b / 2 : \"end\" === u ? D - b : o(y, y + b, b, a2, p2, y + D, y + D + E, E), T2 = Math.max(0, T2 + M), B2 = Math.max(0, B2 + y);\n        else {\n            T2 = \"start\" === f ? k - r3 - g2 : \"end\" === f ? k - s2 + W2 + V2 : \"nearest\" === f ? o(r3, s2, n2, g2, W2 + V2, k, k + v, v) : k - (r3 + n2 / 2) + V2 / 2, B2 = \"start\" === u ? D - d2 - a2 : \"center\" === u ? D - (d2 + l2 / 2) + F2 / 2 : \"end\" === u ? D - i2 + p2 + F2 : o(d2, i2, l2, a2, p2 + F2, D, D + E, E);\n            const { scrollLeft: t3, scrollTop: h3 } = e3;\n            T2 = 0 === X ? 0 : Math.max(0, Math.min(h3 + T2 / X, e3.scrollHeight - n2 / X + V2)), B2 = 0 === S ? 0 : Math.max(0, Math.min(t3 + B2 / S, e3.scrollWidth - l2 / S + F2)), k += h3 - T2, D += t3 - B2;\n        }\n        L.push({\n            el: e3,\n            top: T2,\n            left: B2\n        });\n    }\n    return L;\n};\nvar Icon$0 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.0007 28.7923C15.0007 29.0152 14.9774 29.096 14.9339 29.1775C14.8903 29.259 14.8263 29.323 14.7449 29.3665C14.6634 29.4101 14.5826 29.4333 14.3597 29.4333H12.575C12.3521 29.4333 12.2713 29.4101 12.1898 29.3665C12.1083 29.323 12.0443 29.259 12.0008 29.1775C11.9572 29.096 11.934 29.0152 11.934 28.7923V12.2993L5.97496 12.3C5.75208 12.3 5.67125 12.2768 5.58977 12.2332C5.50829 12.1896 5.44434 12.1257 5.40077 12.0442C5.35719 11.9627 5.33398 11.8819 5.33398 11.659V9.87429C5.33398 9.65141 5.35719 9.57059 5.40077 9.48911C5.44434 9.40762 5.50829 9.34368 5.58977 9.3001C5.67125 9.25652 5.75208 9.23332 5.97496 9.23332H26.0263C26.2492 9.23332 26.33 9.25652 26.4115 9.3001C26.493 9.34368 26.557 9.40762 26.6005 9.48911C26.6441 9.57059 26.6673 9.65141 26.6673 9.87429V11.659C26.6673 11.8819 26.6441 11.9627 26.6005 12.0442C26.557 12.1257 26.493 12.1896 26.4115 12.2332C26.33 12.2768 26.2492 12.3 26.0263 12.3L20.067 12.2993L20.0673 28.7923C20.0673 29.0152 20.0441 29.096 20.0005 29.1775C19.957 29.259 19.893 29.323 19.8115 29.3665C19.73 29.4101 19.6492 29.4333 19.4263 29.4333H17.6416C17.4187 29.4333 17.3379 29.4101 17.2564 29.3665C17.175 29.323 17.111 29.259 17.0674 29.1775C17.0239 29.096 17.0007 29.0152 17.0007 28.7923L17 22.7663H15L15.0007 28.7923Z\" fill=\"currentColor\"/> <path d=\"M16.0007 7.89998C17.4734 7.89998 18.6673 6.70608 18.6673 5.23332C18.6673 3.76056 17.4734 2.56665 16.0007 2.56665C14.5279 2.56665 13.334 3.76056 13.334 5.23332C13.334 6.70608 14.5279 7.89998 16.0007 7.89998Z\" fill=\"currentColor\"/>`;\nvar Icon$5 = `<path d=\"M5.33334 6.00001C5.33334 5.63182 5.63181 5.33334 6 5.33334H26C26.3682 5.33334 26.6667 5.63182 26.6667 6.00001V20.6667C26.6667 21.0349 26.3682 21.3333 26 21.3333H23.7072C23.4956 21.3333 23.2966 21.233 23.171 21.0628L22.1859 19.7295C21.8607 19.2894 22.1749 18.6667 22.7221 18.6667H23.3333C23.7015 18.6667 24 18.3682 24 18V8.66668C24 8.29849 23.7015 8.00001 23.3333 8.00001H8.66667C8.29848 8.00001 8 8.29849 8 8.66668V18C8 18.3682 8.29848 18.6667 8.66667 18.6667H9.29357C9.84072 18.6667 10.1549 19.2894 9.82976 19.7295L8.84467 21.0628C8.71898 21.233 8.52 21.3333 8.30848 21.3333H6C5.63181 21.3333 5.33334 21.0349 5.33334 20.6667V6.00001Z\" fill=\"currentColor\"/> <path d=\"M8.78528 25.6038C8.46013 26.0439 8.77431 26.6667 9.32147 26.6667L22.6785 26.6667C23.2256 26.6667 23.5398 26.0439 23.2146 25.6038L16.5358 16.5653C16.2693 16.2046 15.73 16.2047 15.4635 16.5653L8.78528 25.6038Z\" fill=\"currentColor\"/>`;\nvar Icon$8 = `<path d=\"M17.4853 18.9093C17.4853 19.0281 17.6289 19.0875 17.7129 19.0035L22.4185 14.2979C22.6788 14.0376 23.1009 14.0376 23.3613 14.2979L24.7755 15.7122C25.0359 15.9725 25.0359 16.3946 24.7755 16.655L16.2902 25.1403C16.0299 25.4006 15.6078 25.4006 15.3474 25.1403L13.9332 23.726L13.9319 23.7247L6.86189 16.6547C6.60154 16.3944 6.60154 15.9723 6.86189 15.7119L8.2761 14.2977C8.53645 14.0373 8.95856 14.0373 9.21891 14.2977L13.9243 19.0031C14.0083 19.0871 14.1519 19.0276 14.1519 18.9088L14.1519 6.00004C14.1519 5.63185 14.4504 5.33337 14.8186 5.33337L16.8186 5.33337C17.1868 5.33337 17.4853 5.63185 17.4853 6.00004L17.4853 18.9093Z\" fill=\"currentColor\"/>`;\nvar Icon$11 = `<path d=\"M13.0908 14.3334C12.972 14.3334 12.9125 14.1898 12.9965 14.1058L17.7021 9.40022C17.9625 9.13987 17.9625 8.71776 17.7021 8.45741L16.2879 7.04319C16.0275 6.78284 15.6054 6.78284 15.3451 7.04319L6.8598 15.5285C6.59945 15.7888 6.59945 16.2109 6.8598 16.4713L8.27401 17.8855L8.27536 17.8868L15.3453 24.9568C15.6057 25.2172 16.0278 25.2172 16.2881 24.9568L17.7024 23.5426C17.9627 23.2822 17.9627 22.8601 17.7024 22.5998L12.9969 17.8944C12.9129 17.8104 12.9724 17.6668 13.0912 17.6668L26 17.6668C26.3682 17.6668 26.6667 17.3683 26.6667 17.0001V15.0001C26.6667 14.6319 26.3682 14.3334 26 14.3334L13.0908 14.3334Z\" fill=\"currentColor\"/>`;\nvar Icon$13 = `<path d=\"M14.1521 13.0929C14.1521 12.9741 14.0085 12.9147 13.9245 12.9987L9.21891 17.7043C8.95856 17.9646 8.53645 17.9646 8.2761 17.7043L6.86189 16.29C6.60154 16.0297 6.60154 15.6076 6.86189 15.3472L15.3472 6.86195C15.6075 6.6016 16.0296 6.6016 16.29 6.86195L17.7042 8.27616L17.7055 8.27751L24.7755 15.3475C25.0359 15.6078 25.0359 16.0299 24.7755 16.2903L23.3613 17.7045C23.1009 17.9649 22.6788 17.9649 22.4185 17.7045L17.7131 12.9991C17.6291 12.9151 17.4855 12.9746 17.4855 13.0934V26.0022C17.4855 26.3704 17.187 26.6688 16.8188 26.6688H14.8188C14.4506 26.6688 14.1521 26.3704 14.1521 26.0022L14.1521 13.0929Z\" fill=\"currentColor\"/>`;\nvar Icon$16 = `<path d=\"M16.6927 25.3346C16.3245 25.3346 16.026 25.0361 16.026 24.6679L16.026 7.3346C16.026 6.96641 16.3245 6.66794 16.6927 6.66794L18.6927 6.66794C19.0609 6.66794 19.3594 6.96642 19.3594 7.3346L19.3594 24.6679C19.3594 25.0361 19.0609 25.3346 18.6927 25.3346H16.6927Z\" fill=\"currentColor\"/> <path d=\"M24.026 25.3346C23.6578 25.3346 23.3594 25.0361 23.3594 24.6679L23.3594 7.3346C23.3594 6.96641 23.6578 6.66794 24.026 6.66794L26.026 6.66794C26.3942 6.66794 26.6927 6.96642 26.6927 7.3346V24.6679C26.6927 25.0361 26.3942 25.3346 26.026 25.3346H24.026Z\" fill=\"currentColor\"/> <path d=\"M5.48113 23.9407C5.38584 24.2963 5.59689 24.6619 5.95254 24.7572L7.88439 25.2748C8.24003 25.3701 8.60559 25.159 8.70089 24.8034L13.1871 8.06067C13.2824 7.70503 13.0713 7.33947 12.7157 7.24417L10.7838 6.72654C10.4282 6.63124 10.0626 6.8423 9.96733 7.19794L5.48113 23.9407Z\" fill=\"currentColor\"/>`;\nvar Icon$19 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M24.9266 7.57992C25.015 7.60672 25.0886 7.64746 25.2462 7.80506L26.956 9.51488C27.1136 9.67248 27.1543 9.74604 27.1811 9.83447C27.2079 9.9229 27.2079 10.0133 27.1811 10.1018C27.1543 10.1902 27.1136 10.2638 26.956 10.4214L13.1822 24.1951C13.0246 24.3527 12.951 24.3935 12.8626 24.4203C12.797 24.4402 12.7304 24.4453 12.6642 24.4357L12.7319 24.4203C12.6435 24.4471 12.553 24.4471 12.4646 24.4203C12.3762 24.3935 12.3026 24.3527 12.145 24.1951L5.04407 17.0942C4.88647 16.9366 4.84573 16.863 4.81893 16.7746C4.79213 16.6862 4.79213 16.5957 4.81893 16.5073C4.84573 16.4189 4.88647 16.3453 5.04407 16.1877L6.7539 14.4779C6.9115 14.3203 6.98506 14.2796 7.07349 14.2528C7.16191 14.226 7.25235 14.226 7.34078 14.2528C7.42921 14.2796 7.50277 14.3203 7.66037 14.4779L12.6628 19.4808L24.3397 7.80506C24.4973 7.64746 24.5709 7.60672 24.6593 7.57992C24.7477 7.55311 24.8382 7.55311 24.9266 7.57992Z\" fill=\"currentColor\"/>`;\nvar Icon$22 = `<path d=\"M17.947 16.095C17.999 16.043 17.999 15.9585 17.947 15.9065L11.6295 9.58899C11.3691 9.32864 11.3691 8.90653 11.6295 8.64618L13.2323 7.04341C13.4926 6.78306 13.9147 6.78306 14.1751 7.04341L21.0289 13.8973C21.0392 13.9064 21.0493 13.9158 21.0591 13.9257L22.6619 15.5285C22.9223 15.7888 22.9223 16.2109 22.6619 16.4713L14.1766 24.9565C13.9163 25.2169 13.4942 25.2169 13.2338 24.9565L11.631 23.3538C11.3707 23.0934 11.3707 22.6713 11.631 22.411L17.947 16.095Z\" fill=\"currentColor\"/>`;\nvar Icon$24 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6 7C5.63181 7 5.33333 7.29848 5.33333 7.66667V14.8667C5.33333 14.9403 5.39361 14.9999 5.46724 15.0009C10.8844 15.0719 15.2614 19.449 15.3325 24.8661C15.3334 24.9397 15.393 25 15.4667 25H26C26.3682 25 26.6667 24.7015 26.6667 24.3333V7.66667C26.6667 7.29848 26.3682 7 26 7H6ZM17.0119 22.2294C17.0263 22.29 17.0802 22.3333 17.1425 22.3333H23.3333C23.7015 22.3333 24 22.0349 24 21.6667V10.3333C24 9.96514 23.7015 9.66667 23.3333 9.66667H8.66667C8.29848 9.66667 8 9.96514 8 10.3333V13.1909C8 13.2531 8.04332 13.3071 8.10392 13.3214C12.5063 14.3618 15.9715 17.827 17.0119 22.2294Z\" fill=\"currentColor\"/> <path d=\"M13.2 25C13.2736 25 13.3334 24.9398 13.3322 24.8661C13.2615 20.5544 9.77889 17.0718 5.46718 17.0011C5.39356 16.9999 5.33333 17.0597 5.33333 17.1333V18.8667C5.33333 18.9403 5.39348 18.9999 5.4671 19.0015C8.67465 19.0716 11.2617 21.6587 11.3319 24.8662C11.3335 24.9399 11.393 25 11.4667 25H13.2Z\" fill=\"currentColor\"/> <path d=\"M5.33333 21.1333C5.33333 21.0597 5.39332 20.9998 5.46692 21.0022C7.57033 21.0712 9.26217 22.763 9.33114 24.8664C9.33356 24.94 9.27364 25 9.2 25H6C5.63181 25 5.33333 24.7015 5.33333 24.3333V21.1333Z\" fill=\"currentColor\"/>`;\nvar chromecast = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    default: Icon$24\n});\nvar Icon$26 = `<path d=\"M8 28.0003C8 27.6321 8.29848 27.3336 8.66667 27.3336H23.3333C23.7015 27.3336 24 27.6321 24 28.0003V29.3336C24 29.7018 23.7015 30.0003 23.3333 30.0003H8.66667C8.29848 30.0003 8 29.7018 8 29.3336V28.0003Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4.66602 6.66699C4.29783 6.66699 3.99935 6.96547 3.99935 7.33366V24.667C3.99935 25.0352 4.29783 25.3337 4.66602 25.3337H27.3327C27.7009 25.3337 27.9994 25.0352 27.9994 24.667V7.33366C27.9994 6.96547 27.7009 6.66699 27.3327 6.66699H4.66602ZM8.66659 21.3333C8.2984 21.3333 7.99992 21.0349 7.99992 20.6667V11.3333C7.99992 10.9651 8.2984 10.6667 8.66659 10.6667H13.9999C14.3681 10.6667 14.6666 10.9651 14.6666 11.3333V12.6667C14.6666 13.0349 14.3681 13.3333 13.9999 13.3333H10.7999C10.7263 13.3333 10.6666 13.393 10.6666 13.4667V18.5333C10.6666 18.607 10.7263 18.6667 10.7999 18.6667H13.9999C14.3681 18.6667 14.6666 18.9651 14.6666 19.3333V20.6667C14.6666 21.0349 14.3681 21.3333 13.9999 21.3333H8.66659ZM17.9999 21.3333C17.6317 21.3333 17.3333 21.0349 17.3333 20.6667V11.3333C17.3333 10.9651 17.6317 10.6667 17.9999 10.6667H23.3333C23.7014 10.6667 23.9999 10.9651 23.9999 11.3333V12.6667C23.9999 13.0349 23.7014 13.3333 23.3333 13.3333H20.1333C20.0596 13.3333 19.9999 13.393 19.9999 13.4667V18.5333C19.9999 18.607 20.0596 18.6667 20.1333 18.6667H23.3333C23.7014 18.6667 23.9999 18.9651 23.9999 19.3333V20.6667C23.9999 21.0349 23.7014 21.3333 23.3333 21.3333H17.9999Z\" fill=\"currentColor\"/>`;\nvar Icon$27 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4.6661 6.66699C4.29791 6.66699 3.99943 6.96547 3.99943 7.33366V24.667C3.99943 25.0352 4.29791 25.3337 4.6661 25.3337H27.3328C27.701 25.3337 27.9994 25.0352 27.9994 24.667V7.33366C27.9994 6.96547 27.701 6.66699 27.3328 6.66699H4.6661ZM8.66667 21.3333C8.29848 21.3333 8 21.0349 8 20.6667V11.3333C8 10.9651 8.29848 10.6667 8.66667 10.6667H14C14.3682 10.6667 14.6667 10.9651 14.6667 11.3333V12.6667C14.6667 13.0349 14.3682 13.3333 14 13.3333H10.8C10.7264 13.3333 10.6667 13.393 10.6667 13.4667V18.5333C10.6667 18.607 10.7264 18.6667 10.8 18.6667H14C14.3682 18.6667 14.6667 18.9651 14.6667 19.3333V20.6667C14.6667 21.0349 14.3682 21.3333 14 21.3333H8.66667ZM18 21.3333C17.6318 21.3333 17.3333 21.0349 17.3333 20.6667V11.3333C17.3333 10.9651 17.6318 10.6667 18 10.6667H23.3333C23.7015 10.6667 24 10.9651 24 11.3333V12.6667C24 13.0349 23.7015 13.3333 23.3333 13.3333H20.1333C20.0597 13.3333 20 13.393 20 13.4667V18.5333C20 18.607 20.0597 18.6667 20.1333 18.6667H23.3333C23.7015 18.6667 24 18.9651 24 19.3333V20.6667C24 21.0349 23.7015 21.3333 23.3333 21.3333H18Z\" fill=\"currentColor\"/>`;\nvar Icon$31 = `<path d=\"M14.2225 13.7867C14.3065 13.8706 14.4501 13.8112 14.4501 13.6924V5.99955C14.4501 5.63136 14.7486 5.33289 15.1167 5.33289H16.8501C17.2183 5.33289 17.5167 5.63136 17.5167 5.99955V13.6916C17.5167 13.8104 17.6604 13.8699 17.7444 13.7859L19.9433 11.5869C20.2037 11.3266 20.6258 11.3266 20.8861 11.5869L22.1118 12.8126C22.3722 13.0729 22.3722 13.4951 22.1118 13.7554L16.4549 19.4123C16.1946 19.6726 15.772 19.6731 15.5116 19.4128L9.85479 13.7559C9.59444 13.4956 9.59444 13.0734 9.85479 12.8131L11.0804 11.5874C11.3408 11.3271 11.7629 11.3271 12.0233 11.5874L14.2225 13.7867Z\" fill=\"currentColor\"/> <path d=\"M5.99998 20.267C5.63179 20.267 5.33331 20.5654 5.33331 20.9336V25.9997C5.33331 26.3678 5.63179 26.6663 5.99998 26.6663H26C26.3682 26.6663 26.6666 26.3678 26.6666 25.9997V20.9336C26.6666 20.5654 26.3682 20.267 26 20.267H24.2666C23.8985 20.267 23.6 20.5654 23.6 20.9336V22.9333C23.6 23.3014 23.3015 23.5999 22.9333 23.5999H9.06638C8.69819 23.5999 8.39972 23.3014 8.39972 22.9333V20.9336C8.39972 20.5654 8.10124 20.267 7.73305 20.267H5.99998Z\" fill=\"currentColor\"/>`;\nvar Icon$33 = `<path d=\"M16 20C18.2091 20 20 18.2092 20 16C20 13.7909 18.2091 12 16 12C13.7909 12 12 13.7909 12 16C12 18.2092 13.7909 20 16 20Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28 16.0058C28 18.671 23.5 25.3334 16 25.3334C8.5 25.3334 4 18.6762 4 16.0058C4 13.3354 8.50447 6.66669 16 6.66669C23.4955 6.66669 28 13.3406 28 16.0058ZM25.3318 15.9934C25.3328 16.0017 25.3328 16.0099 25.3318 16.0182C25.3274 16.0571 25.3108 16.1728 25.2485 16.3708C25.1691 16.6229 25.0352 16.9462 24.8327 17.3216C24.4264 18.0749 23.7969 18.9398 22.9567 19.754C21.2791 21.3798 18.9148 22.6667 16 22.6667C13.0845 22.6667 10.7202 21.3805 9.04298 19.7557C8.20295 18.9419 7.57362 18.0773 7.16745 17.3241C6.96499 16.9486 6.83114 16.6252 6.75172 16.3729C6.67942 16.1431 6.66856 16.0243 6.66695 16.0066L6.66695 16.005C6.66859 15.9871 6.67951 15.8682 6.75188 15.6383C6.83145 15.3854 6.96554 15.0614 7.16831 14.6853C7.57507 13.9306 8.20514 13.0644 9.04577 12.249C10.7245 10.6208 13.0886 9.33335 16 9.33335C18.9108 9.33335 21.2748 10.6215 22.9539 12.2507C23.7947 13.0664 24.4249 13.933 24.8318 14.6877C25.0346 15.0639 25.1688 15.3878 25.2483 15.6404C25.3107 15.8386 25.3274 15.9545 25.3318 15.9934Z\" fill=\"currentColor\"/>`;\nvar Icon$34 = `<path d=\"M15.8747 8.11857C16.3148 7.79342 16.9375 8.10759 16.9375 8.65476V14.2575C16.9375 14.3669 17.0621 14.4297 17.1501 14.3647L25.6038 8.11857C26.0439 7.79342 26.6667 8.10759 26.6667 8.65476V23.3451C26.6667 23.8923 26.0439 24.2064 25.6038 23.8813L17.1501 17.6346C17.0621 17.5695 16.9375 17.6324 16.9375 17.7418L16.9375 23.3451C16.9375 23.8923 16.3147 24.2064 15.8747 23.8813L5.93387 16.5358C5.57322 16.2693 5.57323 15.7299 5.93389 15.4634L15.8747 8.11857Z\" fill=\"currentColor\"/>`;\nvar Icon$35 = `<path d=\"M16.1253 8.11866C15.6852 7.7935 15.0625 8.10768 15.0625 8.65484V14.2576C15.0625 14.367 14.9379 14.4298 14.8499 14.3648L6.39615 8.11866C5.95607 7.7935 5.33331 8.10768 5.33331 8.65484V23.3452C5.33331 23.8923 5.9561 24.2065 6.39617 23.8813L14.8499 17.6347C14.9379 17.5696 15.0625 17.6325 15.0625 17.7419L15.0625 23.3452C15.0625 23.8923 15.6853 24.2065 16.1253 23.8813L26.0661 16.5358C26.4268 16.2694 26.4268 15.73 26.0661 15.4635L16.1253 8.11866Z\" fill=\"currentColor\"/>`;\nvar Icon$39 = `<path d=\"M19.3334 13.3333C18.9652 13.3333 18.6667 13.0349 18.6667 12.6667L18.6667 7.33333C18.6667 6.96514 18.9652 6.66666 19.3334 6.66666H21.3334C21.7015 6.66666 22 6.96514 22 7.33333V9.86666C22 9.9403 22.0597 10 22.1334 10L24.6667 10C25.0349 10 25.3334 10.2985 25.3334 10.6667V12.6667C25.3334 13.0349 25.0349 13.3333 24.6667 13.3333L19.3334 13.3333Z\" fill=\"currentColor\"/> <path d=\"M13.3334 19.3333C13.3334 18.9651 13.0349 18.6667 12.6667 18.6667H7.33335C6.96516 18.6667 6.66669 18.9651 6.66669 19.3333V21.3333C6.66669 21.7015 6.96516 22 7.33335 22H9.86669C9.94032 22 10 22.0597 10 22.1333L10 24.6667C10 25.0349 10.2985 25.3333 10.6667 25.3333H12.6667C13.0349 25.3333 13.3334 25.0349 13.3334 24.6667L13.3334 19.3333Z\" fill=\"currentColor\"/> <path d=\"M18.6667 24.6667C18.6667 25.0349 18.9652 25.3333 19.3334 25.3333H21.3334C21.7015 25.3333 22 25.0349 22 24.6667V22.1333C22 22.0597 22.0597 22 22.1334 22H24.6667C25.0349 22 25.3334 21.7015 25.3334 21.3333V19.3333C25.3334 18.9651 25.0349 18.6667 24.6667 18.6667L19.3334 18.6667C18.9652 18.6667 18.6667 18.9651 18.6667 19.3333L18.6667 24.6667Z\" fill=\"currentColor\"/> <path d=\"M10.6667 13.3333H12.6667C13.0349 13.3333 13.3334 13.0349 13.3334 12.6667L13.3334 10.6667V7.33333C13.3334 6.96514 13.0349 6.66666 12.6667 6.66666H10.6667C10.2985 6.66666 10 6.96514 10 7.33333L10 9.86666C10 9.9403 9.94033 10 9.86669 10L7.33335 10C6.96516 10 6.66669 10.2985 6.66669 10.6667V12.6667C6.66669 13.0349 6.96516 13.3333 7.33335 13.3333L10.6667 13.3333Z\" fill=\"currentColor\"/>`;\nvar Icon$40 = `<path d=\"M25.3299 7.26517C25.2958 6.929 25.0119 6.66666 24.6667 6.66666H19.3334C18.9652 6.66666 18.6667 6.96514 18.6667 7.33333V9.33333C18.6667 9.70152 18.9652 10 19.3334 10L21.8667 10C21.9403 10 22 10.0597 22 10.1333V12.6667C22 13.0349 22.2985 13.3333 22.6667 13.3333H24.6667C25.0349 13.3333 25.3334 13.0349 25.3334 12.6667V7.33333C25.3334 7.31032 25.3322 7.28758 25.3299 7.26517Z\" fill=\"currentColor\"/> <path d=\"M22 21.8667C22 21.9403 21.9403 22 21.8667 22L19.3334 22C18.9652 22 18.6667 22.2985 18.6667 22.6667V24.6667C18.6667 25.0349 18.9652 25.3333 19.3334 25.3333L24.6667 25.3333C25.0349 25.3333 25.3334 25.0349 25.3334 24.6667V19.3333C25.3334 18.9651 25.0349 18.6667 24.6667 18.6667H22.6667C22.2985 18.6667 22 18.9651 22 19.3333V21.8667Z\" fill=\"currentColor\"/> <path d=\"M12.6667 22H10.1334C10.0597 22 10 21.9403 10 21.8667V19.3333C10 18.9651 9.70154 18.6667 9.33335 18.6667H7.33335C6.96516 18.6667 6.66669 18.9651 6.66669 19.3333V24.6667C6.66669 25.0349 6.96516 25.3333 7.33335 25.3333H12.6667C13.0349 25.3333 13.3334 25.0349 13.3334 24.6667V22.6667C13.3334 22.2985 13.0349 22 12.6667 22Z\" fill=\"currentColor\"/> <path d=\"M10 12.6667V10.1333C10 10.0597 10.0597 10 10.1334 10L12.6667 10C13.0349 10 13.3334 9.70152 13.3334 9.33333V7.33333C13.3334 6.96514 13.0349 6.66666 12.6667 6.66666H7.33335C6.96516 6.66666 6.66669 6.96514 6.66669 7.33333V12.6667C6.66669 13.0349 6.96516 13.3333 7.33335 13.3333H9.33335C9.70154 13.3333 10 13.0349 10 12.6667Z\" fill=\"currentColor\"/>`;\nvar Icon$53 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M26.6667 5.99998C26.6667 5.63179 26.3682 5.33331 26 5.33331H11.3333C10.9651 5.33331 10.6667 5.63179 10.6667 5.99998V17.5714C10.6667 17.6694 10.5644 17.7342 10.4741 17.6962C9.91823 17.4625 9.30754 17.3333 8.66667 17.3333C6.08934 17.3333 4 19.4226 4 22C4 24.5773 6.08934 26.6666 8.66667 26.6666C11.244 26.6666 13.3333 24.5773 13.3333 22V8.66665C13.3333 8.29846 13.6318 7.99998 14 7.99998L23.3333 7.99998C23.7015 7.99998 24 8.29846 24 8.66665V14.9048C24 15.0027 23.8978 15.0675 23.8075 15.0296C23.2516 14.7958 22.6409 14.6666 22 14.6666C19.4227 14.6666 17.3333 16.756 17.3333 19.3333C17.3333 21.9106 19.4227 24 22 24C24.5773 24 26.6667 21.9106 26.6667 19.3333V5.99998ZM22 21.3333C23.1046 21.3333 24 20.4379 24 19.3333C24 18.2287 23.1046 17.3333 22 17.3333C20.8954 17.3333 20 18.2287 20 19.3333C20 20.4379 20.8954 21.3333 22 21.3333ZM8.66667 24C9.77124 24 10.6667 23.1045 10.6667 22C10.6667 20.8954 9.77124 20 8.66667 20C7.5621 20 6.66667 20.8954 6.66667 22C6.66667 23.1045 7.5621 24 8.66667 24Z\" fill=\"currentColor\"/>`;\nvar Icon$54 = `<path d=\"M17.5091 24.6594C17.5091 25.2066 16.8864 25.5208 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9991 9.36923 19.9991H4.66667C4.29848 19.9991 4 19.7006 4 19.3325V12.6658C4 12.2976 4.29848 11.9991 4.66667 11.9991H9.37115C9.39967 11.9991 9.42745 11.99 9.45039 11.973L16.4463 6.8036C16.8863 6.47842 17.5091 6.79259 17.5091 7.33977L17.5091 24.6594Z\" fill=\"currentColor\"/> <path d=\"M28.8621 13.6422C29.1225 13.3818 29.1225 12.9597 28.8621 12.6994L27.9193 11.7566C27.659 11.4962 27.2368 11.4962 26.9765 11.7566L24.7134 14.0197C24.6613 14.0717 24.5769 14.0717 24.5248 14.0197L22.262 11.7568C22.0016 11.4964 21.5795 11.4964 21.3191 11.7568L20.3763 12.6996C20.116 12.9599 20.116 13.382 20.3763 13.6424L22.6392 15.9053C22.6913 15.9573 22.6913 16.0418 22.6392 16.0938L20.3768 18.3562C20.1165 18.6166 20.1165 19.0387 20.3768 19.299L21.3196 20.2419C21.58 20.5022 22.0021 20.5022 22.2624 20.2418L24.5248 17.9795C24.5769 17.9274 24.6613 17.9274 24.7134 17.9795L26.976 20.2421C27.2363 20.5024 27.6585 20.5024 27.9188 20.2421L28.8616 19.2992C29.122 19.0389 29.122 18.6168 28.8616 18.3564L26.599 16.0938C26.547 16.0418 26.547 15.9573 26.599 15.9053L28.8621 13.6422Z\" fill=\"currentColor\"/>`;\nvar Icon$56 = `<path d=\"M26.6009 16.0725C26.6009 16.424 26.4302 17.1125 25.9409 18.0213C25.4676 18.8976 24.7542 19.8715 23.8182 20.7783C21.9489 22.5905 19.2662 24.0667 15.9342 24.0667C12.6009 24.0667 9.91958 22.5915 8.04891 20.78C7.11424 19.8736 6.40091 18.9 5.92758 18.0236C5.43824 17.1149 5.26758 16.4257 5.26758 16.0725C5.26758 15.7193 5.43824 15.0293 5.92891 14.1193C6.40224 13.2416 7.11558 12.2665 8.05158 11.3587C9.92224 9.54398 12.6049 8.06665 15.9342 8.06665C19.2636 8.06665 21.9449 9.54505 23.8169 11.3604C24.7529 12.2687 25.4662 13.2441 25.9396 14.1216C26.4302 15.0317 26.6009 15.7209 26.6009 16.0725Z\" stroke=\"currentColor\" stroke-width=\"3\"/> <path d=\"M15.9336 20.0667C18.1427 20.0667 19.9336 18.2758 19.9336 16.0667C19.9336 13.8575 18.1427 12.0667 15.9336 12.0667C13.7245 12.0667 11.9336 13.8575 11.9336 16.0667C11.9336 18.2758 13.7245 20.0667 15.9336 20.0667Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M27.2323 25.0624L6.93878 4.76886C6.78118 4.61126 6.70762 4.57052 6.61919 4.54372C6.53077 4.51692 6.44033 4.51691 6.3519 4.54372C6.26347 4.57052 6.18991 4.61126 6.03231 4.76886L4.77032 6.03085C4.61272 6.18845 4.57198 6.26201 4.54518 6.35044C4.51838 6.43887 4.51838 6.5293 4.54518 6.61773C4.57198 6.70616 4.61272 6.77972 4.77032 6.93732L25.0639 27.2308C25.2215 27.3884 25.295 27.4292 25.3834 27.456C25.4719 27.4828 25.5623 27.4828 25.6507 27.456C25.7392 27.4292 25.8127 27.3885 25.9703 27.2309L27.2323 25.9689C27.3899 25.8113 27.4307 25.7377 27.4575 25.6493C27.4843 25.5608 27.4843 25.4704 27.4575 25.382C27.4307 25.2935 27.3899 25.22 27.2323 25.0624Z\" fill=\"currentColor\"/>`;\nvar Icon$59 = `<path d=\"M8.66667 6.66667C8.29848 6.66667 8 6.96514 8 7.33333V24.6667C8 25.0349 8.29848 25.3333 8.66667 25.3333H12.6667C13.0349 25.3333 13.3333 25.0349 13.3333 24.6667V7.33333C13.3333 6.96514 13.0349 6.66667 12.6667 6.66667H8.66667Z\" fill=\"currentColor\"/> <path d=\"M19.3333 6.66667C18.9651 6.66667 18.6667 6.96514 18.6667 7.33333V24.6667C18.6667 25.0349 18.9651 25.3333 19.3333 25.3333H23.3333C23.7015 25.3333 24 25.0349 24 24.6667V7.33333C24 6.96514 23.7015 6.66667 23.3333 6.66667H19.3333Z\" fill=\"currentColor\"/>`;\nvar Icon$60 = `<path d=\"M5.33334 26V19.4667C5.33334 19.393 5.39304 19.3333 5.46668 19.3333H7.86668C7.94031 19.3333 8.00001 19.393 8.00001 19.4667V23.3333C8.00001 23.7015 8.29849 24 8.66668 24H23.3333C23.7015 24 24 23.7015 24 23.3333V8.66666C24 8.29847 23.7015 7.99999 23.3333 7.99999H19.4667C19.393 7.99999 19.3333 7.9403 19.3333 7.86666V5.46666C19.3333 5.39302 19.393 5.33333 19.4667 5.33333H26C26.3682 5.33333 26.6667 5.63181 26.6667 5.99999V26C26.6667 26.3682 26.3682 26.6667 26 26.6667H6.00001C5.63182 26.6667 5.33334 26.3682 5.33334 26Z\" fill=\"currentColor\"/> <path d=\"M14.0098 8.42359H10.806C10.6872 8.42359 10.6277 8.56721 10.7117 8.6512L16.5491 14.4886C16.8094 14.7489 16.8094 15.171 16.5491 15.4314L15.3234 16.657C15.0631 16.9174 14.641 16.9174 14.3806 16.657L8.63739 10.9138C8.55339 10.8298 8.40978 10.8893 8.40978 11.0081V14.0236C8.40978 14.3918 8.1113 14.6903 7.74311 14.6903H6.00978C5.64159 14.6903 5.34311 14.3918 5.34311 14.0236L5.34311 6.02359C5.34311 5.6554 5.64159 5.35692 6.00978 5.35692L14.0098 5.35692C14.378 5.35692 14.6764 5.6554 14.6764 6.02359V7.75692C14.6764 8.12511 14.378 8.42359 14.0098 8.42359Z\" fill=\"currentColor\"/>`;\nvar Icon$61 = `<path d=\"M16 15.3333C15.6318 15.3333 15.3333 15.6318 15.3333 16V20C15.3333 20.3682 15.6318 20.6667 16 20.6667H21.3333C21.7015 20.6667 22 20.3682 22 20V16C22 15.6318 21.7015 15.3333 21.3333 15.3333H16Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.33333 7.33334C5.33333 6.96515 5.63181 6.66667 5.99999 6.66667H26C26.3682 6.66667 26.6667 6.96515 26.6667 7.33334V24.6667C26.6667 25.0349 26.3682 25.3333 26 25.3333H5.99999C5.63181 25.3333 5.33333 25.0349 5.33333 24.6667V7.33334ZM7.99999 10C7.99999 9.63182 8.29847 9.33334 8.66666 9.33334H23.3333C23.7015 9.33334 24 9.63182 24 10V22C24 22.3682 23.7015 22.6667 23.3333 22.6667H8.66666C8.29847 22.6667 7.99999 22.3682 7.99999 22V10Z\" fill=\"currentColor\"/>`;\nvar Icon$62 = `<path d=\"M10.6667 6.6548C10.6667 6.10764 11.2894 5.79346 11.7295 6.11862L24.377 15.4634C24.7377 15.7298 24.7377 16.2692 24.3771 16.5357L11.7295 25.8813C11.2895 26.2065 10.6667 25.8923 10.6667 25.3451L10.6667 6.6548Z\" fill=\"currentColor\"/>`;\nvar Icon$63 = `<path d=\"M13.9213 5.53573C14.3146 5.45804 14.6666 5.76987 14.6666 6.17079V7.57215C14.6666 7.89777 14.4305 8.17277 14.114 8.24925C12.5981 8.61559 11.2506 9.41368 10.2091 10.506C9.98474 10.7414 9.62903 10.8079 9.34742 10.6453L8.14112 9.94885C7.79394 9.7484 7.69985 9.28777 7.96359 8.98585C9.48505 7.24409 11.5636 6.00143 13.9213 5.53573Z\" fill=\"currentColor\"/> <path d=\"M5.88974 12.5908C6.01805 12.2101 6.46491 12.0603 6.81279 12.2611L8.01201 12.9535C8.29379 13.1162 8.41396 13.4577 8.32238 13.7699C8.11252 14.4854 7.99998 15.2424 7.99998 16.0257C7.99998 16.809 8.11252 17.566 8.32238 18.2814C8.41396 18.5936 8.29378 18.9352 8.01201 19.0979L6.82742 19.7818C6.48051 19.9821 6.03488 19.8337 5.90521 19.4547C5.5345 18.3712 5.33331 17.2091 5.33331 16C5.33331 14.8078 5.5289 13.6613 5.88974 12.5908Z\" fill=\"currentColor\"/> <path d=\"M8.17106 22.0852C7.82291 22.2862 7.72949 22.7486 7.99532 23.0502C9.51387 24.773 11.5799 26.0017 13.9213 26.4642C14.3146 26.5419 14.6666 26.2301 14.6666 25.8291V24.4792C14.6666 24.1536 14.4305 23.8786 14.114 23.8021C12.5981 23.4358 11.2506 22.6377 10.2091 21.5453C9.98474 21.31 9.62903 21.2435 9.34742 21.4061L8.17106 22.0852Z\" fill=\"currentColor\"/> <path d=\"M17.3333 25.8291C17.3333 26.2301 17.6857 26.5418 18.079 26.4641C22.9748 25.4969 26.6666 21.1796 26.6666 16C26.6666 10.8204 22.9748 6.50302 18.079 5.5358C17.6857 5.4581 17.3333 5.76987 17.3333 6.17079V7.57215C17.3333 7.89777 17.5697 8.17282 17.8862 8.24932C21.3942 9.09721 24 12.2572 24 16.0257C24 19.7942 21.3942 22.9542 17.8862 23.802C17.5697 23.8785 17.3333 24.1536 17.3333 24.4792V25.8291Z\" fill=\"currentColor\"/> <path d=\"M14.3961 10.4163C13.9561 10.0911 13.3333 10.4053 13.3333 10.9525L13.3333 21.0474C13.3333 21.5946 13.9561 21.9087 14.3962 21.5836L21.2273 16.5359C21.5879 16.2694 21.5879 15.73 21.2273 15.4635L14.3961 10.4163Z\" fill=\"currentColor\"/>`;\nvar Icon$74 = `<path d=\"M15.6038 12.2147C16.0439 12.5399 16.6667 12.2257 16.6667 11.6786V10.1789C16.6667 10.1001 16.7351 10.0384 16.8134 10.0479C20.1116 10.4494 22.6667 13.2593 22.6667 16.6659C22.6667 20.3481 19.6817 23.3332 15.9995 23.3332C12.542 23.3332 9.69927 20.7014 9.36509 17.332C9.32875 16.9655 9.03371 16.6662 8.66548 16.6662L6.66655 16.6666C6.29841 16.6666 5.99769 16.966 6.02187 17.3334C6.36494 22.5454 10.7012 26.6667 16 26.6667C21.5228 26.6667 26 22.1895 26 16.6667C26 11.4103 21.9444 7.10112 16.7916 6.69757C16.7216 6.69209 16.6667 6.63396 16.6667 6.56372V4.98824C16.6667 4.44106 16.0439 4.12689 15.6038 4.45206L11.0765 7.79738C10.7159 8.06387 10.7159 8.60326 11.0766 8.86973L15.6038 12.2147Z\" fill=\"currentColor\"/>`;\nvar Icon$77 = `<path d=\"M16.6667 10.3452C16.6667 10.8924 16.0439 11.2066 15.6038 10.8814L11.0766 7.5364C10.7159 7.26993 10.7159 6.73054 11.0766 6.46405L15.6038 3.11873C16.0439 2.79356 16.6667 3.10773 16.6667 3.6549V5.22682C16.6667 5.29746 16.7223 5.35579 16.7927 5.36066C22.6821 5.76757 27.3333 10.674 27.3333 16.6667C27.3333 22.9259 22.2592 28 16 28C9.96483 28 5.03145 23.2827 4.68601 17.3341C4.66466 16.9665 4.96518 16.6673 5.33339 16.6673H7.3334C7.70157 16.6673 7.99714 16.9668 8.02743 17.3337C8.36638 21.4399 11.8064 24.6667 16 24.6667C20.4183 24.6667 24 21.085 24 16.6667C24 12.5225 20.8483 9.11428 16.8113 8.70739C16.7337 8.69957 16.6667 8.76096 16.6667 8.83893V10.3452Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.0879 19.679C17.4553 19.9195 17.8928 20.0398 18.4004 20.0398C18.9099 20.0398 19.3474 19.9205 19.7129 19.6818C20.0803 19.4413 20.3635 19.0938 20.5623 18.6392C20.7612 18.1847 20.8606 17.6373 20.8606 16.9972C20.8625 16.3608 20.764 15.8192 20.5652 15.3722C20.3663 14.9252 20.0822 14.5853 19.7129 14.3523C19.3455 14.1175 18.908 14 18.4004 14C17.8928 14 17.4553 14.1175 17.0879 14.3523C16.7224 14.5853 16.4402 14.9252 16.2413 15.3722C16.0443 15.8173 15.9449 16.3589 15.943 16.9972C15.9411 17.6354 16.0396 18.1818 16.2385 18.6364C16.4373 19.089 16.7205 19.4366 17.0879 19.679ZM19.1362 18.4262C18.9487 18.7349 18.7034 18.8892 18.4004 18.8892C18.1996 18.8892 18.0226 18.8211 17.8691 18.6847C17.7157 18.5464 17.5964 18.3372 17.5112 18.0568C17.4279 17.7765 17.3871 17.4233 17.389 16.9972C17.3909 16.3684 17.4847 15.9025 17.6703 15.5995C17.8559 15.2945 18.0993 15.1421 18.4004 15.1421C18.603 15.1421 18.7801 15.2093 18.9316 15.3438C19.0832 15.4782 19.2015 15.6828 19.2868 15.9574C19.372 16.2301 19.4146 16.5767 19.4146 16.9972C19.4165 17.6392 19.3237 18.1156 19.1362 18.4262Z\" fill=\"currentColor\"/> <path d=\"M13.7746 19.8978C13.8482 19.8978 13.9079 19.8381 13.9079 19.7644V14.2129C13.9079 14.1393 13.8482 14.0796 13.7746 14.0796H12.642C12.6171 14.0796 12.5927 14.0865 12.5716 14.0997L11.2322 14.9325C11.1931 14.9568 11.1693 14.9996 11.1693 15.0457V15.9497C11.1693 16.0539 11.2833 16.1178 11.3722 16.0635L12.464 15.396C12.4682 15.3934 12.473 15.3921 12.4779 15.3921C12.4926 15.3921 12.5045 15.404 12.5045 15.4187V19.7644C12.5045 19.8381 12.5642 19.8978 12.6378 19.8978H13.7746Z\" fill=\"currentColor\"/>`;\nvar Icon$81 = `<path d=\"M15.3333 10.3452C15.3333 10.8924 15.9561 11.2066 16.3962 10.8814L20.9234 7.5364C21.2841 7.26993 21.2841 6.73054 20.9235 6.46405L16.3962 3.11873C15.9561 2.79356 15.3333 3.10773 15.3333 3.6549V5.22682C15.3333 5.29746 15.2778 5.35579 15.2073 5.36066C9.31791 5.76757 4.66667 10.674 4.66667 16.6667C4.66667 22.9259 9.74078 28 16 28C22.0352 28 26.9686 23.2827 27.314 17.3341C27.3354 16.9665 27.0348 16.6673 26.6666 16.6673H24.6666C24.2984 16.6673 24.0029 16.9668 23.9726 17.3337C23.6336 21.4399 20.1937 24.6667 16 24.6667C11.5817 24.6667 8 21.085 8 16.6667C8 12.5225 11.1517 9.11428 15.1887 8.70739C15.2663 8.69957 15.3333 8.76096 15.3333 8.83893V10.3452Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.0879 19.679C17.4553 19.9195 17.8928 20.0398 18.4004 20.0398C18.9099 20.0398 19.3474 19.9205 19.7129 19.6818C20.0803 19.4413 20.3635 19.0938 20.5623 18.6392C20.7612 18.1847 20.8606 17.6373 20.8606 16.9972C20.8625 16.3608 20.764 15.8192 20.5652 15.3722C20.3663 14.9252 20.0822 14.5853 19.7129 14.3523C19.3455 14.1175 18.908 14 18.4004 14C17.8928 14 17.4553 14.1175 17.0879 14.3523C16.7224 14.5853 16.4402 14.9252 16.2413 15.3722C16.0443 15.8173 15.9449 16.3589 15.943 16.9972C15.9411 17.6354 16.0396 18.1818 16.2385 18.6364C16.4373 19.089 16.7205 19.4366 17.0879 19.679ZM19.1362 18.4262C18.9487 18.7349 18.7034 18.8892 18.4004 18.8892C18.1996 18.8892 18.0225 18.8211 17.8691 18.6847C17.7157 18.5464 17.5964 18.3372 17.5112 18.0568C17.4278 17.7765 17.3871 17.4233 17.389 16.9972C17.3909 16.3684 17.4847 15.9025 17.6703 15.5995C17.8559 15.2945 18.0992 15.1421 18.4004 15.1421C18.603 15.1421 18.7801 15.2093 18.9316 15.3438C19.0831 15.4782 19.2015 15.6828 19.2867 15.9574C19.372 16.2301 19.4146 16.5767 19.4146 16.9972C19.4165 17.6392 19.3237 18.1156 19.1362 18.4262Z\" fill=\"currentColor\"/> <path d=\"M13.7746 19.8978C13.8482 19.8978 13.9079 19.8381 13.9079 19.7644V14.2129C13.9079 14.1393 13.8482 14.0796 13.7746 14.0796H12.642C12.6171 14.0796 12.5927 14.0865 12.5716 14.0997L11.2322 14.9325C11.1931 14.9568 11.1693 14.9996 11.1693 15.0457V15.9497C11.1693 16.0539 11.2833 16.1178 11.3722 16.0635L12.464 15.396C12.4682 15.3934 12.473 15.3921 12.4779 15.3921C12.4926 15.3921 12.5045 15.404 12.5045 15.4187V19.7644C12.5045 19.8381 12.5642 19.8978 12.6378 19.8978H13.7746Z\" fill=\"currentColor\"/>`;\nvar Icon$88 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13.5722 5.33333C13.2429 5.33333 12.9629 5.57382 12.9132 5.89938L12.4063 9.21916C12.4 9.26058 12.3746 9.29655 12.3378 9.31672C12.2387 9.37118 12.1409 9.42779 12.0444 9.48648C12.0086 9.5083 11.9646 9.51242 11.9255 9.49718L8.79572 8.27692C8.48896 8.15732 8.14083 8.27958 7.9762 8.56472L5.5491 12.7686C5.38444 13.0538 5.45271 13.4165 5.70981 13.6223L8.33308 15.7225C8.3658 15.7487 8.38422 15.7887 8.38331 15.8306C8.38209 15.8867 8.38148 15.9429 8.38148 15.9993C8.38148 16.0558 8.3821 16.1121 8.38332 16.1684C8.38423 16.2102 8.36582 16.2503 8.33313 16.2765L5.7103 18.3778C5.45334 18.5836 5.38515 18.9462 5.54978 19.2314L7.97688 23.4352C8.14155 23.7205 8.48981 23.8427 8.79661 23.723L11.926 22.5016C11.9651 22.4864 12.009 22.4905 12.0449 22.5123C12.1412 22.5709 12.2388 22.6274 12.3378 22.6818C12.3745 22.7019 12.4 22.7379 12.4063 22.7793L12.9132 26.0993C12.9629 26.4249 13.2429 26.6654 13.5722 26.6654H18.4264C18.7556 26.6654 19.0356 26.425 19.0854 26.0995L19.5933 22.7801C19.5997 22.7386 19.6252 22.7027 19.6619 22.6825C19.7614 22.6279 19.8596 22.5711 19.9564 22.5121C19.9923 22.4903 20.0362 22.4862 20.0754 22.5015L23.2035 23.7223C23.5103 23.842 23.8585 23.7198 24.0232 23.4346L26.4503 19.2307C26.6149 18.9456 26.5467 18.583 26.2898 18.3771L23.6679 16.2766C23.6352 16.2504 23.6168 16.2104 23.6177 16.1685C23.619 16.1122 23.6196 16.0558 23.6196 15.9993C23.6196 15.9429 23.619 15.8866 23.6177 15.8305C23.6168 15.7886 23.6353 15.7486 23.668 15.7224L26.2903 13.623C26.5474 13.4172 26.6156 13.0544 26.451 12.7692L24.0239 8.56537C23.8592 8.28023 23.5111 8.15797 23.2043 8.27757L20.0758 9.49734C20.0367 9.51258 19.9927 9.50846 19.9569 9.48664C19.8599 9.42762 19.7616 9.37071 19.6618 9.31596C19.6251 9.2958 19.5997 9.25984 19.5933 9.21843L19.0854 5.89915C19.0356 5.57369 18.7556 5.33333 18.4264 5.33333H13.5722ZM16.0001 20.2854C18.3672 20.2854 20.2862 18.3664 20.2862 15.9993C20.2862 13.6322 18.3672 11.7132 16.0001 11.7132C13.6329 11.7132 11.714 13.6322 11.714 15.9993C11.714 18.3664 13.6329 20.2854 16.0001 20.2854Z\" fill=\"currentColor\"/>`;\nvar Icon$104 = `<path d=\"M17.5091 24.6595C17.5091 25.2066 16.8864 25.5208 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9992 9.36923 19.9992H4.66667C4.29848 19.9992 4 19.7007 4 19.3325V12.6658C4 12.2976 4.29848 11.9992 4.66667 11.9992H9.37115C9.39967 11.9992 9.42745 11.99 9.45039 11.9731L16.4463 6.80363C16.8863 6.47845 17.5091 6.79262 17.5091 7.3398L17.5091 24.6595Z\" fill=\"currentColor\"/> <path d=\"M27.5091 9.33336C27.8773 9.33336 28.1758 9.63184 28.1758 10V22C28.1758 22.3682 27.8773 22.6667 27.5091 22.6667H26.1758C25.8076 22.6667 25.5091 22.3682 25.5091 22V10C25.5091 9.63184 25.8076 9.33336 26.1758 9.33336L27.5091 9.33336Z\" fill=\"currentColor\"/> <path d=\"M22.1758 12C22.544 12 22.8424 12.2985 22.8424 12.6667V19.3334C22.8424 19.7016 22.544 20 22.1758 20H20.8424C20.4743 20 20.1758 19.7016 20.1758 19.3334V12.6667C20.1758 12.2985 20.4743 12 20.8424 12H22.1758Z\" fill=\"currentColor\"/>`;\nvar Icon$105 = `<path d=\"M17.5091 24.6594C17.5091 25.2066 16.8864 25.5207 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9991 9.36923 19.9991H4.66667C4.29848 19.9991 4 19.7006 4 19.3324V12.6658C4 12.2976 4.29848 11.9991 4.66667 11.9991H9.37115C9.39967 11.9991 9.42745 11.99 9.45039 11.973L16.4463 6.80358C16.8863 6.4784 17.5091 6.79258 17.5091 7.33975L17.5091 24.6594Z\" fill=\"currentColor\"/> <path d=\"M22.8424 12.6667C22.8424 12.2985 22.544 12 22.1758 12H20.8424C20.4743 12 20.1758 12.2985 20.1758 12.6667V19.3333C20.1758 19.7015 20.4743 20 20.8424 20H22.1758C22.544 20 22.8424 19.7015 22.8424 19.3333V12.6667Z\" fill=\"currentColor\"/>`;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmbedProvider: () => (/* binding */ EmbedProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* __next_internal_client_entry_do_not_use__ EmbedProvider auto */ \n\nclass EmbedProvider {\n    constructor(_iframe){\n        this._iframe = _iframe;\n        this._src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.signal)(\"\");\n        /**\n     * Defines which referrer is sent when fetching the resource.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy}\n     */ this.referrerPolicy = null;\n        _iframe.setAttribute(\"frameBorder\", \"0\");\n        _iframe.setAttribute(\"aria-hidden\", \"true\");\n        _iframe.setAttribute(\"allow\", \"autoplay; fullscreen; encrypted-media; picture-in-picture; accelerometer; gyroscope\");\n        if (this.referrerPolicy !== null) {\n            _iframe.setAttribute(\"referrerpolicy\", this.referrerPolicy);\n        }\n    }\n    get iframe() {\n        return this._iframe;\n    }\n    setup() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(window, \"message\", this._onWindowMessage.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(this._iframe, \"load\", this._onLoad.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.effect)(this._watchSrc.bind(this));\n    }\n    _watchSrc() {\n        const src = this._src();\n        if (!src.length) {\n            this._iframe.setAttribute(\"src\", \"\");\n            return;\n        }\n        const params = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.peek)(()=>this._buildParams());\n        this._iframe.setAttribute(\"src\", (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__.appendParamsToURL)(src, params));\n    }\n    _postMessage(message, target) {\n        if (_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__.IS_SERVER) return;\n        this._iframe.contentWindow?.postMessage(JSON.stringify(message), target ?? \"*\");\n    }\n    _onWindowMessage(event) {\n        const origin = this._getOrigin(), isOriginMatch = (event.source === null || event.source === this._iframe?.contentWindow) && (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.isString)(origin) || origin === event.origin);\n        if (!isOriginMatch) return;\n        try {\n            const message = JSON.parse(event.data);\n            if (message) this._onMessage(message, event);\n            return;\n        } catch (e) {}\n        if (event.data) this._onMessage(event.data, event);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQktWaXotUUMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O21FQUVzRTtBQUNlO0FBRXJGLE1BQU1PO0lBQ0pDLFlBQVlDLE9BQU8sQ0FBRTtRQUNuQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLElBQUksR0FBR1IsNERBQU1BLENBQUM7UUFDbkI7Ozs7S0FJQyxHQUNELElBQUksQ0FBQ1MsY0FBYyxHQUFHO1FBQ3RCRixRQUFRRyxZQUFZLENBQUMsZUFBZTtRQUNwQ0gsUUFBUUcsWUFBWSxDQUFDLGVBQWU7UUFDcENILFFBQVFHLFlBQVksQ0FDbEIsU0FDQTtRQUVGLElBQUksSUFBSSxDQUFDRCxjQUFjLEtBQUssTUFBTTtZQUNoQ0YsUUFBUUcsWUFBWSxDQUFDLGtCQUFrQixJQUFJLENBQUNELGNBQWM7UUFDNUQ7SUFDRjtJQUNBLElBQUlFLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQ0osT0FBTztJQUNyQjtJQUNBSyxRQUFRO1FBQ05YLGlFQUFXQSxDQUFDWSxRQUFRLFdBQVcsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7UUFDOURkLGlFQUFXQSxDQUFDLElBQUksQ0FBQ00sT0FBTyxFQUFFLFFBQVEsSUFBSSxDQUFDUyxPQUFPLENBQUNELElBQUksQ0FBQyxJQUFJO1FBQ3hEYiw0REFBTUEsQ0FBQyxJQUFJLENBQUNlLFNBQVMsQ0FBQ0YsSUFBSSxDQUFDLElBQUk7SUFDakM7SUFDQUUsWUFBWTtRQUNWLE1BQU1DLE1BQU0sSUFBSSxDQUFDVixJQUFJO1FBQ3JCLElBQUksQ0FBQ1UsSUFBSUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDWixPQUFPLENBQUNHLFlBQVksQ0FBQyxPQUFPO1lBQ2pDO1FBQ0Y7UUFDQSxNQUFNVSxTQUFTakIsMERBQUlBLENBQUMsSUFBTSxJQUFJLENBQUNrQixZQUFZO1FBQzNDLElBQUksQ0FBQ2QsT0FBTyxDQUFDRyxZQUFZLENBQUMsT0FBT1osd0VBQWlCQSxDQUFDb0IsS0FBS0U7SUFDMUQ7SUFDQUUsYUFBYUMsT0FBTyxFQUFFQyxNQUFNLEVBQUU7UUFDNUIsSUFBSXpCLDREQUFTQSxFQUFFO1FBQ2YsSUFBSSxDQUFDUSxPQUFPLENBQUNrQixhQUFhLEVBQUVDLFlBQVlDLEtBQUtDLFNBQVMsQ0FBQ0wsVUFBVUMsVUFBVTtJQUM3RTtJQUNBVixpQkFBaUJlLEtBQUssRUFBRTtRQUN0QixNQUFNQyxTQUFTLElBQUksQ0FBQ0MsVUFBVSxJQUFJQyxnQkFBZ0IsQ0FBQ0gsTUFBTUksTUFBTSxLQUFLLFFBQVFKLE1BQU1JLE1BQU0sS0FBSyxJQUFJLENBQUMxQixPQUFPLEVBQUVrQixhQUFZLEtBQU8sRUFBQ3JCLDhEQUFRQSxDQUFDMEIsV0FBV0EsV0FBV0QsTUFBTUMsTUFBTTtRQUMxSyxJQUFJLENBQUNFLGVBQWU7UUFDcEIsSUFBSTtZQUNGLE1BQU1ULFVBQVVJLEtBQUtPLEtBQUssQ0FBQ0wsTUFBTU0sSUFBSTtZQUNyQyxJQUFJWixTQUFTLElBQUksQ0FBQ2EsVUFBVSxDQUFDYixTQUFTTTtZQUN0QztRQUNGLEVBQUUsT0FBT1EsR0FBRyxDQUNaO1FBQ0EsSUFBSVIsTUFBTU0sSUFBSSxFQUFFLElBQUksQ0FBQ0MsVUFBVSxDQUFDUCxNQUFNTSxJQUFJLEVBQUVOO0lBQzlDO0FBQ0Y7QUFFeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90anJvcHJvamV0bzEvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQktWaXotUUMuanM/NTQzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgeyBhcHBlbmRQYXJhbXNUb1VSTCwgSVNfU0VSVkVSIH0gZnJvbSAnLi92aWRzdGFjay1ObTlPSnk3eC5qcyc7XG5pbXBvcnQgeyBzaWduYWwsIGxpc3RlbkV2ZW50LCBlZmZlY3QsIHBlZWssIGlzU3RyaW5nIH0gZnJvbSAnLi92aWRzdGFjay0zaHMzLThpXy5qcyc7XG5cbmNsYXNzIEVtYmVkUHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcihfaWZyYW1lKSB7XG4gICAgdGhpcy5faWZyYW1lID0gX2lmcmFtZTtcbiAgICB0aGlzLl9zcmMgPSBzaWduYWwoXCJcIik7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB3aGljaCByZWZlcnJlciBpcyBzZW50IHdoZW4gZmV0Y2hpbmcgdGhlIHJlc291cmNlLlxuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxJRnJhbWVFbGVtZW50L3JlZmVycmVyUG9saWN5fVxuICAgICAqL1xuICAgIHRoaXMucmVmZXJyZXJQb2xpY3kgPSBudWxsO1xuICAgIF9pZnJhbWUuc2V0QXR0cmlidXRlKFwiZnJhbWVCb3JkZXJcIiwgXCIwXCIpO1xuICAgIF9pZnJhbWUuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgIF9pZnJhbWUuc2V0QXR0cmlidXRlKFxuICAgICAgXCJhbGxvd1wiLFxuICAgICAgXCJhdXRvcGxheTsgZnVsbHNjcmVlbjsgZW5jcnlwdGVkLW1lZGlhOyBwaWN0dXJlLWluLXBpY3R1cmU7IGFjY2VsZXJvbWV0ZXI7IGd5cm9zY29wZVwiXG4gICAgKTtcbiAgICBpZiAodGhpcy5yZWZlcnJlclBvbGljeSAhPT0gbnVsbCkge1xuICAgICAgX2lmcmFtZS5zZXRBdHRyaWJ1dGUoXCJyZWZlcnJlcnBvbGljeVwiLCB0aGlzLnJlZmVycmVyUG9saWN5KTtcbiAgICB9XG4gIH1cbiAgZ2V0IGlmcmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faWZyYW1lO1xuICB9XG4gIHNldHVwKCkge1xuICAgIGxpc3RlbkV2ZW50KHdpbmRvdywgXCJtZXNzYWdlXCIsIHRoaXMuX29uV2luZG93TWVzc2FnZS5iaW5kKHRoaXMpKTtcbiAgICBsaXN0ZW5FdmVudCh0aGlzLl9pZnJhbWUsIFwibG9hZFwiLCB0aGlzLl9vbkxvYWQuYmluZCh0aGlzKSk7XG4gICAgZWZmZWN0KHRoaXMuX3dhdGNoU3JjLmJpbmQodGhpcykpO1xuICB9XG4gIF93YXRjaFNyYygpIHtcbiAgICBjb25zdCBzcmMgPSB0aGlzLl9zcmMoKTtcbiAgICBpZiAoIXNyYy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2lmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCJcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHBlZWsoKCkgPT4gdGhpcy5fYnVpbGRQYXJhbXMoKSk7XG4gICAgdGhpcy5faWZyYW1lLnNldEF0dHJpYnV0ZShcInNyY1wiLCBhcHBlbmRQYXJhbXNUb1VSTChzcmMsIHBhcmFtcykpO1xuICB9XG4gIF9wb3N0TWVzc2FnZShtZXNzYWdlLCB0YXJnZXQpIHtcbiAgICBpZiAoSVNfU0VSVkVSKSByZXR1cm47XG4gICAgdGhpcy5faWZyYW1lLmNvbnRlbnRXaW5kb3c/LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpLCB0YXJnZXQgPz8gXCIqXCIpO1xuICB9XG4gIF9vbldpbmRvd01lc3NhZ2UoZXZlbnQpIHtcbiAgICBjb25zdCBvcmlnaW4gPSB0aGlzLl9nZXRPcmlnaW4oKSwgaXNPcmlnaW5NYXRjaCA9IChldmVudC5zb3VyY2UgPT09IG51bGwgfHwgZXZlbnQuc291cmNlID09PSB0aGlzLl9pZnJhbWU/LmNvbnRlbnRXaW5kb3cpICYmICghaXNTdHJpbmcob3JpZ2luKSB8fCBvcmlnaW4gPT09IGV2ZW50Lm9yaWdpbik7XG4gICAgaWYgKCFpc09yaWdpbk1hdGNoKSByZXR1cm47XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgaWYgKG1lc3NhZ2UpIHRoaXMuX29uTWVzc2FnZShtZXNzYWdlLCBldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIH1cbiAgICBpZiAoZXZlbnQuZGF0YSkgdGhpcy5fb25NZXNzYWdlKGV2ZW50LmRhdGEsIGV2ZW50KTtcbiAgfVxufVxuXG5leHBvcnQgeyBFbWJlZFByb3ZpZGVyIH07XG4iXSwibmFtZXMiOlsiYXBwZW5kUGFyYW1zVG9VUkwiLCJJU19TRVJWRVIiLCJzaWduYWwiLCJsaXN0ZW5FdmVudCIsImVmZmVjdCIsInBlZWsiLCJpc1N0cmluZyIsIkVtYmVkUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsIl9pZnJhbWUiLCJfc3JjIiwicmVmZXJyZXJQb2xpY3kiLCJzZXRBdHRyaWJ1dGUiLCJpZnJhbWUiLCJzZXR1cCIsIndpbmRvdyIsIl9vbldpbmRvd01lc3NhZ2UiLCJiaW5kIiwiX29uTG9hZCIsIl93YXRjaFNyYyIsInNyYyIsImxlbmd0aCIsInBhcmFtcyIsIl9idWlsZFBhcmFtcyIsIl9wb3N0TWVzc2FnZSIsIm1lc3NhZ2UiLCJ0YXJnZXQiLCJjb250ZW50V2luZG93IiwicG9zdE1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZXZlbnQiLCJvcmlnaW4iLCJfZ2V0T3JpZ2luIiwiaXNPcmlnaW5NYXRjaCIsInNvdXJjZSIsInBhcnNlIiwiZGF0YSIsIl9vbk1lc3NhZ2UiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BOkHoBGu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-BOkHoBGu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AirPlayButton: () => (/* binding */ AirPlayButton),\n/* harmony export */   Button: () => (/* binding */ Button),\n/* harmony export */   CaptionButton: () => (/* binding */ CaptionButton),\n/* harmony export */   ChapterTitle: () => (/* binding */ ChapterTitle),\n/* harmony export */   Chapters: () => (/* binding */ Chapters),\n/* harmony export */   FullscreenButton: () => (/* binding */ FullscreenButton),\n/* harmony export */   Gesture: () => (/* binding */ Gesture),\n/* harmony export */   Img: () => (/* binding */ Img),\n/* harmony export */   Item: () => (/* binding */ Item$1),\n/* harmony export */   Items: () => (/* binding */ Items),\n/* harmony export */   LiveButton: () => (/* binding */ LiveButton),\n/* harmony export */   MuteButton: () => (/* binding */ MuteButton),\n/* harmony export */   PIPButton: () => (/* binding */ PIPButton),\n/* harmony export */   PlayButton: () => (/* binding */ PlayButton),\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   Preview: () => (/* binding */ Preview),\n/* harmony export */   Progress: () => (/* binding */ Progress),\n/* harmony export */   Root: () => (/* binding */ Root$3),\n/* harmony export */   Root$1: () => (/* binding */ Root$2),\n/* harmony export */   Root$2: () => (/* binding */ Root),\n/* harmony export */   Root$3: () => (/* binding */ Root$1),\n/* harmony export */   Root$4: () => (/* binding */ Root$4),\n/* harmony export */   Root$5: () => (/* binding */ Root$5),\n/* harmony export */   SeekButton: () => (/* binding */ SeekButton),\n/* harmony export */   Steps: () => (/* binding */ Steps),\n/* harmony export */   Thumb: () => (/* binding */ Thumb),\n/* harmony export */   Thumbnail: () => (/* binding */ Thumbnail),\n/* harmony export */   Time: () => (/* binding */ Time),\n/* harmony export */   Track: () => (/* binding */ Track),\n/* harmony export */   TrackFill: () => (/* binding */ TrackFill),\n/* harmony export */   Value: () => (/* binding */ Value),\n/* harmony export */   menu: () => (/* binding */ menu),\n/* harmony export */   radioGroup: () => (/* binding */ radioGroup),\n/* harmony export */   slider: () => (/* binding */ slider),\n/* harmony export */   sliderCallbacks: () => (/* binding */ sliderCallbacks),\n/* harmony export */   thumbnail: () => (/* binding */ thumbnail),\n/* harmony export */   timeSlider: () => (/* binding */ timeSlider),\n/* harmony export */   useAudioOptions: () => (/* binding */ useAudioOptions),\n/* harmony export */   useCaptionOptions: () => (/* binding */ useCaptionOptions),\n/* harmony export */   useMediaContext: () => (/* binding */ useMediaContext),\n/* harmony export */   useMediaPlayer: () => (/* binding */ useMediaPlayer),\n/* harmony export */   volumeSlider: () => (/* binding */ volumeSlider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ AirPlayButton,Button,CaptionButton,ChapterTitle,Chapters,FullscreenButton,Gesture,Img,Item,Items,LiveButton,MuteButton,PIPButton,PlayButton,Portal,Preview,Progress,Root,Root$1,Root$2,Root$3,Root$4,Root$5,SeekButton,Steps,Thumb,Thumbnail,Time,Track,TrackFill,Value,menu,radioGroup,slider,sliderCallbacks,thumbnail,timeSlider,useAudioOptions,useCaptionOptions,useMediaContext,useMediaPlayer,volumeSlider auto */ \n\n\n\nfunction useMediaContext() {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useReactContext)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.mediaContext);\n}\nconst AirPlayButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.AirPlayButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst AirPlayButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AirPlayButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nAirPlayButton.displayName = \"AirPlayButton\";\nconst PlayButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.PlayButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst PlayButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PlayButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nPlayButton.displayName = \"PlayButton\";\nconst CaptionButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.CaptionButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst CaptionButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CaptionButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nCaptionButton.displayName = \"CaptionButton\";\nconst FullscreenButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.FullscreenButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst FullscreenButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FullscreenButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nFullscreenButton.displayName = \"FullscreenButton\";\nconst MuteButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.MuteButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst MuteButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MuteButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nMuteButton.displayName = \"MuteButton\";\nconst PIPButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.PIPButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst PIPButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PIPButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nPIPButton.displayName = \"PIPButton\";\nconst SeekButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.SeekButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst SeekButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SeekButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nSeekButton.displayName = \"SeekButton\";\nconst LiveButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.LiveButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst LiveButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LiveButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nLiveButton.displayName = \"LiveButton\";\nconst sliderCallbacks = [\n    \"onDragStart\",\n    \"onDragEnd\",\n    \"onDragValueChange\",\n    \"onValueChange\",\n    \"onPointerValueChange\"\n];\nconst SliderValueBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.SliderValueInstance);\nconst SliderBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.SliderInstance, {\n    events: sliderCallbacks\n});\nconst Root$5 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$5.displayName = \"Slider\";\nconst Thumb = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }));\nThumb.displayName = \"SliderThumb\";\nconst Track = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }));\nTrack.displayName = \"SliderTrack\";\nconst TrackFill = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }));\nTrackFill.displayName = \"SliderTrackFill\";\nconst PreviewBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.SliderPreviewInstance);\nconst Preview = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PreviewBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nPreview.displayName = \"SliderPreview\";\nconst Value = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SliderValueBridge, {\n        ...props\n    }, (props2, instance)=>{\n        const $text = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(()=>instance.getValueText(), instance);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: forwardRef\n        }, $text, children);\n    });\n});\nValue.displayName = \"SliderValue\";\nconst Steps = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const $min = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.useSliderState)(\"min\"), $max = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.useSliderState)(\"max\"), $step = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.useSliderState)(\"step\"), steps = ($max - $min) / $step;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }, Array.from({\n        length: Math.floor(steps) + 1\n    }).map((_, step)=>children(step)));\n});\nSteps.displayName = \"SliderSteps\";\nvar slider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: Preview,\n    Root: Root$5,\n    Steps: Steps,\n    Thumb: Thumb,\n    Track: Track,\n    TrackFill: TrackFill,\n    Value: Value\n});\nconst VolumeSliderBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.VolumeSliderInstance, {\n    events: sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$4 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VolumeSliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$4.displayName = \"VolumeSlider\";\nvar volumeSlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: Preview,\n    Root: Root$4,\n    Steps: Steps,\n    Thumb: Thumb,\n    Track: Track,\n    TrackFill: TrackFill,\n    Value: Value\n});\nfunction createVTTCue(startTime = 0, endTime = 0, text = \"\") {\n    if (_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.IS_SERVER) {\n        return {\n            startTime,\n            endTime,\n            text,\n            addEventListener: _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.noop,\n            removeEventListener: _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.noop,\n            dispatchEvent: _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.noop\n        };\n    }\n    return new window.VTTCue(startTime, endTime, text);\n}\nconst ThumbnailBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.ThumbnailInstance);\nconst Root$3 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThumbnailBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nRoot$3.displayName = \"Thumbnail\";\nconst Img = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const { src, img, crossOrigin } = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useStateContext)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.ThumbnailInstance.state), $src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(src), $crossOrigin = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(crossOrigin);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.img, {\n        crossOrigin: $crossOrigin,\n        ...props,\n        src: $src,\n        ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(img.set, forwardRef)\n    }, children);\n});\nImg.displayName = \"ThumbnailImg\";\nvar thumbnail = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Img: Img,\n    Root: Root$3\n});\nconst TimeSliderContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    $chapters: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.signal)(null)\n});\nTimeSliderContext.displayName = \"TimeSliderContext\";\nconst TimeSliderBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeSliderInstance, {\n    events: sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const $chapters = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.signal)(null), []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TimeSliderContext.Provider, {\n        value: {\n            $chapters\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TimeSliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children)));\n});\nRoot$2.displayName = \"TimeSlider\";\nconst SliderChaptersBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.SliderChaptersInstance);\nconst Chapters = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SliderChaptersBridge, {\n        ...props\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChapterTracks, {\n            instance\n        }, children)));\n});\nChapters.displayName = \"SliderChapters\";\nfunction ChapterTracks({ instance, children }) {\n    const $cues = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(()=>instance.cues, instance), refs = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]), emptyCue = react__WEBPACK_IMPORTED_MODULE_0__.useRef(), { $chapters } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TimeSliderContext);\n    if (!emptyCue.current) {\n        emptyCue.current = createVTTCue();\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        $chapters.set(instance);\n        return ()=>void $chapters.set(null);\n    }, [\n        instance\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        instance.setRefs(refs.current);\n    }, [\n        $cues\n    ]);\n    return children($cues.length ? $cues : [\n        emptyCue.current\n    ], (el)=>{\n        if (!el) {\n            refs.current.length = 0;\n            return;\n        }\n        refs.current.push(el);\n    });\n}\nChapterTracks.displayName = \"SliderChapterTracks\";\nconst ChapterTitle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const { $chapters } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TimeSliderContext), [title, setTitle] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.effect)(()=>{\n            const chapters = $chapters(), cue = chapters?.activePointerCue || chapters?.activeCue;\n            setTitle(cue?.text || \"\");\n        });\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }, title, children);\n});\nChapterTitle.displayName = \"SliderChapterTitle\";\nconst Progress = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }));\nProgress.displayName = \"SliderProgress\";\nconst SliderThumbnailBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.SliderThumbnailInstance);\nconst ThumbnailRoot = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SliderThumbnailBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nThumbnailRoot.displayName = \"SliderThumbnail\";\nconst Thumbnail = {\n    Root: ThumbnailRoot,\n    Img: Img\n};\nconst VideoBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.SliderVideoInstance, {\n    events: [\n        \"onCanPlay\",\n        \"onError\"\n    ]\n});\nconst Video = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VideoBridge, {\n        ...props\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VideoProvider, {\n            ...props2,\n            instance,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nVideo.displayName = \"SliderVideo\";\nconst VideoProvider = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ instance, children, ...props }, forwardRef)=>{\n    const { canLoad } = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useStateContext)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.mediaState), { src, video, crossOrigin } = instance.$state, $src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(src), $canLoad = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(canLoad), $crossOrigin = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(crossOrigin);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.video, {\n        style: {\n            maxWidth: \"unset\"\n        },\n        ...props,\n        src: $src || void 0,\n        muted: true,\n        playsInline: true,\n        preload: $canLoad ? \"auto\" : \"none\",\n        crossOrigin: $crossOrigin || void 0,\n        ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(video.set, forwardRef)\n    }, children);\n});\nVideoProvider.displayName = \"SliderVideoProvider\";\nvar timeSlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    ChapterTitle: ChapterTitle,\n    Chapters: Chapters,\n    Preview: Preview,\n    Progress: Progress,\n    Root: Root$2,\n    Steps: Steps,\n    Thumb: Thumb,\n    Thumbnail: Thumbnail,\n    Track: Track,\n    TrackFill: TrackFill,\n    Value: Value,\n    Video: Video\n});\nconst RadioGroupBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.RadioGroupInstance, {\n    events: [\n        \"onChange\"\n    ]\n});\nconst Root$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RadioGroupBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$1.displayName = \"RadioGroup\";\nconst ItemBridge$1 = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.RadioInstance, {\n    events: [\n        \"onChange\",\n        \"onSelect\"\n    ]\n});\nconst Item$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ItemBridge$1, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nItem$1.displayName = \"RadioItem\";\nvar radioGroup = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Item: Item$1,\n    Root: Root$1\n});\nconst IS_SERVER = typeof document === \"undefined\";\nconst MenuBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.MenuInstance, {\n    events: [\n        \"onOpen\",\n        \"onClose\"\n    ],\n    domEventsRegex: /^onMedia/\n});\nconst Root = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MenuBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            style: {\n                display: !instance.isSubmenu ? \"contents\" : void 0,\n                ...props2.style\n            }\n        }, children));\n});\nRoot.displayName = \"Menu\";\nconst ButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.MenuButtonInstance, {\n    events: [\n        \"onSelect\"\n    ]\n});\nconst Button = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nButton.displayName = \"MenuButton\";\nconst Portal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ container = null, disabled = false, children, ...props }, forwardRef)=>{\n    let fullscreen = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.useMediaState)(\"fullscreen\"), shouldPortal = disabled === \"fullscreen\" ? !fullscreen : !disabled;\n    const target = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (IS_SERVER) return null;\n        const node = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isString)(container) ? document.querySelector(container) : container;\n        return node ?? document.body;\n    }, [\n        container\n    ]);\n    return !target || !shouldPortal ? children : /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        style: {\n            display: \"contents\",\n            ...props.style\n        },\n        ref: forwardRef\n    }, children), target);\n});\nPortal.displayName = \"MenuPortal\";\nconst ItemsBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.MenuItemsInstance);\nconst Items = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ItemsBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nItems.displayName = \"MenuItems\";\nconst ItemBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.MenuItemInstance);\nconst Item = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ItemBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nItem.displayName = \"MenuItem\";\nvar menu = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Button: Button,\n    Content: Items,\n    Item: Item,\n    Items: Items,\n    Portal: Portal,\n    Radio: Item$1,\n    RadioGroup: Root$1,\n    Root: Root\n});\nconst GestureBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.GestureInstance, {\n    events: [\n        \"onWillTrigger\",\n        \"onTrigger\"\n    ]\n});\nconst Gesture = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GestureBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children));\n});\nGesture.displayName = \"Gesture\";\nconst TimeBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeInstance);\nconst Time = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TimeBridge, {\n        ...props\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TimeText, {\n            ...props2,\n            instance,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nTime.displayName = \"Time\";\nconst TimeText = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ instance, children, ...props }, forwardRef)=>{\n    const { timeText } = instance.$state, $timeText = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(timeText);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }, $timeText, children);\n});\nTimeText.displayName = \"TimeText\";\nfunction useMediaPlayer() {\n    const context = useMediaContext();\n    if (!context) {\n        throw Error(\"[vidstack] no media context was found - was this called outside of `<MediaPlayer>`?\");\n    }\n    return context?.player || null;\n}\nfunction useAudioOptions() {\n    const media = useMediaContext(), { audioTracks, audioTrack } = media.$state, $audioTracks = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(audioTracks);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(audioTrack);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const options = $audioTracks.map((track)=>({\n                track,\n                label: track.label,\n                value: getTrackValue$1(track),\n                get selected () {\n                    return audioTrack() === track;\n                },\n                select (trigger) {\n                    const index = audioTracks().indexOf(track);\n                    if (index >= 0) media.remote.changeAudioTrack(index, trigger);\n                }\n            }));\n        Object.defineProperty(options, \"disabled\", {\n            get () {\n                return options.length <= 1;\n            }\n        });\n        Object.defineProperty(options, \"selectedTrack\", {\n            get () {\n                return audioTrack();\n            }\n        });\n        Object.defineProperty(options, \"selectedValue\", {\n            get () {\n                const track = audioTrack();\n                return track ? getTrackValue$1(track) : void 0;\n            }\n        });\n        return options;\n    }, [\n        $audioTracks\n    ]);\n}\nfunction getTrackValue$1(track) {\n    return track.label.toLowerCase();\n}\nfunction useCaptionOptions({ off = true } = {}) {\n    const media = useMediaContext(), { textTracks, textTrack } = media.$state, $textTracks = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(textTracks);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(textTrack);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const captionTracks = $textTracks.filter(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.isTrackCaptionKind), options = captionTracks.map((track)=>({\n                track,\n                label: track.label,\n                value: getTrackValue(track),\n                get selected () {\n                    return textTrack() === track;\n                },\n                select (trigger) {\n                    const index = textTracks().indexOf(track);\n                    if (index >= 0) media.remote.changeTextTrackMode(index, \"showing\", trigger);\n                }\n            }));\n        if (off) {\n            options.unshift({\n                track: null,\n                label: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isString)(off) ? off : \"Off\",\n                value: \"off\",\n                get selected () {\n                    return !textTrack();\n                },\n                select (trigger) {\n                    media.remote.toggleCaptions(trigger);\n                }\n            });\n        }\n        Object.defineProperty(options, \"disabled\", {\n            get () {\n                return !captionTracks.length;\n            }\n        });\n        Object.defineProperty(options, \"selectedTrack\", {\n            get () {\n                return textTrack();\n            }\n        });\n        Object.defineProperty(options, \"selectedValue\", {\n            get () {\n                const track = textTrack();\n                return track ? getTrackValue(track) : \"off\";\n            }\n        });\n        return options;\n    }, [\n        $textTracks\n    ]);\n}\nfunction getTrackValue(track) {\n    return track.id + \":\" + track.kind + \"-\" + track.label.toLowerCase();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BOkHoBGu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BVbKfF2_.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-BVbKfF2_.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemotionPoster: () => (/* binding */ RemotionPoster),\n/* harmony export */   RemotionSliderThumbnail: () => (/* binding */ RemotionSliderThumbnail),\n/* harmony export */   RemotionThumbnail: () => (/* binding */ RemotionThumbnail)\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* __next_internal_client_entry_do_not_use__ RemotionPoster,RemotionSliderThumbnail,RemotionThumbnail auto */ \nconst RemotionThumbnail = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.signal)(null);\nconst RemotionSliderThumbnail = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.signal)(null);\nconst RemotionPoster = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_0__.signal)(null);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQlZiS2ZGMl8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs4R0FFZ0Q7QUFFaEQsTUFBTUMsb0JBQW9CRCw0REFBTUEsQ0FDOUI7QUFFRixNQUFNRSwwQkFBMEJGLDREQUFNQSxDQUFDO0FBQ3ZDLE1BQU1HLGlCQUFpQkgsNERBQU1BLENBQzNCO0FBR29FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGpyb3Byb2pldG8xLy4vbm9kZV9tb2R1bGVzL0B2aWRzdGFjay9yZWFjdC9kZXYvY2h1bmtzL3ZpZHN0YWNrLUJWYktmRjJfLmpzP2NlMWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0IHsgc2lnbmFsIH0gZnJvbSAnLi92aWRzdGFjay0zaHMzLThpXy5qcyc7XG5cbmNvbnN0IFJlbW90aW9uVGh1bWJuYWlsID0gc2lnbmFsKFxuICBudWxsXG4pO1xuY29uc3QgUmVtb3Rpb25TbGlkZXJUaHVtYm5haWwgPSBzaWduYWwobnVsbCk7XG5jb25zdCBSZW1vdGlvblBvc3RlciA9IHNpZ25hbChcbiAgbnVsbFxuKTtcblxuZXhwb3J0IHsgUmVtb3Rpb25Qb3N0ZXIsIFJlbW90aW9uU2xpZGVyVGh1bWJuYWlsLCBSZW1vdGlvblRodW1ibmFpbCB9O1xuIl0sIm5hbWVzIjpbInNpZ25hbCIsIlJlbW90aW9uVGh1bWJuYWlsIiwiUmVtb3Rpb25TbGlkZXJUaHVtYm5haWwiLCJSZW1vdGlvblBvc3RlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BVbKfF2_.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Bby4qdTP.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Bby4qdTP.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeProvider: () => (/* binding */ YouTubeProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_BKViz_QC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-BKViz-QC.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js\");\n/* harmony import */ var _vidstack_Zc3I7oOd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vidstack-Zc3I7oOd.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ YouTubeProvider auto */ \n\n\n\n\n\nconst YouTubePlayerState = {\n    _Unstarted: -1,\n    _Ended: 0,\n    _Playing: 1,\n    _Paused: 2,\n    _Buffering: 3,\n    _Cued: 5\n};\nclass YouTubeProvider extends _vidstack_BKViz_QC_js__WEBPACK_IMPORTED_MODULE_1__.EmbedProvider {\n    constructor(iframe, _ctx){\n        super(iframe);\n        this._ctx = _ctx;\n        this.$$PROVIDER_TYPE = \"YOUTUBE\";\n        this.scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createScope)();\n        this._videoId = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.signal)(\"\");\n        this._state = -1;\n        this._currentSrc = null;\n        this._seekingTimer = -1;\n        this._pausedSeeking = false;\n        this._promises = /* @__PURE__ */ new Map();\n        /**\n     * Sets the player's interface language. The parameter value is an ISO 639-1 two-letter\n     * language code or a fully specified locale. For example, fr and fr-ca are both valid values.\n     * Other language input codes, such as IETF language tags (BCP 47) might also be handled properly.\n     *\n     * The interface language is used for tooltips in the player and also affects the default caption\n     * track. Note that YouTube might select a different caption track language for a particular\n     * user based on the user's individual language preferences and the availability of caption tracks.\n     *\n     * @defaultValue 'en'\n     */ this.language = \"en\";\n        this.color = \"red\";\n        /**\n     * Whether cookies should be enabled on the embed. This is turned off by default to be\n     * GDPR-compliant.\n     *\n     * @defaultValue `false`\n     */ this.cookies = false;\n    }\n    get _notify() {\n        return this._ctx.delegate._notify;\n    }\n    get currentSrc() {\n        return this._currentSrc;\n    }\n    get type() {\n        return \"youtube\";\n    }\n    get videoId() {\n        return this._videoId();\n    }\n    preconnect() {\n        (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.preconnect)(this._getOrigin());\n    }\n    setup() {\n        super.setup();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this._watchVideoId.bind(this));\n        this._notify(\"provider-setup\", this);\n    }\n    destroy() {\n        this._reset();\n        const message = \"provider destroyed\";\n        for (const promises of this._promises.values()){\n            for (const { reject } of promises)reject(message);\n        }\n        this._promises.clear();\n    }\n    async play() {\n        return this._remote(\"playVideo\");\n    }\n    _playFail(message) {\n        this._getPromise(\"playVideo\")?.reject(message);\n    }\n    async pause() {\n        return this._remote(\"pauseVideo\");\n    }\n    _pauseFail(message) {\n        this._getPromise(\"pauseVideo\")?.reject(message);\n    }\n    setMuted(muted) {\n        if (muted) this._remote(\"mute\");\n        else this._remote(\"unMute\");\n    }\n    setCurrentTime(time) {\n        this._pausedSeeking = this._ctx.$state.paused();\n        this._remote(\"seekTo\", time);\n        this._notify(\"seeking\", time);\n    }\n    setVolume(volume) {\n        this._remote(\"setVolume\", volume * 100);\n    }\n    setPlaybackRate(rate) {\n        this._remote(\"setPlaybackRate\", rate);\n    }\n    async loadSource(src) {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isString)(src.src)) {\n            this._currentSrc = null;\n            this._videoId.set(\"\");\n            return;\n        }\n        const videoId = (0,_vidstack_Zc3I7oOd_js__WEBPACK_IMPORTED_MODULE_4__.resolveYouTubeVideoId)(src.src);\n        this._videoId.set(videoId ?? \"\");\n        this._currentSrc = src;\n    }\n    _getOrigin() {\n        return !this.cookies ? \"https://www.youtube-nocookie.com\" : \"https://www.youtube.com\";\n    }\n    _watchVideoId() {\n        this._reset();\n        const videoId = this._videoId();\n        if (!videoId) {\n            this._src.set(\"\");\n            return;\n        }\n        this._src.set(`${this._getOrigin()}/embed/${videoId}`);\n        this._notify(\"load-start\");\n    }\n    _buildParams() {\n        const { keyDisabled } = this._ctx.$props, { muted, playsInline, nativeControls } = this._ctx.$state, showControls = nativeControls();\n        return {\n            autoplay: 0,\n            cc_lang_pref: this.language,\n            cc_load_policy: showControls ? 1 : void 0,\n            color: this.color,\n            controls: showControls ? 1 : 0,\n            disablekb: !showControls || keyDisabled() ? 1 : 0,\n            enablejsapi: 1,\n            fs: 1,\n            hl: this.language,\n            iv_load_policy: showControls ? 1 : 3,\n            mute: muted() ? 1 : 0,\n            playsinline: playsInline() ? 1 : 0\n        };\n    }\n    _remote(command, arg) {\n        let promise = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.deferredPromise)(), promises = this._promises.get(command);\n        if (!promises) this._promises.set(command, promises = []);\n        promises.push(promise);\n        this._postMessage({\n            event: \"command\",\n            func: command,\n            args: arg ? [\n                arg\n            ] : void 0\n        });\n        return promise.promise;\n    }\n    _onLoad() {\n        window.setTimeout(()=>this._postMessage({\n                event: \"listening\"\n            }), 100);\n    }\n    _onReady(trigger) {\n        this._notify(\"loaded-metadata\");\n        this._notify(\"loaded-data\");\n        this._ctx.delegate._ready(void 0, trigger);\n    }\n    _onPause(trigger) {\n        this._getPromise(\"pauseVideo\")?.resolve();\n        this._notify(\"pause\", void 0, trigger);\n    }\n    _onTimeUpdate(time, trigger) {\n        const { duration, realCurrentTime } = this._ctx.$state, hasEnded = this._state === YouTubePlayerState._Ended, boundTime = hasEnded ? duration() : time;\n        this._notify(\"time-change\", boundTime, trigger);\n        if (!hasEnded && Math.abs(boundTime - realCurrentTime()) > 1) {\n            this._notify(\"seeking\", boundTime, trigger);\n        }\n    }\n    _onProgress(buffered, seekable, trigger) {\n        const detail = {\n            buffered: new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, buffered),\n            seekable\n        };\n        this._notify(\"progress\", detail, trigger);\n        const { seeking, realCurrentTime } = this._ctx.$state;\n        if (seeking() && buffered > realCurrentTime()) {\n            this._onSeeked(trigger);\n        }\n    }\n    _onSeeked(trigger) {\n        const { paused, realCurrentTime } = this._ctx.$state;\n        window.clearTimeout(this._seekingTimer);\n        this._seekingTimer = window.setTimeout(()=>{\n            this._notify(\"seeked\", realCurrentTime(), trigger);\n            this._seekingTimer = -1;\n        }, paused() ? 100 : 0);\n        this._pausedSeeking = false;\n    }\n    _onEnded(trigger) {\n        const { seeking } = this._ctx.$state;\n        if (seeking()) this._onSeeked(trigger);\n        this._notify(\"pause\", void 0, trigger);\n        this._notify(\"end\", void 0, trigger);\n    }\n    _onStateChange(state, trigger) {\n        const { started, paused, seeking } = this._ctx.$state, isPlaying = state === YouTubePlayerState._Playing, isBuffering = state === YouTubePlayerState._Buffering, isPendingPlay = !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(this._getPromise(\"playVideo\")), isPlay = (paused() || isPendingPlay) && (isBuffering || isPlaying);\n        if (isBuffering) this._notify(\"waiting\", void 0, trigger);\n        if (seeking() && isPlaying) {\n            this._onSeeked(trigger);\n        }\n        if (!started() && isPlay && this._pausedSeeking) {\n            this._playFail(\"invalid internal play operation\");\n            if (isPlaying) {\n                this.pause();\n                this._pausedSeeking = false;\n            }\n            return;\n        }\n        if (isPlay) {\n            this._getPromise(\"playVideo\")?.resolve();\n            this._notify(\"play\", void 0, trigger);\n        }\n        switch(state){\n            case YouTubePlayerState._Unstarted:\n                this._playFail(\"provider rejected\");\n                this._pauseFail(\"provider rejected\");\n                this._notify(\"pause\", void 0, trigger);\n                break;\n            case YouTubePlayerState._Cued:\n                this._onReady(trigger);\n                break;\n            case YouTubePlayerState._Playing:\n                this._notify(\"playing\", void 0, trigger);\n                break;\n            case YouTubePlayerState._Paused:\n                this._onPause(trigger);\n                break;\n            case YouTubePlayerState._Ended:\n                this._onEnded(trigger);\n                break;\n        }\n        this._state = state;\n    }\n    _onMessage({ info }, event) {\n        if (!info) return;\n        const { title, intrinsicDuration, playbackRate } = this._ctx.$state;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(info.videoData) && info.videoData.title !== title()) {\n            this._notify(\"title-change\", info.videoData.title, event);\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.duration) && info.duration !== intrinsicDuration()) {\n            if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.videoLoadedFraction)) {\n                const buffered = info.progressState?.loaded ?? info.videoLoadedFraction * info.duration, seekable = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, info.duration);\n                this._onProgress(buffered, seekable, event);\n            }\n            this._notify(\"duration-change\", info.duration, event);\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.playbackRate) && info.playbackRate !== playbackRate()) {\n            this._notify(\"rate-change\", info.playbackRate, event);\n        }\n        if (info.progressState) {\n            const { current, seekableStart, seekableEnd, loaded, duration: _duration } = info.progressState;\n            this._onTimeUpdate(current, event);\n            this._onProgress(loaded, new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(seekableStart, seekableEnd), event);\n            if (_duration !== intrinsicDuration()) {\n                this._notify(\"duration-change\", _duration, event);\n            }\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.volume) && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(info.muted)) {\n            const detail = {\n                muted: info.muted,\n                volume: info.volume / 100\n            };\n            this._notify(\"volume-change\", detail, event);\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.playerState) && info.playerState !== this._state) {\n            this._onStateChange(info.playerState, event);\n        }\n    }\n    _reset() {\n        this._state = -1;\n        this._seekingTimer = -1;\n        this._pausedSeeking = false;\n    }\n    _getPromise(command) {\n        return this._promises.get(command)?.shift();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Bby4qdTP.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-C4FuHl6d.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-C4FuHl6d.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VimeoProvider: () => (/* binding */ VimeoProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_BKViz_QC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-BKViz-QC.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BKViz-QC.js\");\n/* harmony import */ var _vidstack_krOAtKMi_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vidstack-krOAtKMi.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ VimeoProvider auto */ \n\n\n\n\n\nconst trackedVimeoEvents = [\n    \"bufferend\",\n    \"bufferstart\",\n    // 'cuechange',\n    \"durationchange\",\n    \"ended\",\n    \"enterpictureinpicture\",\n    \"error\",\n    \"fullscreenchange\",\n    \"leavepictureinpicture\",\n    \"loaded\",\n    // 'loadeddata',\n    // 'loadedmetadata',\n    // 'loadstart',\n    \"playProgress\",\n    \"loadProgress\",\n    \"pause\",\n    \"play\",\n    \"playbackratechange\",\n    // 'progress',\n    \"qualitychange\",\n    \"seeked\",\n    \"seeking\",\n    // 'texttrackchange',\n    \"timeupdate\",\n    \"volumechange\",\n    \"waiting\"\n];\nclass VimeoProvider extends _vidstack_BKViz_QC_js__WEBPACK_IMPORTED_MODULE_1__.EmbedProvider {\n    constructor(iframe, _ctx){\n        super(iframe);\n        this._ctx = _ctx;\n        this.$$PROVIDER_TYPE = \"VIMEO\";\n        this.scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.createScope)();\n        this._videoId = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.signal)(\"\");\n        this._pro = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.signal)(false);\n        this._hash = null;\n        this._currentSrc = null;\n        this._fullscreenActive = false;\n        this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, 0);\n        this._timeRAF = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.RAFLoop(this._onAnimationFrame.bind(this));\n        this._currentCue = null;\n        this._chaptersTrack = null;\n        this._promises = /* @__PURE__ */ new Map();\n        this._videoInfoPromise = null;\n        /**\n     * Whether tracking session data should be enabled on the embed, including cookies and analytics.\n     * This is turned off by default to be GDPR-compliant.\n     *\n     * @defaultValue `false`\n     */ this.cookies = false;\n        this.title = true;\n        this.byline = true;\n        this.portrait = true;\n        this.color = \"00ADEF\";\n        // Embed will sometimes dispatch 0 at end of playback.\n        this._preventTimeUpdates = false;\n        const self = this;\n        this.fullscreen = {\n            get active () {\n                return self._fullscreenActive;\n            },\n            supported: true,\n            enter: ()=>this._remote(\"requestFullscreen\"),\n            exit: ()=>this._remote(\"exitFullscreen\")\n        };\n    }\n    get _notify() {\n        return this._ctx.delegate._notify;\n    }\n    get type() {\n        return \"vimeo\";\n    }\n    get currentSrc() {\n        return this._currentSrc;\n    }\n    get videoId() {\n        return this._videoId();\n    }\n    get hash() {\n        return this._hash;\n    }\n    get isPro() {\n        return this._pro();\n    }\n    preconnect() {\n        (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.preconnect)(this._getOrigin());\n    }\n    setup() {\n        super.setup();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this._watchVideoId.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this._watchVideoInfo.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this._watchPro.bind(this));\n        this._notify(\"provider-setup\", this);\n    }\n    destroy() {\n        this._reset();\n        this.fullscreen = void 0;\n        const message = \"provider destroyed\";\n        for (const promises of this._promises.values()){\n            for (const { reject } of promises)reject(message);\n        }\n        this._promises.clear();\n        this._remote(\"destroy\");\n    }\n    async play() {\n        return this._remote(\"play\");\n    }\n    async pause() {\n        return this._remote(\"pause\");\n    }\n    setMuted(muted) {\n        this._remote(\"setMuted\", muted);\n    }\n    setCurrentTime(time) {\n        this._remote(\"seekTo\", time);\n        this._notify(\"seeking\", time);\n    }\n    setVolume(volume) {\n        this._remote(\"setVolume\", volume);\n        this._remote(\"setMuted\", (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.peek)(this._ctx.$state.muted));\n    }\n    setPlaybackRate(rate) {\n        this._remote(\"setPlaybackRate\", rate);\n    }\n    async loadSource(src) {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isString)(src.src)) {\n            this._currentSrc = null;\n            this._hash = null;\n            this._videoId.set(\"\");\n            return;\n        }\n        const { videoId, hash } = (0,_vidstack_krOAtKMi_js__WEBPACK_IMPORTED_MODULE_4__.resolveVimeoVideoId)(src.src);\n        this._videoId.set(videoId ?? \"\");\n        this._hash = hash ?? null;\n        this._currentSrc = src;\n    }\n    _watchVideoId() {\n        this._reset();\n        const videoId = this._videoId();\n        if (!videoId) {\n            this._src.set(\"\");\n            return;\n        }\n        this._src.set(`${this._getOrigin()}/video/${videoId}`);\n        this._notify(\"load-start\");\n    }\n    _watchVideoInfo() {\n        const videoId = this._videoId();\n        if (!videoId) return;\n        const promise = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.deferredPromise)(), abort = new AbortController();\n        this._videoInfoPromise = promise;\n        (0,_vidstack_krOAtKMi_js__WEBPACK_IMPORTED_MODULE_4__.getVimeoVideoInfo)(videoId, abort, this._hash).then((info)=>{\n            promise.resolve(info);\n        }).catch((e)=>{\n            promise.reject();\n            {\n                this._ctx.logger?.warnGroup(`Failed to fetch vimeo video info for id \\`${videoId}\\`.`).labelledLog(\"Error\", e).dispatch();\n            }\n        });\n        return ()=>{\n            promise.reject();\n            abort.abort();\n        };\n    }\n    _watchPro() {\n        const isPro = this._pro(), { $state, qualities } = this._ctx;\n        $state.canSetPlaybackRate.set(isPro);\n        qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.ListSymbol._setReadonly](!isPro);\n        if (isPro) {\n            return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.listenEvent)(qualities, \"change\", ()=>{\n                if (qualities.auto) return;\n                const id = qualities.selected?.id;\n                if (id) this._remote(\"setQuality\", id);\n            });\n        }\n    }\n    _getOrigin() {\n        return \"https://player.vimeo.com\";\n    }\n    _buildParams() {\n        const { keyDisabled } = this._ctx.$props, { playsInline, nativeControls } = this._ctx.$state, showControls = nativeControls();\n        return {\n            title: this.title,\n            byline: this.byline,\n            color: this.color,\n            portrait: this.portrait,\n            controls: showControls,\n            h: this.hash,\n            keyboard: showControls && !keyDisabled(),\n            transparent: true,\n            playsinline: playsInline(),\n            dnt: !this.cookies\n        };\n    }\n    _onAnimationFrame() {\n        this._remote(\"getCurrentTime\");\n    }\n    _onTimeUpdate(time, trigger) {\n        if (this._preventTimeUpdates && time === 0) return;\n        const { realCurrentTime, realDuration, paused, bufferedEnd } = this._ctx.$state;\n        if (realCurrentTime() === time) return;\n        const prevTime = realCurrentTime();\n        this._notify(\"time-change\", time, trigger);\n        if (Math.abs(prevTime - time) > 1.5) {\n            this._notify(\"seeking\", time, trigger);\n            if (!paused() && bufferedEnd() < time) {\n                this._notify(\"waiting\", void 0, trigger);\n            }\n        }\n        if (realDuration() - time < 0.01) {\n            this._notify(\"end\", void 0, trigger);\n            this._preventTimeUpdates = true;\n            setTimeout(()=>{\n                this._preventTimeUpdates = false;\n            }, 500);\n        }\n    }\n    _onSeeked(time, trigger) {\n        this._notify(\"seeked\", time, trigger);\n    }\n    _onLoaded(trigger) {\n        const videoId = this._videoId();\n        this._videoInfoPromise?.promise.then((info)=>{\n            if (!info) return;\n            const { title, poster, duration, pro } = info;\n            this._pro.set(pro);\n            this._notify(\"title-change\", title, trigger);\n            this._notify(\"poster-change\", poster, trigger);\n            this._notify(\"duration-change\", duration, trigger);\n            this._onReady(duration, trigger);\n        }).catch(()=>{\n            if (videoId !== this._videoId()) return;\n            this._remote(\"getVideoTitle\");\n            this._remote(\"getDuration\");\n        });\n    }\n    _onReady(duration, trigger) {\n        const { nativeControls } = this._ctx.$state, showEmbedControls = nativeControls();\n        this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, duration);\n        const detail = {\n            buffered: new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, 0),\n            seekable: this._seekableRange,\n            duration\n        };\n        this._ctx.delegate._ready(detail, trigger);\n        if (!showEmbedControls) {\n            this._remote(\"_hideOverlay\");\n        }\n        this._remote(\"getQualities\");\n        this._remote(\"getChapters\");\n    }\n    _onMethod(method, data, trigger) {\n        switch(method){\n            case \"getVideoTitle\":\n                const videoTitle = data;\n                this._notify(\"title-change\", videoTitle, trigger);\n                break;\n            case \"getDuration\":\n                const duration = data;\n                if (!this._ctx.$state.canPlay()) {\n                    this._onReady(duration, trigger);\n                } else {\n                    this._notify(\"duration-change\", duration, trigger);\n                }\n                break;\n            case \"getCurrentTime\":\n                this._onTimeUpdate(data, trigger);\n                break;\n            case \"getBuffered\":\n                if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(data) && data.length) {\n                    this._onLoadProgress(data[data.length - 1][1], trigger);\n                }\n                break;\n            case \"setMuted\":\n                this._onVolumeChange((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.peek)(this._ctx.$state.volume), data, trigger);\n                break;\n            case \"getChapters\":\n                this._onChaptersChange(data);\n                break;\n            case \"getQualities\":\n                this._onQualitiesChange(data, trigger);\n                break;\n        }\n        this._getPromise(method)?.resolve();\n    }\n    _attachListeners() {\n        for (const type of trackedVimeoEvents){\n            this._remote(\"addEventListener\", type);\n        }\n    }\n    _onPause(trigger) {\n        this._timeRAF._stop();\n        this._notify(\"pause\", void 0, trigger);\n    }\n    _onPlay(trigger) {\n        this._timeRAF._start();\n        this._notify(\"play\", void 0, trigger);\n    }\n    _onPlayProgress(trigger) {\n        const { paused } = this._ctx.$state;\n        if (!paused() && !this._preventTimeUpdates) {\n            this._notify(\"playing\", void 0, trigger);\n        }\n    }\n    _onLoadProgress(buffered, trigger) {\n        const detail = {\n            buffered: new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, buffered),\n            seekable: this._seekableRange\n        };\n        this._notify(\"progress\", detail, trigger);\n    }\n    _onBufferStart(trigger) {\n        this._notify(\"waiting\", void 0, trigger);\n    }\n    _onBufferEnd(trigger) {\n        const { paused } = this._ctx.$state;\n        if (!paused()) this._notify(\"playing\", void 0, trigger);\n    }\n    _onWaiting(trigger) {\n        const { paused } = this._ctx.$state;\n        if (paused()) {\n            this._notify(\"play\", void 0, trigger);\n        }\n        this._notify(\"waiting\", void 0, trigger);\n    }\n    _onVolumeChange(volume, muted, trigger) {\n        const detail = {\n            volume,\n            muted\n        };\n        this._notify(\"volume-change\", detail, trigger);\n    }\n    // protected _onTextTrackChange(track: VimeoTextTrack, trigger: Event) {\n    //   const textTrack = this._ctx.textTracks.toArray().find((t) => t.language === track.language);\n    //   if (textTrack) textTrack.mode = track.mode;\n    // }\n    // protected _onTextTracksChange(tracks: VimeoTextTrack[], trigger: Event) {\n    //   for (const init of tracks) {\n    //     const textTrack = new TextTrack({\n    //       ...init,\n    //       label: init.label.replace('auto-generated', 'auto'),\n    //     });\n    //     textTrack[TextTrackSymbol._readyState] = 2;\n    //     this._ctx.textTracks.add(textTrack, trigger);\n    //     textTrack.setMode(init.mode, trigger);\n    //   }\n    // }\n    // protected _onCueChange(cue: VimeoTextCue, trigger: Event) {\n    //   const { textTracks, $state } = this._ctx,\n    //     { currentTime } = $state,\n    //     track = textTracks.selected;\n    //   if (this._currentCue) track?.removeCue(this._currentCue, trigger);\n    //   this._currentCue = new window.VTTCue(currentTime(), Number.MAX_SAFE_INTEGER, cue.text);\n    //   track?.addCue(this._currentCue, trigger);\n    // }\n    _onChaptersChange(chapters) {\n        this._removeChapters();\n        if (!chapters.length) return;\n        const track = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TextTrack({\n            kind: \"chapters\",\n            default: true\n        }), { realDuration } = this._ctx.$state;\n        for(let i = 0; i < chapters.length; i++){\n            const chapter = chapters[i], nextChapter = chapters[i + 1];\n            track.addCue(new window.VTTCue(chapter.startTime, nextChapter?.startTime ?? realDuration(), chapter.title));\n        }\n        this._chaptersTrack = track;\n        this._ctx.textTracks.add(track);\n    }\n    _removeChapters() {\n        if (!this._chaptersTrack) return;\n        this._ctx.textTracks.remove(this._chaptersTrack);\n        this._chaptersTrack = null;\n    }\n    _onQualitiesChange(qualities, trigger) {\n        this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.QualitySymbol._enableAuto] = qualities.some((q)=>q.id === \"auto\") ? ()=>this._remote(\"setQuality\", \"auto\") : void 0;\n        for (const quality of qualities){\n            if (quality.id === \"auto\") continue;\n            const height = +quality.id.slice(0, -1);\n            if (isNaN(height)) continue;\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.ListSymbol._add]({\n                id: quality.id,\n                width: height * (16 / 9),\n                height,\n                codec: \"avc1,h.264\",\n                bitrate: -1\n            }, trigger);\n        }\n        this._onQualityChange(qualities.find((q)=>q.active), trigger);\n    }\n    _onQualityChange({ id } = {}, trigger) {\n        if (!id) return;\n        const isAuto = id === \"auto\", newQuality = this._ctx.qualities.getById(id);\n        if (isAuto) {\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.QualitySymbol._setAuto](isAuto, trigger);\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.ListSymbol._select](void 0, true, trigger);\n        } else {\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.ListSymbol._select](newQuality ?? void 0, true, trigger);\n        }\n    }\n    _onEvent(event, payload, trigger) {\n        switch(event){\n            case \"ready\":\n                this._attachListeners();\n                break;\n            case \"loaded\":\n                this._onLoaded(trigger);\n                break;\n            case \"play\":\n                this._onPlay(trigger);\n                break;\n            case \"playProgress\":\n                this._onPlayProgress(trigger);\n                break;\n            case \"pause\":\n                this._onPause(trigger);\n                break;\n            case \"loadProgress\":\n                this._onLoadProgress(payload.seconds, trigger);\n                break;\n            case \"waiting\":\n                this._onWaiting(trigger);\n                break;\n            case \"bufferstart\":\n                this._onBufferStart(trigger);\n                break;\n            case \"bufferend\":\n                this._onBufferEnd(trigger);\n                break;\n            case \"volumechange\":\n                this._onVolumeChange(payload.volume, (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.peek)(this._ctx.$state.muted), trigger);\n                break;\n            case \"durationchange\":\n                this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, payload.duration);\n                this._notify(\"duration-change\", payload.duration, trigger);\n                break;\n            case \"playbackratechange\":\n                this._notify(\"rate-change\", payload.playbackRate, trigger);\n                break;\n            case \"qualitychange\":\n                this._onQualityChange(payload, trigger);\n                break;\n            case \"fullscreenchange\":\n                this._fullscreenActive = payload.fullscreen;\n                this._notify(\"fullscreen-change\", payload.fullscreen, trigger);\n                break;\n            case \"enterpictureinpicture\":\n                this._notify(\"picture-in-picture-change\", true, trigger);\n                break;\n            case \"leavepictureinpicture\":\n                this._notify(\"picture-in-picture-change\", false, trigger);\n                break;\n            case \"ended\":\n                this._notify(\"end\", void 0, trigger);\n                break;\n            case \"error\":\n                this._onError(payload, trigger);\n                break;\n            case \"seek\":\n            case \"seeked\":\n                this._onSeeked(payload.seconds, trigger);\n                break;\n        }\n    }\n    _onError(error, trigger) {\n        const { message, method } = error;\n        if (method === \"setPlaybackRate\") {\n            this._pro.set(false);\n        }\n        if (method) {\n            this._getPromise(method)?.reject(message);\n        }\n        {\n            this._ctx.logger?.errorGroup(`[vimeo]: ${message}`).labelledLog(\"Error\", error).labelledLog(\"Provider\", this).labelledLog(\"Event\", trigger).dispatch();\n        }\n    }\n    _onMessage(message, event) {\n        if (message.event) {\n            this._onEvent(message.event, message.data, event);\n        } else if (message.method) {\n            this._onMethod(message.method, message.value, event);\n        }\n    }\n    _onLoad() {}\n    async _remote(command, arg) {\n        let promise = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.deferredPromise)(), promises = this._promises.get(command);\n        if (!promises) this._promises.set(command, promises = []);\n        promises.push(promise);\n        this._postMessage({\n            method: command,\n            value: arg\n        });\n        return promise.promise;\n    }\n    _reset() {\n        this._timeRAF._stop();\n        this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, 0);\n        this._videoInfoPromise = null;\n        this._currentCue = null;\n        this._pro.set(false);\n        this._removeChapters();\n    }\n    _getPromise(command) {\n        return this._promises.get(command)?.shift();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-C4FuHl6d.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Icon: () => (/* binding */ Icon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Icon auto */ \nconst Icon = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, ref)=>{\n    const { width, height, size = null, paths, ...restProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        viewBox: \"0 0 32 32\",\n        ...restProps,\n        width: width ?? size,\n        height: height ?? size,\n        fill: \"none\",\n        \"aria-hidden\": \"true\",\n        focusable: \"false\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        ref,\n        dangerouslySetInnerHTML: {\n            __html: paths\n        }\n    });\n});\nIcon.displayName = \"VidstackIcon\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQ0JGN2lVcXUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7MERBRStCO0FBRS9CLE1BQU1DLE9BQU8sYUFBYSxpQkFBR0QsNkNBQWdCLENBQUMsQ0FBQ0csT0FBT0M7SUFDcEQsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxXQUFXLEdBQUdOO0lBQzVELHFCQUFPSCxnREFBbUIsQ0FBQyxPQUFPO1FBQ2hDVyxTQUFTO1FBQ1QsR0FBR0YsU0FBUztRQUNaSixPQUFPQSxTQUFTRTtRQUNoQkQsUUFBUUEsVUFBVUM7UUFDbEJLLE1BQU07UUFDTixlQUFlO1FBQ2ZDLFdBQVc7UUFDWEMsT0FBTztRQUNQVjtRQUNBVyx5QkFBeUI7WUFBRUMsUUFBUVI7UUFBTTtJQUMzQztBQUNGO0FBQ0FQLEtBQUtnQixXQUFXLEdBQUc7QUFFSCIsInNvdXJjZXMiOlsid2VicGFjazovL3Rqcm9wcm9qZXRvMS8uL25vZGVfbW9kdWxlcy9Admlkc3RhY2svcmVhY3QvZGV2L2NodW5rcy92aWRzdGFjay1DQkY3aVVxdS5qcz9kOWY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgSWNvbiA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgc2l6ZSA9IG51bGwsIHBhdGhzLCAuLi5yZXN0UHJvcHMgfSA9IHByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgdmlld0JveDogXCIwIDAgMzIgMzJcIixcbiAgICAuLi5yZXN0UHJvcHMsXG4gICAgd2lkdGg6IHdpZHRoID8/IHNpemUsXG4gICAgaGVpZ2h0OiBoZWlnaHQgPz8gc2l6ZSxcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgcmVmLFxuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogcGF0aHMgfVxuICB9KTtcbn0pO1xuSWNvbi5kaXNwbGF5TmFtZSA9IFwiVmlkc3RhY2tJY29uXCI7XG5cbmV4cG9ydCB7IEljb24gfTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkljb24iLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJ3aWR0aCIsImhlaWdodCIsInNpemUiLCJwYXRocyIsInJlc3RQcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJ2aWV3Qm94IiwiZmlsbCIsImZvY3VzYWJsZSIsInhtbG5zIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CSU4W5Sm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-CSU4W5Sm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAudioLayout: () => (/* binding */ DefaultAudioLayout),\n/* harmony export */   DefaultBufferingIndicator: () => (/* binding */ DefaultBufferingIndicator),\n/* harmony export */   DefaultKeyboardDisplay: () => (/* binding */ DefaultKeyboardDisplay),\n/* harmony export */   DefaultLayoutContext: () => (/* binding */ DefaultLayoutContext),\n/* harmony export */   DefaultMenuButton: () => (/* binding */ DefaultMenuButton),\n/* harmony export */   DefaultMenuCheckbox: () => (/* binding */ DefaultMenuCheckbox),\n/* harmony export */   DefaultMenuItem: () => (/* binding */ DefaultMenuItem),\n/* harmony export */   DefaultMenuRadioGroup: () => (/* binding */ DefaultMenuRadioGroup),\n/* harmony export */   DefaultMenuSection: () => (/* binding */ DefaultMenuSection),\n/* harmony export */   DefaultMenuSliderItem: () => (/* binding */ DefaultMenuSliderItem),\n/* harmony export */   DefaultSliderParts: () => (/* binding */ DefaultSliderParts),\n/* harmony export */   DefaultSliderSteps: () => (/* binding */ DefaultSliderSteps),\n/* harmony export */   DefaultTooltip: () => (/* binding */ DefaultTooltip),\n/* harmony export */   DefaultVideoGestures: () => (/* binding */ DefaultVideoGestures),\n/* harmony export */   DefaultVideoLargeLayout: () => (/* binding */ DefaultVideoLargeLayout),\n/* harmony export */   DefaultVideoLayout: () => (/* binding */ DefaultVideoLayout),\n/* harmony export */   DefaultVideoSmallLayout: () => (/* binding */ DefaultVideoSmallLayout),\n/* harmony export */   createRadioOptions: () => (/* binding */ createRadioOptions),\n/* harmony export */   i18n: () => (/* binding */ i18n),\n/* harmony export */   useDefaultLayoutContext: () => (/* binding */ useDefaultLayoutContext),\n/* harmony export */   useDefaultLayoutWord: () => (/* binding */ useDefaultLayoutWord)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vidstack-DcX2JzmB.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DcX2JzmB.js\");\n/* harmony import */ var _vidstack_Wdd6fBp8_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Wdd6fBp8.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Wdd6fBp8.js\");\n/* harmony import */ var _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-BOkHoBGu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BOkHoBGu.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _vidstack_BVbKfF2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vidstack-BVbKfF2_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BVbKfF2_.js\");\n/* __next_internal_client_entry_do_not_use__ DefaultAudioLayout,DefaultBufferingIndicator,DefaultKeyboardDisplay,DefaultLayoutContext,DefaultMenuButton,DefaultMenuCheckbox,DefaultMenuItem,DefaultMenuRadioGroup,DefaultMenuSection,DefaultMenuSliderItem,DefaultSliderParts,DefaultSliderSteps,DefaultTooltip,DefaultVideoGestures,DefaultVideoLargeLayout,DefaultVideoLayout,DefaultVideoSmallLayout,createRadioOptions,i18n,useDefaultLayoutContext,useDefaultLayoutWord auto */ \n\n\n\n\n\n\n\nconst DefaultLayoutContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nDefaultLayoutContext.displayName = \"DefaultLayoutContext\";\nfunction useDefaultLayoutContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(DefaultLayoutContext);\n}\nfunction useDefaultLayoutWord(word) {\n    const { translations } = useDefaultLayoutContext();\n    return i18n(translations, word);\n}\nfunction i18n(translations, word) {\n    return translations?.[word] ?? word;\n}\nfunction useColorSchemeClass(colorScheme) {\n    const systemColorPreference = (0,_vidstack_Wdd6fBp8_js__WEBPACK_IMPORTED_MODULE_2__.useColorSchemePreference)();\n    if (colorScheme === \"default\") {\n        return null;\n    } else if (colorScheme === \"system\") {\n        return systemColorPreference;\n    } else {\n        return colorScheme;\n    }\n}\nfunction createDefaultMediaLayout({ type, smLayoutWhen, renderLayout }) {\n    const Layout = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, className, disableTimeSlider = false, hideQualityBitrate = false, icons, colorScheme = \"system\", download = null, menuContainer = null, menuGroup = \"bottom\", noAudioGain = false, audioGains = {\n        min: 0,\n        max: 300,\n        step: 25\n    }, noGestures = false, noKeyboardAnimations = false, noModal = false, noScrubGesture, playbackRates = {\n        min: 0,\n        max: 2,\n        step: 0.25\n    }, seekStep = 10, showMenuDelay, showTooltipDelay = 700, sliderChaptersMinWidth = 325, slots, smallLayoutWhen = smLayoutWhen, thumbnails = null, translations, ...props }, forwardRef)=>{\n        const media = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), $load = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(media.$props.load), $canLoad = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canLoad\"), $viewType = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"viewType\"), $streamType = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"streamType\"), $smallWhen = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.createComputed)(()=>{\n            return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isBoolean)(smallLayoutWhen) ? smallLayoutWhen : smallLayoutWhen(media.player.state);\n        }, [\n            smallLayoutWhen\n        ]), userPrefersAnnouncements = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.createSignal)(true), userPrefersKeyboardAnimations = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.createSignal)(true), isMatch = $viewType === type, isSmallLayout = $smallWhen(), isForcedLayout = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isBoolean)(smallLayoutWhen), isLoadLayout = $load === \"play\" && !$canLoad, canRender = $canLoad || isForcedLayout || isLoadLayout, colorSchemeClass = useColorSchemeClass(colorScheme), layoutEl = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.createSignal)(null);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)($smallWhen);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props,\n            className: `vds-${type}-layout` + (colorSchemeClass ? ` ${colorSchemeClass}` : \"\") + (className ? ` ${className}` : \"\"),\n            \"data-match\": isMatch ? \"\" : null,\n            \"data-sm\": isSmallLayout ? \"\" : null,\n            \"data-lg\": !isSmallLayout ? \"\" : null,\n            \"data-size\": isSmallLayout ? \"sm\" : \"lg\",\n            \"data-no-scrub-gesture\": noScrubGesture ? \"\" : null,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.composeRefs)(layoutEl.set, forwardRef)\n        }, canRender && isMatch ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultLayoutContext.Provider, {\n            value: {\n                disableTimeSlider,\n                hideQualityBitrate,\n                icons,\n                colorScheme,\n                download,\n                isSmallLayout,\n                menuContainer,\n                menuGroup,\n                noAudioGain,\n                audioGains,\n                layoutEl,\n                noGestures,\n                noKeyboardAnimations,\n                noModal,\n                noScrubGesture,\n                showMenuDelay,\n                showTooltipDelay,\n                sliderChaptersMinWidth,\n                slots,\n                seekStep,\n                playbackRates,\n                thumbnails,\n                translations,\n                userPrefersAnnouncements,\n                userPrefersKeyboardAnimations\n            }\n        }, renderLayout({\n            streamType: $streamType,\n            isSmallLayout,\n            isLoadLayout\n        }), children) : null);\n    });\n    Layout.displayName = \"DefaultMediaLayout\";\n    return Layout;\n}\nfunction useDefaultAudioLayoutSlots() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(DefaultLayoutContext).slots;\n}\nfunction useDefaultVideoLayoutSlots() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(DefaultLayoutContext).slots;\n}\nfunction slot(slots, name, defaultValue) {\n    const slot2 = slots?.[name], capitalizedName = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.uppercaseFirstChar)(name);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, slots?.[`before${capitalizedName}`], (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isUndefined)(slot2) ? defaultValue : slot2, slots?.[`after${capitalizedName}`]);\n}\nfunction DefaultAnnouncer() {\n    const { userPrefersAnnouncements, translations } = useDefaultLayoutContext(), $userPrefersAnnouncements = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(userPrefersAnnouncements);\n    if (!$userPrefersAnnouncements) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.MediaAnnouncer, {\n        translations\n    });\n}\nDefaultAnnouncer.displayName = \"DefaultAnnouncer\";\nfunction DefaultTooltip({ content, placement, children }) {\n    const { showTooltipDelay } = useDefaultLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Root, {\n        showDelay: showTooltipDelay\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Trigger, {\n        asChild: true\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Content, {\n        className: \"vds-tooltip-content\",\n        placement\n    }, content));\n}\nDefaultTooltip.displayName = \"DefaultTooltip\";\nfunction DefaultPlayButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), playText = useDefaultLayoutWord(\"Play\"), pauseText = useDefaultLayoutWord(\"Pause\"), $paused = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"paused\"), $ended = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"ended\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: $paused ? playText : pauseText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.PlayButton, {\n        className: \"vds-play-button vds-button\",\n        \"aria-label\": playText\n    }, $ended ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PlayButton.Replay, {\n        className: \"vds-icon\"\n    }) : $paused ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PlayButton.Play, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PlayButton.Pause, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultPlayButton.displayName = \"DefaultPlayButton\";\nconst DefaultMuteButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ tooltip }, forwardRef)=>{\n    const { icons: Icons } = useDefaultLayoutContext(), muteText = useDefaultLayoutWord(\"Mute\"), unmuteText = useDefaultLayoutWord(\"Unmute\"), $muted = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"muted\"), $volume = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"volume\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: $muted ? unmuteText : muteText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.MuteButton, {\n        className: \"vds-mute-button vds-button\",\n        \"aria-label\": muteText,\n        ref: forwardRef\n    }, $muted || $volume == 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.MuteButton.Mute, {\n        className: \"vds-icon\"\n    }) : $volume < 0.5 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.MuteButton.VolumeLow, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.MuteButton.VolumeHigh, {\n        className: \"vds-icon\"\n    })));\n});\nDefaultMuteButton.displayName = \"DefaultMuteButton\";\nfunction DefaultCaptionButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), captionsText = useDefaultLayoutWord(\"Captions\"), onText = useDefaultLayoutWord(\"Closed-Captions On\"), offText = useDefaultLayoutWord(\"Closed-Captions Off\"), $track = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"textTrack\"), isOn = $track && (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.isTrackCaptionKind)($track);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: isOn ? onText : offText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.CaptionButton, {\n        className: \"vds-caption-button vds-button\",\n        \"aria-label\": captionsText\n    }, isOn ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.CaptionButton.On, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.CaptionButton.Off, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultCaptionButton.displayName = \"DefaultCaptionButton\";\nfunction DefaultPIPButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), pipText = useDefaultLayoutWord(\"PiP\"), enterText = useDefaultLayoutWord(\"Enter PiP\"), exitText = useDefaultLayoutWord(\"Exit PiP\"), $pip = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"pictureInPicture\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: $pip ? exitText : enterText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.PIPButton, {\n        className: \"vds-pip-button vds-button\",\n        \"aria-label\": pipText\n    }, $pip ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PIPButton.Exit, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PIPButton.Enter, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultPIPButton.displayName = \"DefaultPIPButton\";\nfunction DefaultFullscreenButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), fullscreenText = useDefaultLayoutWord(\"Fullscreen\"), enterText = useDefaultLayoutWord(\"Enter Fullscreen\"), exitText = useDefaultLayoutWord(\"Exit Fullscreen\"), $fullscreen = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"fullscreen\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: $fullscreen ? exitText : enterText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.FullscreenButton, {\n        className: \"vds-fullscreen-button vds-button\",\n        \"aria-label\": fullscreenText\n    }, $fullscreen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.FullscreenButton.Exit, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.FullscreenButton.Enter, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultFullscreenButton.displayName = \"DefaultFullscreenButton\";\nfunction DefaultSeekButton({ backward, tooltip }) {\n    const { icons: Icons, seekStep } = useDefaultLayoutContext(), seekForwardText = useDefaultLayoutWord(\"Seek Forward\"), seekBackwardText = useDefaultLayoutWord(\"Seek Backward\"), seconds = (backward ? -1 : 1) * seekStep, label = seconds >= 0 ? seekForwardText : seekBackwardText;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: label,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.SeekButton, {\n        className: \"vds-seek-button vds-button\",\n        seconds,\n        \"aria-label\": label\n    }, seconds >= 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.SeekButton.Forward, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.SeekButton.Backward, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultSeekButton.displayName = \"DefaultSeekButton\";\nfunction DefaultAirPlayButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), airPlayText = useDefaultLayoutWord(\"AirPlay\"), $state = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"remotePlaybackState\"), stateText = useDefaultLayoutWord((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.uppercaseFirstChar)($state)), label = `${airPlayText} ${stateText}`, Icon = ($state === \"connecting\" ? Icons.AirPlayButton.Connecting : $state === \"connected\" ? Icons.AirPlayButton.Connected : null) ?? Icons.AirPlayButton.Default;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: airPlayText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.AirPlayButton, {\n        className: \"vds-airplay-button vds-button\",\n        \"aria-label\": label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icon, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultAirPlayButton.displayName = \"DefaultAirPlayButton\";\nfunction DefaultGoogleCastButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), googleCastText = useDefaultLayoutWord(\"Google Cast\"), $state = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"remotePlaybackState\"), stateText = useDefaultLayoutWord((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.uppercaseFirstChar)($state)), label = `${googleCastText} ${stateText}`, Icon = ($state === \"connecting\" ? Icons.GoogleCastButton.Connecting : $state === \"connected\" ? Icons.GoogleCastButton.Connected : null) ?? Icons.GoogleCastButton.Default;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: googleCastText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.GoogleCastButton, {\n        className: \"vds-google-cast-button vds-button\",\n        \"aria-label\": label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icon, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultGoogleCastButton.displayName = \"DefaultGoogleCastButton\";\nfunction DefaultLiveButton() {\n    const $live = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"live\"), label = useDefaultLayoutWord(\"Skip To Live\"), liveText = useDefaultLayoutWord(\"LIVE\");\n    return $live ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.LiveButton, {\n        className: \"vds-live-button\",\n        \"aria-label\": label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-live-button-text\"\n    }, liveText)) : null;\n}\nDefaultLiveButton.displayName = \"DefaultLiveButton\";\nfunction DefaultDownloadButton() {\n    const { download, icons: Icons } = useDefaultLayoutContext(), $src = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"source\"), $title = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"title\"), file = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.getDownloadFile)({\n        title: $title,\n        src: $src,\n        download\n    }), downloadText = useDefaultLayoutWord(\"Download\");\n    return file ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: downloadText,\n        placement: \"top\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        role: \"button\",\n        className: \"vds-download-button vds-button\",\n        \"aria-label\": downloadText,\n        href: file.url + `?download=${file.name}`,\n        download: file.name,\n        target: \"_blank\"\n    }, Icons.DownloadButton ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.DownloadButton.Default, {\n        className: \"vds-icon\"\n    }) : null)) : null;\n}\nDefaultDownloadButton.displayName = \"DefaultDownloadButton\";\nfunction DefaultCaptions() {\n    const exampleText = useDefaultLayoutWord(\"Captions look like this\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Captions, {\n        className: \"vds-captions\",\n        exampleText\n    });\n}\nDefaultCaptions.displayName = \"DefaultCaptions\";\nfunction DefaultControlsSpacer() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-controls-spacer\"\n    });\n}\nDefaultControlsSpacer.displayName = \"DefaultControlsSpacer\";\nfunction useParentDialogEl() {\n    const { layoutEl } = useDefaultLayoutContext(), $layoutEl = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(layoutEl);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>$layoutEl?.closest(\"dialog\"), [\n        $layoutEl\n    ]);\n}\nfunction DefaultChaptersMenu({ tooltip, placement, portalClass = \"\" }) {\n    const { showMenuDelay, noModal, isSmallLayout, icons: Icons, menuGroup, menuContainer, colorScheme } = useDefaultLayoutContext(), chaptersText = useDefaultLayoutWord(\"Chapters\"), options = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.useChapterOptions)(), disabled = !options.length, { thumbnails } = useDefaultLayoutContext(), $src = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"currentSrc\"), $viewType = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"viewType\"), $offset = !isSmallLayout && menuGroup === \"bottom\" && $viewType === \"video\" ? 26 : 0, $RemotionThumbnail = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(_vidstack_BVbKfF2_js__WEBPACK_IMPORTED_MODULE_7__.RemotionThumbnail), colorSchemeClass = useColorSchemeClass(colorScheme), [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), dialogEl = useParentDialogEl();\n    if (disabled) return null;\n    function onOpen() {\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n            setIsOpen(true);\n        });\n    }\n    function onClose() {\n        setIsOpen(false);\n    }\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-chapters-menu-items vds-menu-items\",\n        placement,\n        offset: $offset\n    }, isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$3, {\n        className: \"vds-chapters-radio-group vds-radio-group\",\n        value: options.selectedValue,\n        \"data-thumbnails\": thumbnails ? \"\" : null\n    }, options.map(({ cue, label, value, startTimeText, durationText, select, setProgressVar })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Item, {\n            className: \"vds-chapter-radio vds-radio\",\n            value,\n            key: value,\n            onSelect: select,\n            ref: setProgressVar\n        }, thumbnails ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root, {\n            src: thumbnails,\n            className: \"vds-thumbnail\",\n            time: cue.startTime\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Img, null)) : $RemotionThumbnail && (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.isRemotionSrc)($src) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($RemotionThumbnail, {\n            className: \"vds-thumbnail\",\n            frame: cue.startTime * $src.fps\n        }) : null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"vds-chapter-radio-content\"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-chapter-radio-label\"\n        }, label), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-chapter-radio-start-time\"\n        }, startTimeText), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-chapter-radio-duration\"\n        }, durationText))))) : null);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-chapters-menu vds-menu\",\n        showDelay: showMenuDelay,\n        onOpen,\n        onClose\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: chaptersText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: \"vds-menu-button vds-button\",\n        disabled,\n        \"aria-label\": chaptersText\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.Chapters, {\n        className: \"vds-icon\"\n    }))), noModal || !isSmallLayout ? Content : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Portal, {\n        container: menuContainer ?? dialogEl,\n        className: portalClass + (colorSchemeClass ? ` ${colorSchemeClass}` : \"\"),\n        disabled: \"fullscreen\",\n        \"data-sm\": isSmallLayout ? \"\" : null,\n        \"data-lg\": !isSmallLayout ? \"\" : null,\n        \"data-size\": isSmallLayout ? \"sm\" : \"lg\"\n    }, Content));\n}\nDefaultChaptersMenu.displayName = \"DefaultChaptersMenu\";\nconst FONT_COLOR_OPTION = {\n    type: \"color\"\n};\nconst FONT_FAMILY_OPTION = {\n    type: \"radio\",\n    values: {\n        \"Monospaced Serif\": \"mono-serif\",\n        \"Proportional Serif\": \"pro-serif\",\n        \"Monospaced Sans-Serif\": \"mono-sans\",\n        \"Proportional Sans-Serif\": \"pro-sans\",\n        Casual: \"casual\",\n        Cursive: \"cursive\",\n        \"Small Capitals\": \"capitals\"\n    }\n};\nconst FONT_SIZE_OPTION = {\n    type: \"slider\",\n    min: 0,\n    max: 400,\n    step: 25,\n    upIcon: null,\n    downIcon: null\n};\nconst FONT_OPACITY_OPTION = {\n    type: \"slider\",\n    min: 0,\n    max: 100,\n    step: 5,\n    upIcon: null,\n    downIcon: null\n};\nconst FONT_TEXT_SHADOW_OPTION = {\n    type: \"radio\",\n    values: [\n        \"None\",\n        \"Drop Shadow\",\n        \"Raised\",\n        \"Depressed\",\n        \"Outline\"\n    ]\n};\nconst FONT_DEFAULTS = {\n    fontFamily: \"pro-sans\",\n    fontSize: \"100%\",\n    textColor: \"#ffffff\",\n    textOpacity: \"100%\",\n    textShadow: \"none\",\n    textBg: \"#000000\",\n    textBgOpacity: \"100%\",\n    displayBg: \"#000000\",\n    displayBgOpacity: \"0%\"\n};\nconst FONT_SIGNALS = Object.keys(FONT_DEFAULTS).reduce((prev, type)=>({\n        ...prev,\n        [type]: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.signal)(FONT_DEFAULTS[type])\n    }), {});\nif (!_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.IS_SERVER) {\n    for (const type of Object.keys(FONT_SIGNALS)){\n        const value = localStorage.getItem(`vds-player:${(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(type)}`);\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isString)(value)) FONT_SIGNALS[type].set(value);\n    }\n}\nfunction onFontReset() {\n    for (const type of Object.keys(FONT_SIGNALS)){\n        const defaultValue = FONT_DEFAULTS[type];\n        FONT_SIGNALS[type].set(defaultValue);\n    }\n}\nfunction hexToRgb(hex) {\n    const { style } = new Option();\n    style.color = hex;\n    return style.color.match(/\\((.*?)\\)/)[1].replace(/,/g, \" \");\n}\nlet isWatchingVars = false, players = /* @__PURE__ */ new Set();\nfunction updateFontCssVars() {\n    if (_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.IS_SERVER) return;\n    const { player } = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaContext)();\n    players.add(player);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.onDispose)(()=>players.delete(player));\n    if (!isWatchingVars) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.scoped)(()=>{\n            for (const type of (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.keysOf)(FONT_SIGNALS)){\n                const $value = FONT_SIGNALS[type], defaultValue = FONT_DEFAULTS[type], varName = `--media-user-${(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(type)}`, storageKey = `vds-player:${(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(type)}`;\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.effect)(()=>{\n                    const value = $value(), isDefaultVarValue = value === defaultValue, varValue = !isDefaultVarValue ? getCssVarValue(player, type, value) : null;\n                    for (const player2 of players){\n                        player2.el?.style.setProperty(varName, varValue);\n                    }\n                    if (isDefaultVarValue) {\n                        localStorage.removeItem(storageKey);\n                    } else {\n                        localStorage.setItem(storageKey, value);\n                    }\n                });\n            }\n        }, null);\n        isWatchingVars = true;\n    }\n}\nfunction getCssVarValue(player, type, value) {\n    switch(type){\n        case \"fontFamily\":\n            const fontVariant = value === \"capitals\" ? \"small-caps\" : \"\";\n            player.el?.style.setProperty(\"--media-user-font-variant\", fontVariant);\n            return getFontFamilyCSSVarValue(value);\n        case \"fontSize\":\n        case \"textOpacity\":\n        case \"textBgOpacity\":\n        case \"displayBgOpacity\":\n            return percentToRatio(value);\n        case \"textColor\":\n            return `rgb(${hexToRgb(value)} / var(--media-user-text-opacity, 1))`;\n        case \"textShadow\":\n            return getTextShadowCssVarValue(value);\n        case \"textBg\":\n            return `rgb(${hexToRgb(value)} / var(--media-user-text-bg-opacity, 1))`;\n        case \"displayBg\":\n            return `rgb(${hexToRgb(value)} / var(--media-user-display-bg-opacity, 1))`;\n    }\n}\nfunction percentToRatio(value) {\n    return (parseInt(value) / 100).toString();\n}\nfunction getFontFamilyCSSVarValue(value) {\n    switch(value){\n        case \"mono-serif\":\n            return '\"Courier New\", Courier, \"Nimbus Mono L\", \"Cutive Mono\", monospace';\n        case \"mono-sans\":\n            return '\"Deja Vu Sans Mono\", \"Lucida Console\", Monaco, Consolas, \"PT Mono\", monospace';\n        case \"pro-sans\":\n            return 'Roboto, \"Arial Unicode Ms\", Arial, Helvetica, Verdana, \"PT Sans Caption\", sans-serif';\n        case \"casual\":\n            return '\"Comic Sans MS\", Impact, Handlee, fantasy';\n        case \"cursive\":\n            return '\"Monotype Corsiva\", \"URW Chancery L\", \"Apple Chancery\", \"Dancing Script\", cursive';\n        case \"capitals\":\n            return '\"Arial Unicode Ms\", Arial, Helvetica, Verdana, \"Marcellus SC\", sans-serif + font-variant=small-caps';\n        default:\n            return '\"Times New Roman\", Times, Georgia, Cambria, \"PT Serif Caption\", serif';\n    }\n}\nfunction getTextShadowCssVarValue(value) {\n    switch(value){\n        case \"drop shadow\":\n            return \"rgb(34, 34, 34) 1.86389px 1.86389px 2.79583px, rgb(34, 34, 34) 1.86389px 1.86389px 3.72778px, rgb(34, 34, 34) 1.86389px 1.86389px 4.65972px\";\n        case \"raised\":\n            return \"rgb(34, 34, 34) 1px 1px, rgb(34, 34, 34) 2px 2px\";\n        case \"depressed\":\n            return \"rgb(204, 204, 204) 1px 1px, rgb(34, 34, 34) -1px -1px\";\n        case \"outline\":\n            return \"rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px\";\n        default:\n            return \"\";\n    }\n}\nfunction DefaultMenuSection({ label, value, children }) {\n    const id = react__WEBPACK_IMPORTED_MODULE_0__.useId();\n    if (!label) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"vds-menu-section\"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"vds-menu-section-body\"\n        }, children));\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", {\n        className: \"vds-menu-section\",\n        role: \"group\",\n        \"aria-labelledby\": id\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-section-title\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"header\", {\n        id\n    }, label), value ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-section-value\"\n    }, value) : null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-section-body\"\n    }, children));\n}\nDefaultMenuSection.displayName = \"DefaultMenuSection\";\nfunction DefaultMenuButton({ label, hint = \"\", Icon, disabled = false }) {\n    const { icons: Icons } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(DefaultLayoutContext);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: \"vds-menu-item\",\n        disabled\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.ArrowLeft, {\n        className: \"vds-menu-close-icon vds-icon\"\n    }), Icon ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icon, {\n        className: \"vds-menu-item-icon vds-icon\"\n    }) : null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-menu-item-label\"\n    }, label), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-menu-item-hint\"\n    }, hint), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.ArrowRight, {\n        className: \"vds-menu-open-icon vds-icon\"\n    }));\n}\nDefaultMenuButton.displayName = \"DefaultMenuButton\";\nfunction DefaultMenuItem({ label, children }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-item\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-item-label\"\n    }, label), children);\n}\nDefaultMenuItem.displayName = \"DefaultMenuItem\";\nfunction DefaultMenuRadioGroup({ value, options, onChange }) {\n    const { icons: Icons } = useDefaultLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$3, {\n        className: \"vds-radio-group\",\n        value,\n        onChange\n    }, options.map((option)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Item, {\n            className: \"vds-radio\",\n            value: option.value,\n            key: option.value\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.RadioCheck, {\n            className: \"vds-icon\"\n        }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-radio-label\",\n            \"data-part\": \"label\"\n        }, option.label))));\n}\nDefaultMenuRadioGroup.displayName = \"DefaultMenuRadioGroup\";\nfunction createRadioOptions(entries) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(entries) ? entries.map((entry)=>({\n                label: entry,\n                value: entry.toLowerCase()\n            })) : Object.keys(entries).map((label)=>({\n                label,\n                value: entries[label]\n            })), [\n        entries\n    ]);\n}\nfunction DefaultMenuSliderItem({ label, value, UpIcon, DownIcon, children, isMin, isMax }) {\n    const hasTitle = label || value, Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, DownIcon ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DownIcon, {\n        className: \"vds-icon down\"\n    }) : null, children, UpIcon ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(UpIcon, {\n        className: \"vds-icon up\"\n    }) : null);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: `vds-menu-item vds-menu-slider-item${hasTitle ? \" group\" : \"\"}`,\n        \"data-min\": isMin ? \"\" : null,\n        \"data-max\": isMax ? \"\" : null\n    }, hasTitle ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-slider-title\"\n    }, label ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, label) : null, value ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, value) : null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-slider-body\"\n    }, Content)) : Content);\n}\nDefaultMenuSliderItem.displayName = \"DefaultMenuSliderItem\";\nfunction DefaultSliderParts() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Track, {\n        className: \"vds-slider-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill, {\n        className: \"vds-slider-track-fill vds-slider-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Thumb, {\n        className: \"vds-slider-thumb\"\n    }));\n}\nDefaultSliderParts.displayName = \"DefaultSliderParts\";\nfunction DefaultSliderSteps() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Steps, {\n        className: \"vds-slider-steps\"\n    }, (step)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"vds-slider-step\",\n            key: String(step)\n        }));\n}\nDefaultSliderSteps.displayName = \"DefaultSliderSteps\";\nfunction DefaultFontMenu() {\n    const label = useDefaultLayoutWord(\"Caption Styles\"), $hasCaptions = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"hasCaptions\"), fontSectionLabel = useDefaultLayoutWord(\"Font\"), textSectionLabel = useDefaultLayoutWord(\"Text\"), textBgSectionLabel = useDefaultLayoutWord(\"Text Background\"), displayBgSectionLabel = useDefaultLayoutWord(\"Display Background\");\n    if (!$hasCaptions) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-font-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-font-style-items vds-menu-items\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label: fontSectionLabel\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontFamilyMenu, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSizeSlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label: textSectionLabel\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextColorInput, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextShadowMenu, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextOpacitySlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label: textBgSectionLabel\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextBgInput, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextBgOpacitySlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label: displayBgSectionLabel\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDisplayBgInput, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDisplayBgOpacitySlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultResetMenuItem, null))));\n}\nDefaultFontMenu.displayName = \"DefaultFontMenu\";\nfunction DefaultFontFamilyMenu() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Family\",\n        type: \"fontFamily\",\n        option: FONT_FAMILY_OPTION\n    });\n}\nDefaultFontFamilyMenu.displayName = \"DefaultFontFamilyMenu\";\nfunction DefaultFontSizeSlider() {\n    const { icons: Icons } = useDefaultLayoutContext(), option = {\n        ...FONT_SIZE_OPTION,\n        upIcon: Icons.Menu.FontSizeUp,\n        downIcon: Icons.Menu.FontSizeDown\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Size\",\n        type: \"fontSize\",\n        option\n    });\n}\nDefaultFontSizeSlider.displayName = \"DefaultFontSizeSlider\";\nfunction DefaultTextColorInput() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Color\",\n        type: \"textColor\",\n        option: FONT_COLOR_OPTION\n    });\n}\nDefaultTextColorInput.displayName = \"DefaultTextColorInput\";\nfunction DefaultTextOpacitySlider() {\n    const { icons: Icons } = useDefaultLayoutContext(), option = {\n        ...FONT_OPACITY_OPTION,\n        upIcon: Icons.Menu.OpacityUp,\n        downIcon: Icons.Menu.OpacityDown\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Opacity\",\n        type: \"textOpacity\",\n        option\n    });\n}\nDefaultTextOpacitySlider.displayName = \"DefaultTextOpacitySlider\";\nfunction DefaultTextShadowMenu() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Shadow\",\n        type: \"textShadow\",\n        option: FONT_TEXT_SHADOW_OPTION\n    });\n}\nDefaultTextShadowMenu.displayName = \"DefaultTextShadowMenu\";\nfunction DefaultTextBgInput() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Color\",\n        type: \"textBg\",\n        option: FONT_COLOR_OPTION\n    });\n}\nDefaultTextBgInput.displayName = \"DefaultTextBgInput\";\nfunction DefaultTextBgOpacitySlider() {\n    const { icons: Icons } = useDefaultLayoutContext(), option = {\n        ...FONT_OPACITY_OPTION,\n        upIcon: Icons.Menu.OpacityUp,\n        downIcon: Icons.Menu.OpacityDown\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Opacity\",\n        type: \"textBgOpacity\",\n        option\n    });\n}\nDefaultTextBgOpacitySlider.displayName = \"DefaultTextBgOpacitySlider\";\nfunction DefaultDisplayBgInput() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Color\",\n        type: \"displayBg\",\n        option: FONT_COLOR_OPTION\n    });\n}\nDefaultDisplayBgInput.displayName = \"DefaultDisplayBgInput\";\nfunction DefaultDisplayBgOpacitySlider() {\n    const { icons: Icons } = useDefaultLayoutContext(), option = {\n        ...FONT_OPACITY_OPTION,\n        upIcon: Icons.Menu.OpacityUp,\n        downIcon: Icons.Menu.OpacityDown\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Opacity\",\n        type: \"displayBgOpacity\",\n        option\n    });\n}\nDefaultDisplayBgOpacitySlider.displayName = \"DefaultDisplayBgOpacitySlider\";\nfunction DefaultFontSetting({ label, option, type }) {\n    const player = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useMediaPlayer)(), $currentValue = FONT_SIGNALS[type], $value = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)($currentValue), translatedLabel = useDefaultLayoutWord(label);\n    const notify = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        player?.dispatchEvent(new Event(\"vds-font-change\"));\n    }, [\n        player\n    ]);\n    const onChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((newValue)=>{\n        $currentValue.set(newValue);\n        notify();\n    }, [\n        $currentValue,\n        notify\n    ]);\n    if (option.type === \"color\") {\n        let onColorChange2 = function(event) {\n            onChange(event.target.value);\n        };\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n            label: translatedLabel\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            className: \"vds-color-picker\",\n            type: \"color\",\n            value: $value,\n            onChange: onColorChange2\n        }));\n    }\n    if (option.type === \"slider\") {\n        let onSliderValueChange2 = function(value) {\n            onChange(value + \"%\");\n        };\n        const { min, max, step, upIcon, downIcon } = option;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSliderItem, {\n            label: translatedLabel,\n            value: $value,\n            UpIcon: upIcon,\n            DownIcon: downIcon,\n            isMin: $value === min + \"%\",\n            isMax: $value === max + \"%\"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$5, {\n            className: \"vds-slider\",\n            min,\n            max,\n            step,\n            keyStep: step,\n            value: parseInt($value),\n            \"aria-label\": translatedLabel,\n            onValueChange: onSliderValueChange2,\n            onDragValueChange: onSliderValueChange2\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderParts, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderSteps, null)));\n    }\n    if (option.type === \"radio\") {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontRadioGroup, {\n            id: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(type),\n            label: translatedLabel,\n            value: $value,\n            values: option.values,\n            onChange\n        });\n    }\n    return null;\n}\nDefaultFontSetting.displayName = \"DefaultFontSetting\";\nfunction DefaultFontRadioGroup({ id, label, value, values, onChange }) {\n    const radioOptions = createRadioOptions(values), { translations } = useDefaultLayoutContext(), hint = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const label2 = radioOptions.find((radio)=>radio.value === value)?.label || \"\";\n        return i18n(translations, label2);\n    }, [\n        value,\n        radioOptions\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: `vds-${id}-menu vds-menu`\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        hint\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuRadioGroup, {\n        value,\n        options: radioOptions,\n        onChange\n    })));\n}\nDefaultFontRadioGroup.displayName = \"DefaultFontRadioGroup\";\nfunction DefaultResetMenuItem() {\n    const resetText = useDefaultLayoutWord(\"Reset\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"vds-menu-item\",\n        role: \"menuitem\",\n        onClick: onFontReset\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-menu-item-label\"\n    }, resetText));\n}\nDefaultResetMenuItem.displayName = \"DefaultResetMenuItem\";\nfunction DefaultMenuCheckbox({ label, checked, storageKey, defaultChecked = false, onChange }) {\n    const [isChecked, setIsChecked] = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultChecked), [isActive, setIsActive] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const savedValue = storageKey ? localStorage.getItem(storageKey) : null, checked2 = !!(savedValue ?? defaultChecked);\n        setIsChecked(checked2);\n        onChange?.(checked2);\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isBoolean)(checked)) setIsChecked(checked);\n    }, [\n        checked\n    ]);\n    function onPress(event) {\n        if (event && \"button\" in event && event?.button === 1) return;\n        const toggledCheck = !isChecked;\n        setIsChecked(toggledCheck);\n        if (storageKey) localStorage.setItem(storageKey, toggledCheck ? \"1\" : \"\");\n        onChange?.(toggledCheck, event?.nativeEvent);\n        setIsActive(false);\n    }\n    function onActive(event) {\n        if (event.button !== 0) return;\n        setIsActive(true);\n    }\n    function onKeyDown(event) {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isKeyboardClick)(event.nativeEvent)) onPress();\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-checkbox\",\n        role: \"menuitemcheckbox\",\n        tabIndex: 0,\n        \"aria-label\": label,\n        \"aria-checked\": isChecked ? \"true\" : \"false\",\n        \"data-active\": isActive ? \"\" : null,\n        onPointerUp: onPress,\n        onPointerDown: onActive,\n        onKeyDown\n    });\n}\nDefaultMenuCheckbox.displayName = \"DefaultMenuCheckbox\";\nfunction DefaultAccessibilityMenu({ slots }) {\n    const label = useDefaultLayoutWord(\"Accessibility\"), { icons: Icons } = useDefaultLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-accessibility-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        Icon: Icons.Menu.Accessibility\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, slot(slots, \"accessibilityMenuItemsStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAnnouncementsMenuCheckbox, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultKeyboardAnimationsMenuCheckbox, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontMenu, null)), slot(slots, \"accessibilityMenuItemsEnd\", null)));\n}\nDefaultAccessibilityMenu.displayName = \"DefaultAccessibilityMenu\";\nfunction DefaultAnnouncementsMenuCheckbox() {\n    const { userPrefersAnnouncements } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Announcements\");\n    function onChange(checked) {\n        userPrefersAnnouncements.set(checked);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n        label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuCheckbox, {\n        label,\n        defaultChecked: true,\n        storageKey: \"vds-player::announcements\",\n        onChange\n    }));\n}\nDefaultAnnouncementsMenuCheckbox.displayName = \"DefaultAnnouncementsMenuCheckbox\";\nfunction DefaultKeyboardAnimationsMenuCheckbox() {\n    const $viewType = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"viewType\"), { userPrefersKeyboardAnimations, noKeyboardAnimations } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Keyboard Animations\");\n    if ($viewType !== \"video\" || noKeyboardAnimations) return null;\n    function onChange(checked) {\n        userPrefersKeyboardAnimations.set(checked);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n        label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuCheckbox, {\n        label,\n        defaultChecked: true,\n        storageKey: \"vds-player::keyboard-animations\",\n        onChange\n    }));\n}\nDefaultKeyboardAnimationsMenuCheckbox.displayName = \"DefaultKeyboardAnimationsMenuCheckbox\";\nfunction DefaultAudioMenu({ slots }) {\n    const label = useDefaultLayoutWord(\"Audio\"), $canSetAudioGain = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetAudioGain\"), $audioTracks = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"audioTracks\"), { noAudioGain, icons: Icons } = useDefaultLayoutContext(), hasGainSlider = $canSetAudioGain && !noAudioGain, $disabled = !hasGainSlider && $audioTracks.length <= 1;\n    if ($disabled) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-audio-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        Icon: Icons.Menu.Audio\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, slot(slots, \"audioMenuItemsStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioTracksMenu, null), hasGainSlider ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioBoostMenuSection, null) : null, slot(slots, \"audioMenuItemsEnd\", null)));\n}\nDefaultAudioMenu.displayName = \"DefaultAudioMenu\";\nfunction DefaultAudioBoostMenuSection() {\n    const $audioGain = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"audioGain\"), label = useDefaultLayoutWord(\"Boost\"), value = Math.round((($audioGain ?? 1) - 1) * 100) + \"%\", $canSetAudioGain = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetAudioGain\"), { noAudioGain, icons: Icons } = useDefaultLayoutContext(), $disabled = !$canSetAudioGain || noAudioGain, min = useGainMin(), max = useGainMax();\n    if ($disabled) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label,\n        value\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSliderItem, {\n        UpIcon: Icons.Menu.AudioBoostUp,\n        DownIcon: Icons.Menu.AudioBoostDown,\n        isMin: (($audioGain ?? 1) - 1) * 100 <= min,\n        isMax: (($audioGain ?? 1) - 1) * 100 === max\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioGainSlider, null)));\n}\nDefaultAudioBoostMenuSection.displayName = \"DefaultAudioBoostMenuSection\";\nfunction useGainMin() {\n    const { audioGains } = useDefaultLayoutContext(), min = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(audioGains) ? audioGains[0] : audioGains?.min;\n    return min ?? 0;\n}\nfunction useGainMax() {\n    const { audioGains } = useDefaultLayoutContext(), max = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(audioGains) ? audioGains[audioGains.length - 1] : audioGains?.max;\n    return max ?? 300;\n}\nfunction useGainStep() {\n    const { audioGains } = useDefaultLayoutContext(), step = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(audioGains) ? audioGains[1] - audioGains[0] : audioGains?.step;\n    return step || 25;\n}\nfunction DefaultAudioGainSlider() {\n    const label = useDefaultLayoutWord(\"Audio Boost\"), min = useGainMin(), max = useGainMax(), step = useGainStep();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Root$1, {\n        className: \"vds-audio-gain-slider vds-slider\",\n        \"aria-label\": label,\n        min,\n        max,\n        step,\n        keyStep: step\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderParts, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderSteps, null));\n}\nDefaultAudioGainSlider.displayName = \"DefaultAudioGainSlider\";\nfunction DefaultAudioTracksMenu() {\n    const { icons: Icons } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Track\"), defaultText = useDefaultLayoutWord(\"Default\"), $track = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"audioTrack\"), options = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useAudioOptions)();\n    if (options.disabled) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-audio-track-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        hint: $track?.label ?? defaultText,\n        disabled: options.disabled,\n        Icon: Icons.Menu.Audio\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$3, {\n        className: \"vds-audio-radio-group vds-radio-group\",\n        value: options.selectedValue\n    }, options.map(({ label: label2, value, select })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Item, {\n            className: \"vds-audio-radio vds-radio\",\n            value,\n            onSelect: select,\n            key: value\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.RadioCheck, {\n            className: \"vds-icon\"\n        }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-radio-label\"\n        }, label2))))));\n}\nDefaultAudioTracksMenu.displayName = \"DefaultAudioTracksMenu\";\nfunction DefaultCaptionMenu({ slots }) {\n    const { icons: Icons } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Captions\"), offText = useDefaultLayoutWord(\"Off\"), options = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useCaptionOptions)({\n        off: offText\n    }), hint = options.selectedTrack?.label ?? offText;\n    if (options.disabled) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-captions-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        hint,\n        disabled: options.disabled,\n        Icon: Icons.Menu.Captions\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, slot(slots, \"captionsMenuItemsStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$3, {\n        className: \"vds-captions-radio-group vds-radio-group\",\n        value: options.selectedValue\n    }, options.map(({ label: label2, value, select })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Item, {\n            className: \"vds-caption-radio vds-radio\",\n            value,\n            onSelect: select,\n            key: value\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.RadioCheck, {\n            className: \"vds-icon\"\n        }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-radio-label\"\n        }, label2)))), slot(slots, \"captionsMenuItemsEnd\", null)));\n}\nDefaultCaptionMenu.displayName = \"DefaultCaptionMenu\";\nfunction DefaultPlaybackMenu({ slots }) {\n    const label = useDefaultLayoutWord(\"Playback\"), { icons: Icons } = useDefaultLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-playback-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        Icon: Icons.Menu.Playback\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, slot(slots, \"playbackMenuItemsStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, null, slot(slots, \"playbackMenuLoop\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultLoopMenuCheckbox, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSpeedMenuSection, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultQualityMenuSection, null), slot(slots, \"playbackMenuItemsEnd\", null)));\n}\nDefaultPlaybackMenu.displayName = \"DefaultPlaybackMenu\";\nfunction DefaultLoopMenuCheckbox() {\n    const { remote } = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), label = useDefaultLayoutWord(\"Loop\");\n    function onChange(checked, trigger) {\n        remote.userPrefersLoopChange(checked, trigger);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n        label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuCheckbox, {\n        label,\n        storageKey: \"vds-player::user-loop\",\n        onChange\n    }));\n}\nDefaultLoopMenuCheckbox.displayName = \"DefaultLoopMenuCheckbox\";\nfunction DefaultAutoQualityMenuCheckbox() {\n    const { remote, qualities } = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), $autoQuality = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"autoQuality\"), label = useDefaultLayoutWord(\"Auto\");\n    function onChange(checked, trigger) {\n        if (checked) {\n            remote.requestAutoQuality(trigger);\n        } else {\n            remote.changeQuality(qualities.selectedIndex, trigger);\n        }\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n        label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuCheckbox, {\n        label,\n        checked: $autoQuality,\n        onChange,\n        defaultChecked: $autoQuality\n    }));\n}\nDefaultAutoQualityMenuCheckbox.displayName = \"DefaultAutoQualityMenuCheckbox\";\nfunction DefaultQualityMenuSection() {\n    const { hideQualityBitrate, icons: Icons } = useDefaultLayoutContext(), $canSetQuality = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetQuality\"), $qualities = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"qualities\"), $quality = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"quality\"), label = useDefaultLayoutWord(\"Quality\"), autoText = useDefaultLayoutWord(\"Auto\"), sortedQualities = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.sortVideoQualities)($qualities), [\n        $qualities\n    ]);\n    if (!$canSetQuality || $qualities.length <= 1) return null;\n    const height = $quality?.height, bitrate = !hideQualityBitrate ? $quality?.bitrate : null, bitrateText = bitrate && bitrate > 0 ? `${(bitrate / 1e6).toFixed(2)} Mbps` : null, value = height ? `${height}p${bitrateText ? ` (${bitrateText})` : \"\"}` : autoText, isMin = sortedQualities[0] === $quality, isMax = sortedQualities.at(-1) === $quality;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label,\n        value\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSliderItem, {\n        UpIcon: Icons.Menu.QualityUp,\n        DownIcon: Icons.Menu.QualityDown,\n        isMin,\n        isMax\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultQualitySlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAutoQualityMenuCheckbox, null));\n}\nDefaultQualityMenuSection.displayName = \"DefaultQualityMenuSection\";\nfunction DefaultQualitySlider() {\n    const label = useDefaultLayoutWord(\"Quality\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Root$2, {\n        className: \"vds-quality-slider vds-slider\",\n        \"aria-label\": label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderParts, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderSteps, null));\n}\nDefaultQualitySlider.displayName = \"DefaultQualitySlider\";\nfunction DefaultSpeedMenuSection() {\n    const { icons: Icons } = useDefaultLayoutContext(), $playbackRate = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"playbackRate\"), $canSetPlaybackRate = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetPlaybackRate\"), label = useDefaultLayoutWord(\"Speed\"), normalText = useDefaultLayoutWord(\"Normal\"), min = useSpeedMin(), max = useSpeedMax(), value = $playbackRate === 1 ? normalText : $playbackRate + \"x\";\n    if (!$canSetPlaybackRate) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label,\n        value\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSliderItem, {\n        UpIcon: Icons.Menu.SpeedUp,\n        DownIcon: Icons.Menu.SpeedDown,\n        isMin: $playbackRate === min,\n        isMax: $playbackRate === max\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSpeedSlider, null)));\n}\nfunction useSpeedMin() {\n    const { playbackRates } = useDefaultLayoutContext(), rates = playbackRates;\n    return ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(rates) ? rates[0] : rates?.min) ?? 0;\n}\nfunction useSpeedMax() {\n    const { playbackRates } = useDefaultLayoutContext(), rates = playbackRates;\n    return ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(rates) ? rates[rates.length - 1] : rates?.max) ?? 2;\n}\nfunction useSpeedStep() {\n    const { playbackRates } = useDefaultLayoutContext(), rates = playbackRates;\n    return ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(rates) ? rates[1] - rates[0] : rates?.step) || 0.25;\n}\nfunction DefaultSpeedSlider() {\n    const label = useDefaultLayoutWord(\"Speed\"), min = useSpeedMin(), max = useSpeedMax(), step = useSpeedStep();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Root$3, {\n        className: \"vds-speed-slider vds-slider\",\n        \"aria-label\": label,\n        min,\n        max,\n        step,\n        keyStep: step\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderParts, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderSteps, null));\n}\nDefaultSpeedSlider.displayName = \"DefaultSpeedSlider\";\nfunction DefaultSettingsMenu({ tooltip, placement, portalClass = \"\", slots }) {\n    const { showMenuDelay, icons: Icons, isSmallLayout, menuContainer, menuGroup, noModal, colorScheme } = useDefaultLayoutContext(), settingsText = useDefaultLayoutWord(\"Settings\"), $viewType = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"viewType\"), $offset = !isSmallLayout && menuGroup === \"bottom\" && $viewType === \"video\" ? 26 : 0, colorSchemeClass = useColorSchemeClass(colorScheme), [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), dialogEl = useParentDialogEl();\n    (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.useScoped)(updateFontCssVars);\n    function onOpen() {\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n            setIsOpen(true);\n        });\n    }\n    function onClose() {\n        setIsOpen(false);\n    }\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-settings-menu-items vds-menu-items\",\n        placement,\n        offset: $offset\n    }, isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, slot(slots, \"settingsMenuItemsStart\", null), slot(slots, \"settingsMenuStartItems\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlaybackMenu, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAccessibilityMenu, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioMenu, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptionMenu, {\n        slots\n    }), slot(slots, \"settingsMenuEndItems\", null), slot(slots, \"settingsMenuItemsEnd\", null)) : null);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-settings-menu vds-menu\",\n        showDelay: showMenuDelay,\n        onOpen,\n        onClose\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: settingsText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: \"vds-menu-button vds-button\",\n        \"aria-label\": settingsText\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.Settings, {\n        className: \"vds-icon vds-rotate-icon\"\n    }))), noModal || !isSmallLayout ? Content : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Portal, {\n        className: portalClass + (colorSchemeClass ? ` ${colorSchemeClass}` : \"\"),\n        container: menuContainer ?? dialogEl,\n        disabled: \"fullscreen\",\n        \"data-sm\": isSmallLayout ? \"\" : null,\n        \"data-lg\": !isSmallLayout ? \"\" : null,\n        \"data-size\": isSmallLayout ? \"sm\" : \"lg\",\n        \"data-view-type\": $viewType\n    }, Content));\n}\nDefaultSettingsMenu.displayName = \"DefaultSettingsMenu\";\nfunction DefaultVolumePopup({ tooltip, orientation, slots }) {\n    const $pointer = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"pointer\"), $muted = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"muted\"), $canSetVolume = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetVolume\"), [rootEl, setRootEl] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), isRootActive = (0,_vidstack_Wdd6fBp8_js__WEBPACK_IMPORTED_MODULE_2__.useActive)(rootEl), muteButton = slot(slots, \"muteButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMuteButton, {\n        tooltip\n    }));\n    if (!$canSetVolume) {\n        return muteButton;\n    }\n    return $pointer === \"coarse\" && !$muted ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-volume\",\n        \"data-active\": isRootActive ? \"\" : null,\n        ref: setRootEl\n    }, muteButton, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-volume-popup\"\n    }, slot(slots, \"volumeSlider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVolumeSlider, {\n        orientation\n    }))));\n}\nDefaultVolumePopup.displayName = \"DefaultVolumePopup\";\nfunction DefaultVolumeSlider(props) {\n    const label = useDefaultLayoutWord(\"Volume\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$4, {\n        className: \"vds-volume-slider vds-slider\",\n        \"aria-label\": label,\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Track, {\n        className: \"vds-slider-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill, {\n        className: \"vds-slider-track-fill vds-slider-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Thumb, {\n        className: \"vds-slider-thumb\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Preview, {\n        className: \"vds-slider-preview\",\n        noClamp: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Value, {\n        className: \"vds-slider-value\"\n    })));\n}\nDefaultVolumeSlider.displayName = \"DefaultVolumeSlider\";\nfunction DefaultTimeSlider() {\n    const [instance, setInstance] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [width, setWidth] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), $src = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"currentSrc\"), { thumbnails, sliderChaptersMinWidth, disableTimeSlider, seekStep, noScrubGesture } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Seek\"), $RemotionSliderThumbnail = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(_vidstack_BVbKfF2_js__WEBPACK_IMPORTED_MODULE_7__.RemotionSliderThumbnail);\n    const onResize = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        const el = instance?.el;\n        el && setWidth(el.clientWidth);\n    }, [\n        instance\n    ]);\n    (0,_vidstack_Wdd6fBp8_js__WEBPACK_IMPORTED_MODULE_2__.useResizeObserver)(instance?.el, onResize);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Root$1, {\n        className: \"vds-time-slider vds-slider\",\n        \"aria-label\": label,\n        disabled: disableTimeSlider,\n        noSwipeGesture: noScrubGesture,\n        keyStep: seekStep,\n        ref: setInstance\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Chapters, {\n        className: \"vds-slider-chapters\",\n        disabled: width < sliderChaptersMinWidth\n    }, (cues, forwardRef)=>cues.map((cue)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                className: \"vds-slider-chapter\",\n                key: cue.startTime,\n                ref: forwardRef\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Track, {\n                className: \"vds-slider-track\"\n            }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill, {\n                className: \"vds-slider-track-fill vds-slider-track\"\n            }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Progress, {\n                className: \"vds-slider-progress vds-slider-track\"\n            })))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Thumb, {\n        className: \"vds-slider-thumb\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Preview, {\n        className: \"vds-slider-preview\"\n    }, thumbnails ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Thumbnail.Root, {\n        src: thumbnails,\n        className: \"vds-slider-thumbnail vds-thumbnail\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Thumbnail.Img, null)) : $RemotionSliderThumbnail && (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.isRemotionSrc)($src) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($RemotionSliderThumbnail, {\n        className: \"vds-slider-thumbnail vds-thumbnail\"\n    }) : null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.ChapterTitle, {\n        className: \"vds-slider-chapter-title\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Value, {\n        className: \"vds-slider-value\"\n    })));\n}\nDefaultTimeSlider.displayName = \"DefaultTimeSlider\";\nfunction DefaultTimeGroup({ slots }) {\n    const $duration = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"duration\");\n    if (!$duration) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-time-group\"\n    }, slot(slots, \"currentTime\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Time, {\n        className: \"vds-time\",\n        type: \"current\"\n    })), slot(slots, \"timeSeparator\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-time-divider\"\n    }, \"/\")), slot(slots, \"endTime\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Time, {\n        className: \"vds-time\",\n        type: \"duration\"\n    })));\n}\nDefaultTimeGroup.displayName = \"DefaultTimeGroup\";\nfunction DefaultTimeInfo({ slots }) {\n    const $live = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"live\");\n    return $live ? slot(slots, \"liveButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultLiveButton, null)) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeGroup, {\n        slots\n    });\n}\nDefaultTimeInfo.displayName = \"DefaultTimeInfo\";\nfunction DefaultTimeInvert({ slots }) {\n    const $live = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"live\"), $duration = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"duration\");\n    return $live ? slot(slots, \"liveButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultLiveButton, null)) : slot(slots, \"endTime\", $duration ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Time, {\n        className: \"vds-time\",\n        type: \"current\",\n        toggle: true,\n        remainder: true\n    }) : null);\n}\nDefaultTimeInvert.displayName = \"DefaultTimeInvert\";\nconst MediaLayout$1 = createDefaultMediaLayout({\n    type: \"audio\",\n    smLayoutWhen ({ width }) {\n        return width < 576;\n    },\n    renderLayout: ()=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioLayout, null)\n});\nfunction DefaultAudioLayout(props) {\n    const [scrubbing, setScrubbing] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), $pointer = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"pointer\");\n    const onStartScrubbing = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((event)=>{\n        const { target } = event, hasTimeSlider = !!(target instanceof HTMLElement && target.closest(\".vds-time-slider\"));\n        if (!hasTimeSlider) return;\n        event.nativeEvent.stopImmediatePropagation();\n        setScrubbing(true);\n    }, []);\n    const onStopScrubbing = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        setScrubbing(false);\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (scrubbing) return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.listenEvent)(window, \"pointerdown\", onStopScrubbing);\n    }, [\n        scrubbing,\n        onStopScrubbing\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaLayout$1, {\n        ...props,\n        \"data-scrubbing\": scrubbing ? \"\" : null,\n        onPointerDown: scrubbing ? (e)=>e.stopPropagation() : void 0,\n        onPointerDownCapture: $pointer === \"coarse\" && !scrubbing ? onStartScrubbing : void 0\n    });\n}\nDefaultAudioLayout.displayName = \"DefaultAudioLayout\";\nfunction AudioLayout() {\n    const slots = useDefaultAudioLayoutSlots();\n    (0,_vidstack_Wdd6fBp8_js__WEBPACK_IMPORTED_MODULE_2__.useLayoutName)(\"audio\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAnnouncer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptions, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Root$4, {\n        className: \"vds-controls\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"seekBackwardButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSeekButton, {\n        backward: true,\n        tooltip: \"top start\"\n    })), slot(slots, \"playButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlayButton, {\n        tooltip: \"top center\"\n    })), slot(slots, \"seekForwardButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSeekButton, {\n        tooltip: \"top center\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioTitle, null), slot(slots, \"timeSlider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeSlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeInvert, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVolumePopup, {\n        orientation: \"vertical\",\n        tooltip: \"top\",\n        slots\n    }), slot(slots, \"captionButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptionButton, {\n        tooltip: \"top center\"\n    })), slot(slots, \"downloadButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDownloadButton, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioMenus, {\n        slots\n    }))));\n}\nAudioLayout.displayName = \"AudioLayout\";\nfunction DefaultAudioMenus({ slots }) {\n    const { isSmallLayout, noModal } = useDefaultLayoutContext(), placement = noModal ? \"top end\" : !isSmallLayout ? \"top end\" : null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, slot(slots, \"chaptersMenu\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultChaptersMenu, {\n        tooltip: \"top\",\n        placement,\n        portalClass: \"vds-audio-layout\"\n    })), slot(slots, \"settingsMenu\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSettingsMenu, {\n        tooltip: \"top end\",\n        placement,\n        portalClass: \"vds-audio-layout\",\n        slots\n    })));\n}\nDefaultAudioMenus.displayName = \"DefaultAudioMenus\";\nfunction DefaultAudioTitle() {\n    const [rootEl, setRootEl] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), media = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), { translations } = useDefaultLayoutContext(), [isTextOverflowing, setIsTextOverflowing] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const isContinued = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.createComputed)(()=>{\n        const { started, currentTime } = media.$state;\n        return started() || currentTime() > 0;\n    });\n    const $title = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)((0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.createComputed)(()=>{\n        const { title, ended } = media.$state;\n        if (!title()) return \"\";\n        const word = ended() ? \"Replay\" : isContinued() ? \"Continue\" : \"Play\";\n        return `${i18n(translations, word)}: ${title()}`;\n    }));\n    const chapterTitle = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.useChapterTitle)(), $isContinued = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(isContinued), $chapterTitle = $isContinued ? chapterTitle : \"\", isTransitionActive = (0,_vidstack_Wdd6fBp8_js__WEBPACK_IMPORTED_MODULE_2__.useTransitionActive)(rootEl);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (isTransitionActive && document.activeElement === document.body) {\n            media.player.el?.focus();\n        }\n    }, []);\n    const onResize = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        const el = rootEl, isOverflowing = !!el && !isTransitionActive && el.clientWidth < el.children[0].clientWidth;\n        if (el) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.toggleClass)(el, \"vds-marquee\", isOverflowing);\n        setIsTextOverflowing(isOverflowing);\n    }, [\n        rootEl,\n        isTransitionActive\n    ]);\n    (0,_vidstack_Wdd6fBp8_js__WEBPACK_IMPORTED_MODULE_2__.useResizeObserver)(rootEl, onResize);\n    return $title ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-title\",\n        title: $title,\n        ref: setRootEl\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTitle, {\n        title: $title,\n        chapterTitle: $chapterTitle\n    }), isTextOverflowing && !isTransitionActive ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTitle, {\n        title: $title,\n        chapterTitle: $chapterTitle\n    }) : null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null);\n}\nDefaultAudioTitle.displayName = \"DefaultAudioTitle\";\nfunction AudioTitle({ title, chapterTitle }) {\n    const slots = useDefaultAudioLayoutSlots();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-title-text\"\n    }, slot(slots, \"title\", title), slot(slots, \"chapterTitle\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-chapter-title\"\n    }, chapterTitle)));\n}\nAudioTitle.displayName = \"AudioTitle\";\nconst DefaultKeyboardDisplay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ icons: Icons, ...props }, forwardRef)=>{\n    const [visible, setVisible] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), [Icon, setIcon] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [count, setCount] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), $lastKeyboardAction = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"lastKeyboardAction\");\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setCount((n)=>n + 1);\n    }, [\n        $lastKeyboardAction\n    ]);\n    const actionDataAttr = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const action = $lastKeyboardAction?.action;\n        return action && visible ? (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(action) : null;\n    }, [\n        visible,\n        $lastKeyboardAction\n    ]);\n    const className = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>`vds-kb-action${!visible ? \" hidden\" : \"\"}${props.className ? ` ${props.className}` : \"\"}`, [\n        visible\n    ]);\n    const $$text = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.createComputed)(getText), $text = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)($$text);\n    (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.createEffect)(()=>{\n        const Icon2 = getIcon(Icons);\n        setIcon(()=>Icon2);\n    }, [\n        Icons\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setVisible(!!$lastKeyboardAction);\n        const id = setTimeout(()=>setVisible(false), 500);\n        return ()=>{\n            setVisible(false);\n            window.clearTimeout(id);\n        };\n    }, [\n        $lastKeyboardAction\n    ]);\n    return Icon ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.Primitive.div, {\n        ...props,\n        className,\n        \"data-action\": actionDataAttr,\n        ref: forwardRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-kb-text-wrapper\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-kb-text\"\n    }, $text)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-kb-bezel\",\n        key: count\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-kb-icon\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icon, null)))) : null;\n});\nDefaultKeyboardDisplay.displayName = \"DefaultKeyboardDisplay\";\nfunction getText() {\n    const { $state } = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useContext)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.mediaContext), action = $state.lastKeyboardAction()?.action, audioGain = $state.audioGain() ?? 1;\n    switch(action){\n        case \"toggleMuted\":\n            return $state.muted() ? \"0%\" : getVolumeText($state.volume(), audioGain);\n        case \"volumeUp\":\n        case \"volumeDown\":\n            return getVolumeText($state.volume(), audioGain);\n        default:\n            return \"\";\n    }\n}\nfunction getVolumeText(volume, gain) {\n    return `${Math.round(volume * gain * 100)}%`;\n}\nfunction getIcon(Icons) {\n    const { $state } = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useContext)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.mediaContext), action = $state.lastKeyboardAction()?.action;\n    switch(action){\n        case \"togglePaused\":\n            return !$state.paused() ? Icons.Play : Icons.Pause;\n        case \"toggleMuted\":\n            return $state.muted() || $state.volume() === 0 ? Icons.Mute : $state.volume() >= 0.5 ? Icons.VolumeUp : Icons.VolumeDown;\n        case \"toggleFullscreen\":\n            return $state.fullscreen() ? Icons.EnterFullscreen : Icons.ExitFullscreen;\n        case \"togglePictureInPicture\":\n            return $state.pictureInPicture() ? Icons.EnterPiP : Icons.ExitPiP;\n        case \"toggleCaptions\":\n            return $state.hasCaptions() ? $state.textTrack() ? Icons.CaptionsOn : Icons.CaptionsOff : null;\n        case \"volumeUp\":\n            return Icons.VolumeUp;\n        case \"volumeDown\":\n            return Icons.VolumeDown;\n        case \"seekForward\":\n            return Icons.SeekForward;\n        case \"seekBackward\":\n            return Icons.SeekBackward;\n        default:\n            return null;\n    }\n}\nfunction DefaultTitle() {\n    const $started = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"started\"), $title = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"title\"), $hasChapters = (0,_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.useActiveTextTrack)(\"chapters\");\n    return $hasChapters && ($started || !$title) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.ChapterTitle, {\n        className: \"vds-chapter-title\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Title, {\n        className: \"vds-chapter-title\"\n    });\n}\nDefaultTitle.displayName = \"DefaultTitle\";\nconst MediaLayout = createDefaultMediaLayout({\n    type: \"video\",\n    smLayoutWhen ({ width, height }) {\n        return width < 576 || height < 380;\n    },\n    renderLayout (props) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VideoLayout, {\n            ...props\n        });\n    }\n});\nfunction DefaultVideoLayout(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaLayout, {\n        ...props\n    });\n}\nDefaultVideoLayout.displayName = \"DefaultVideoLayout\";\nfunction VideoLayout({ streamType, isLoadLayout, isSmallLayout }) {\n    (0,_vidstack_Wdd6fBp8_js__WEBPACK_IMPORTED_MODULE_2__.useLayoutName)(\"video\");\n    return isLoadLayout ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoLoadLayout, null) : streamType === \"unknown\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultBufferingIndicator, null) : isSmallLayout ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoSmallLayout, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoLargeLayout, null);\n}\nVideoLayout.displayName = \"VideoLayout\";\nfunction DefaultVideoLargeLayout() {\n    const { menuGroup } = useDefaultLayoutContext(), baseSlots = useDefaultVideoLayoutSlots(), slots = {\n        ...baseSlots,\n        ...baseSlots?.largeLayout\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAnnouncer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoGestures, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoKeyboardDisplay, null), slot(slots, \"bufferingIndicator\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultBufferingIndicator, null)), slot(slots, \"captions\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptions, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Root$4, {\n        className: \"vds-controls\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"topControlsGroupStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"topControlsGroupCenter\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"topControlsGroupEnd\", null), menuGroup === \"top\" && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoMenus, {\n        slots\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"centerControlsGroupStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"centerControlsGroupCenter\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"centerControlsGroupEnd\", null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"timeSlider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeSlider, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"playButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlayButton, {\n        tooltip: \"top start\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVolumePopup, {\n        orientation: \"horizontal\",\n        tooltip: \"top\",\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeInfo, {\n        slots\n    }), slot(slots, \"chapterTitle\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTitle, null)), slot(slots, \"captionButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptionButton, {\n        tooltip: \"top\"\n    })), menuGroup === \"bottom\" && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoMenus, {\n        slots\n    }), slot(slots, \"airPlayButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAirPlayButton, {\n        tooltip: \"top\"\n    })), slot(slots, \"googleCastButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultGoogleCastButton, {\n        tooltip: \"top\"\n    })), slot(slots, \"downloadButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDownloadButton, null)), slot(slots, \"pipButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPIPButton, {\n        tooltip: \"top\"\n    })), slot(slots, \"fullscreenButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFullscreenButton, {\n        tooltip: \"top end\"\n    })))));\n}\nDefaultVideoLargeLayout.displayName = \"DefaultVideoLargeLayout\";\nfunction DefaultVideoSmallLayout() {\n    const baseSlots = useDefaultVideoLayoutSlots(), slots = {\n        ...baseSlots,\n        ...baseSlots?.smallLayout\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAnnouncer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoGestures, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoKeyboardDisplay, null), slot(slots, \"bufferingIndicator\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultBufferingIndicator, null)), slot(slots, \"captions\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptions, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Root$4, {\n        className: \"vds-controls\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"topControlsGroupStart\", null), slot(slots, \"airPlayButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAirPlayButton, {\n        tooltip: \"top start\"\n    })), slot(slots, \"googleCastButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultGoogleCastButton, {\n        tooltip: \"top start\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"topControlsGroupCenter\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"captionButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptionButton, {\n        tooltip: \"bottom\"\n    })), slot(slots, \"downloadButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDownloadButton, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoMenus, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVolumePopup, {\n        orientation: \"vertical\",\n        tooltip: \"bottom end\",\n        slots\n    }), slot(slots, \"topControlsGroupEnd\", null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\",\n        style: {\n            pointerEvents: \"none\"\n        }\n    }, slot(slots, \"centerControlsGroupStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"centerControlsGroupCenter\", null), slot(slots, \"playButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlayButton, {\n        tooltip: \"top\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"centerControlsGroupEnd\", null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeInfo, {\n        slots\n    }), slot(slots, \"chapterTitle\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTitle, null)), slot(slots, \"fullscreenButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFullscreenButton, {\n        tooltip: \"top end\"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"timeSlider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeSlider, null)))), slot(slots, \"startDuration\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoStartDuration, null)));\n}\nDefaultVideoSmallLayout.displayName = \"DefaultVideoSmallLayout\";\nfunction DefaultVideoStartDuration() {\n    const $duration = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"duration\");\n    if ($duration === 0) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-start-duration\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Time, {\n        className: \"vds-time\",\n        type: \"duration\"\n    }));\n}\nDefaultVideoStartDuration.displayName = \"DefaultVideoStartDuration\";\nfunction DefaultVideoGestures() {\n    const { noGestures } = useDefaultLayoutContext();\n    if (noGestures) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-gestures\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"pointerup\",\n        action: \"toggle:paused\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"pointerup\",\n        action: \"toggle:controls\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"dblpointerup\",\n        action: \"toggle:fullscreen\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"dblpointerup\",\n        action: \"seek:-10\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"dblpointerup\",\n        action: \"seek:10\"\n    }));\n}\nDefaultVideoGestures.displayName = \"DefaultVideoGestures\";\nfunction DefaultBufferingIndicator() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-buffering-indicator\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Root$5, {\n        className: \"vds-buffering-spinner\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.Track, {\n        className: \"vds-buffering-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_6__.TrackFill, {\n        className: \"vds-buffering-track-fill\"\n    })));\n}\nDefaultBufferingIndicator.displayName = \"DefaultBufferingIndicator\";\nfunction DefaultVideoMenus({ slots }) {\n    const { isSmallLayout, noModal, menuGroup } = useDefaultLayoutContext(), side = menuGroup === \"top\" || isSmallLayout ? \"bottom\" : \"top\", tooltip = `${side} end`, placement = noModal ? `${side} end` : !isSmallLayout ? `${side} end` : null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, slot(slots, \"chaptersMenu\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultChaptersMenu, {\n        tooltip,\n        placement,\n        portalClass: \"vds-video-layout\"\n    })), slot(slots, \"settingsMenu\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSettingsMenu, {\n        tooltip,\n        placement,\n        portalClass: \"vds-video-layout\",\n        slots\n    })));\n}\nDefaultVideoMenus.displayName = \"DefaultVideoMenus\";\nfunction DefaultVideoLoadLayout() {\n    const { isSmallLayout } = useDefaultLayoutContext(), baseSlots = useDefaultVideoLayoutSlots(), slots = {\n        ...baseSlots,\n        ...baseSlots?.[isSmallLayout ? \"smallLayout\" : \"largeLayout\"]\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-load-container\"\n    }, slot(slots, \"bufferingIndicator\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultBufferingIndicator, null)), slot(slots, \"loadButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlayButton, {\n        tooltip: \"top\"\n    })));\n}\nDefaultVideoLoadLayout.displayName = \"DefaultVideoLoadLayout\";\nfunction DefaultVideoKeyboardDisplay() {\n    const { noKeyboardAnimations, icons, userPrefersKeyboardAnimations } = useDefaultLayoutContext(), $userPrefersKeyboardAnimations = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(userPrefersKeyboardAnimations), disabled = noKeyboardAnimations || !$userPrefersKeyboardAnimations;\n    if (disabled || !icons.KeyboardDisplay) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultKeyboardDisplay, {\n        icons: icons.KeyboardDisplay\n    });\n}\nDefaultVideoKeyboardDisplay.displayName = \"DefaultVideoKeyboardDisplay\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQ1NVNFc1U20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cWRBRStCO0FBQ29OO0FBQzRKO0FBQzNRO0FBQzRVO0FBQ3ZRO0FBQ25LO0FBQzhDO0FBRXBGLE1BQU02RixxQ0FBdUI3RixnREFBbUIsQ0FBQyxDQUFDO0FBQ2xENkYscUJBQXFCRSxXQUFXLEdBQUc7QUFDbkMsU0FBU0M7SUFDUCxPQUFPaEcsNkNBQWdCLENBQUM2RjtBQUMxQjtBQUNBLFNBQVNJLHFCQUFxQkMsSUFBSTtJQUNoQyxNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHSDtJQUN6QixPQUFPSSxLQUFLRCxjQUFjRDtBQUM1QjtBQUNBLFNBQVNFLEtBQUtELFlBQVksRUFBRUQsSUFBSTtJQUM5QixPQUFPQyxjQUFjLENBQUNELEtBQUssSUFBSUE7QUFDakM7QUFFQSxTQUFTRyxvQkFBb0JDLFdBQVc7SUFDdEMsTUFBTUMsd0JBQXdCdkQsK0VBQXdCQTtJQUN0RCxJQUFJc0QsZ0JBQWdCLFdBQVc7UUFDN0IsT0FBTztJQUNULE9BQU8sSUFBSUEsZ0JBQWdCLFVBQVU7UUFDbkMsT0FBT0M7SUFDVCxPQUFPO1FBQ0wsT0FBT0Q7SUFDVDtBQUNGO0FBRUEsU0FBU0UseUJBQXlCLEVBQ2hDQyxJQUFJLEVBQ0pDLFlBQVksRUFDWkMsWUFBWSxFQUNiO0lBQ0MsTUFBTUMsdUJBQVM1Ryw2Q0FBZ0IsQ0FDN0IsQ0FBQyxFQUNDOEcsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLG9CQUFvQixLQUFLLEVBQ3pCQyxxQkFBcUIsS0FBSyxFQUMxQkMsS0FBSyxFQUNMWixjQUFjLFFBQVEsRUFDdEJhLFdBQVcsSUFBSSxFQUNmQyxnQkFBZ0IsSUFBSSxFQUNwQkMsWUFBWSxRQUFRLEVBQ3BCQyxjQUFjLEtBQUssRUFDbkJDLGFBQWE7UUFBRUMsS0FBSztRQUFHQyxLQUFLO1FB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QW1CLENBQUMsT0FBTztRQUFFK0csV0FBVztJQUFxQixHQUFHb0QsS0FBSy9CLE9BQU8sc0JBQXNCLGFBQWEsaUJBQUdwSSxnREFBbUIsQ0FBQ2tsQiwyQkFBMkIsUUFBUS9hLEtBQUsvQixPQUFPLGNBQWMsYUFBYSxpQkFBR3BJLGdEQUFtQixDQUFDZ0wsbUJBQW1CO1FBQUVDLFNBQVM7SUFBTTtBQUNwUztBQUNBZ2EsdUJBQXVCbGYsV0FBVyxHQUFHO0FBQ3JDLFNBQVN5ZjtJQUNQLE1BQU0sRUFBRTVkLG9CQUFvQixFQUFFVixLQUFLLEVBQUVpQyw2QkFBNkIsRUFBRSxHQUFHbkQsMkJBQTJCOGYsaUNBQWlDN2xCLCtEQUFTQSxDQUFDa0osZ0NBQWdDNkcsV0FBV3BJLHdCQUF3QixDQUFDa2U7SUFDak4sSUFBSTlWLFlBQVksQ0FBQzlJLE1BQU02ZSxlQUFlLEVBQUUsT0FBTztJQUMvQyxPQUFPLGFBQWEsaUJBQUcvbEIsZ0RBQW1CLENBQUNvaUIsd0JBQXdCO1FBQUVsYixPQUFPQSxNQUFNNmUsZUFBZTtJQUFDO0FBQ3BHO0FBQ0FQLDRCQUE0QnpmLFdBQVcsR0FBRztBQUVxWiIsInNvdXJjZXMiOlsid2VicGFjazovL3Rqcm9wcm9qZXRvMS8uL25vZGVfbW9kdWxlcy9Admlkc3RhY2svcmVhY3QvZGV2L2NodW5rcy92aWRzdGFjay1DU1U0VzVTbS5qcz81NDQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNpZ25hbCwgaXNCb29sZWFuLCBjb21wb3NlUmVmcywgdXBwZXJjYXNlRmlyc3RDaGFyLCBpc1VuZGVmaW5lZCwgc2lnbmFsLCBjYW1lbFRvS2ViYWJDYXNlLCBpc1N0cmluZywgb25EaXNwb3NlLCBzY29wZWQsIGtleXNPZiwgZWZmZWN0LCBpc0FycmF5LCBpc0tleWJvYXJkQ2xpY2ssIGxpc3RlbkV2ZW50LCB0b2dnbGVDbGFzcywgdXNlQ29udGV4dCB9IGZyb20gJy4vdmlkc3RhY2stM2hzMy04aV8uanMnO1xuaW1wb3J0IHsgY3JlYXRlQ29tcHV0ZWQsIGNyZWF0ZVNpZ25hbCwgTWVkaWFBbm5vdW5jZXIsIFJvb3QsIFRyaWdnZXIsIENvbnRlbnQsIEdvb2dsZUNhc3RCdXR0b24sIENhcHRpb25zLCB1c2VDaGFwdGVyT3B0aW9ucywgUm9vdCQxIGFzIFJvb3QkNSwgUm9vdCQyIGFzIFJvb3QkNiwgUm9vdCQzIGFzIFJvb3QkNywgdXNlU2NvcGVkLCBSb290JDQgYXMgUm9vdCRhLCBHcm91cCwgdXNlQ2hhcHRlclRpdGxlLCBjcmVhdGVFZmZlY3QsIHVzZUFjdGl2ZVRleHRUcmFjaywgQ2hhcHRlclRpdGxlIGFzIENoYXB0ZXJUaXRsZSQxLCBUaXRsZSwgUm9vdCQ1IGFzIFJvb3QkYiwgVHJhY2sgYXMgVHJhY2skMSwgVHJhY2tGaWxsIGFzIFRyYWNrRmlsbCQxIH0gZnJvbSAnLi92aWRzdGFjay1EY1gySnptQi5qcyc7XG5pbXBvcnQgeyB1c2VDb2xvclNjaGVtZVByZWZlcmVuY2UsIHVzZUFjdGl2ZSwgdXNlUmVzaXplT2JzZXJ2ZXIsIHVzZUxheW91dE5hbWUsIHVzZVRyYW5zaXRpb25BY3RpdmUgfSBmcm9tICcuL3ZpZHN0YWNrLVdkZDZmQnA4LmpzJztcbmltcG9ydCB7IHVzZU1lZGlhQ29udGV4dCwgTXV0ZUJ1dHRvbiwgUGxheUJ1dHRvbiwgQ2FwdGlvbkJ1dHRvbiwgUElQQnV0dG9uLCBGdWxsc2NyZWVuQnV0dG9uLCBTZWVrQnV0dG9uLCBBaXJQbGF5QnV0dG9uLCBMaXZlQnV0dG9uLCBJdGVtcywgUm9vdCQzIGFzIFJvb3QkMSwgSXRlbSwgUm9vdCBhcyBSb290JDIsIEltZywgUm9vdCQyIGFzIFJvb3QkMywgQnV0dG9uLCBQb3J0YWwsIFRyYWNrLCBUcmFja0ZpbGwsIFRodW1iLCBTdGVwcywgdXNlTWVkaWFQbGF5ZXIsIFJvb3QkNSBhcyBSb290JDQsIHVzZUF1ZGlvT3B0aW9ucywgdXNlQ2FwdGlvbk9wdGlvbnMsIFJvb3QkNCBhcyBSb290JDgsIFByZXZpZXcsIFZhbHVlLCBSb290JDEgYXMgUm9vdCQ5LCBDaGFwdGVycywgUHJvZ3Jlc3MsIFRodW1ibmFpbCwgQ2hhcHRlclRpdGxlLCBUaW1lLCBHZXN0dXJlIH0gZnJvbSAnLi92aWRzdGFjay1CT2tIb0JHdS5qcyc7XG5pbXBvcnQgeyB1c2VNZWRpYVN0YXRlLCBpc1RyYWNrQ2FwdGlvbktpbmQsIGdldERvd25sb2FkRmlsZSwgaXNSZW1vdGlvblNyYywgSVNfU0VSVkVSLCB1c2VNZWRpYUNvbnRleHQgYXMgdXNlTWVkaWFDb250ZXh0JDEsIHNvcnRWaWRlb1F1YWxpdGllcywgUHJpbWl0aXZlLCBtZWRpYUNvbnRleHQgfSBmcm9tICcuL3ZpZHN0YWNrLU5tOU9KeTd4LmpzJztcbmltcG9ydCB7IGZsdXNoU3luYyB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBSZW1vdGlvblRodW1ibmFpbCwgUmVtb3Rpb25TbGlkZXJUaHVtYm5haWwgfSBmcm9tICcuL3ZpZHN0YWNrLUJWYktmRjJfLmpzJztcblxuY29uc3QgRGVmYXVsdExheW91dENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbkRlZmF1bHRMYXlvdXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0TGF5b3V0Q29udGV4dFwiO1xuZnVuY3Rpb24gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KERlZmF1bHRMYXlvdXRDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZURlZmF1bHRMYXlvdXRXb3JkKHdvcmQpIHtcbiAgY29uc3QgeyB0cmFuc2xhdGlvbnMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCk7XG4gIHJldHVybiBpMThuKHRyYW5zbGF0aW9ucywgd29yZCk7XG59XG5mdW5jdGlvbiBpMThuKHRyYW5zbGF0aW9ucywgd29yZCkge1xuICByZXR1cm4gdHJhbnNsYXRpb25zPy5bd29yZF0gPz8gd29yZDtcbn1cblxuZnVuY3Rpb24gdXNlQ29sb3JTY2hlbWVDbGFzcyhjb2xvclNjaGVtZSkge1xuICBjb25zdCBzeXN0ZW1Db2xvclByZWZlcmVuY2UgPSB1c2VDb2xvclNjaGVtZVByZWZlcmVuY2UoKTtcbiAgaWYgKGNvbG9yU2NoZW1lID09PSBcImRlZmF1bHRcIikge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKGNvbG9yU2NoZW1lID09PSBcInN5c3RlbVwiKSB7XG4gICAgcmV0dXJuIHN5c3RlbUNvbG9yUHJlZmVyZW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29sb3JTY2hlbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdE1lZGlhTGF5b3V0KHtcbiAgdHlwZSxcbiAgc21MYXlvdXRXaGVuLFxuICByZW5kZXJMYXlvdXRcbn0pIHtcbiAgY29uc3QgTGF5b3V0ID0gUmVhY3QuZm9yd2FyZFJlZihcbiAgICAoe1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlVGltZVNsaWRlciA9IGZhbHNlLFxuICAgICAgaGlkZVF1YWxpdHlCaXRyYXRlID0gZmFsc2UsXG4gICAgICBpY29ucyxcbiAgICAgIGNvbG9yU2NoZW1lID0gXCJzeXN0ZW1cIixcbiAgICAgIGRvd25sb2FkID0gbnVsbCxcbiAgICAgIG1lbnVDb250YWluZXIgPSBudWxsLFxuICAgICAgbWVudUdyb3VwID0gXCJib3R0b21cIixcbiAgICAgIG5vQXVkaW9HYWluID0gZmFsc2UsXG4gICAgICBhdWRpb0dhaW5zID0geyBtaW46IDAsIG1heDogMzAwLCBzdGVwOiAyNSB9LFxuICAgICAgbm9HZXN0dXJlcyA9IGZhbHNlLFxuICAgICAgbm9LZXlib2FyZEFuaW1hdGlvbnMgPSBmYWxzZSxcbiAgICAgIG5vTW9kYWwgPSBmYWxzZSxcbiAgICAgIG5vU2NydWJHZXN0dXJlLFxuICAgICAgcGxheWJhY2tSYXRlcyA9IHsgbWluOiAwLCBtYXg6IDIsIHN0ZXA6IDAuMjUgfSxcbiAgICAgIHNlZWtTdGVwID0gMTAsXG4gICAgICBzaG93TWVudURlbGF5LFxuICAgICAgc2hvd1Rvb2x0aXBEZWxheSA9IDcwMCxcbiAgICAgIHNsaWRlckNoYXB0ZXJzTWluV2lkdGggPSAzMjUsXG4gICAgICBzbG90cyxcbiAgICAgIHNtYWxsTGF5b3V0V2hlbiA9IHNtTGF5b3V0V2hlbixcbiAgICAgIHRodW1ibmFpbHMgPSBudWxsLFxuICAgICAgdHJhbnNsYXRpb25zLFxuICAgICAgLi4ucHJvcHNcbiAgICB9LCBmb3J3YXJkUmVmKSA9PiB7XG4gICAgICBjb25zdCBtZWRpYSA9IHVzZU1lZGlhQ29udGV4dCgpLCAkbG9hZCA9IHVzZVNpZ25hbChtZWRpYS4kcHJvcHMubG9hZCksICRjYW5Mb2FkID0gdXNlTWVkaWFTdGF0ZShcImNhbkxvYWRcIiksICR2aWV3VHlwZSA9IHVzZU1lZGlhU3RhdGUoXCJ2aWV3VHlwZVwiKSwgJHN0cmVhbVR5cGUgPSB1c2VNZWRpYVN0YXRlKFwic3RyZWFtVHlwZVwiKSwgJHNtYWxsV2hlbiA9IGNyZWF0ZUNvbXB1dGVkKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIGlzQm9vbGVhbihzbWFsbExheW91dFdoZW4pID8gc21hbGxMYXlvdXRXaGVuIDogc21hbGxMYXlvdXRXaGVuKG1lZGlhLnBsYXllci5zdGF0ZSk7XG4gICAgICB9LCBbc21hbGxMYXlvdXRXaGVuXSksIHVzZXJQcmVmZXJzQW5ub3VuY2VtZW50cyA9IGNyZWF0ZVNpZ25hbCh0cnVlKSwgdXNlclByZWZlcnNLZXlib2FyZEFuaW1hdGlvbnMgPSBjcmVhdGVTaWduYWwodHJ1ZSksIGlzTWF0Y2ggPSAkdmlld1R5cGUgPT09IHR5cGUsIGlzU21hbGxMYXlvdXQgPSAkc21hbGxXaGVuKCksIGlzRm9yY2VkTGF5b3V0ID0gaXNCb29sZWFuKHNtYWxsTGF5b3V0V2hlbiksIGlzTG9hZExheW91dCA9ICRsb2FkID09PSBcInBsYXlcIiAmJiAhJGNhbkxvYWQsIGNhblJlbmRlciA9ICRjYW5Mb2FkIHx8IGlzRm9yY2VkTGF5b3V0IHx8IGlzTG9hZExheW91dCwgY29sb3JTY2hlbWVDbGFzcyA9IHVzZUNvbG9yU2NoZW1lQ2xhc3MoY29sb3JTY2hlbWUpLCBsYXlvdXRFbCA9IGNyZWF0ZVNpZ25hbChudWxsKTtcbiAgICAgIHVzZVNpZ25hbCgkc21hbGxXaGVuKTtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgIGNsYXNzTmFtZTogYHZkcy0ke3R5cGV9LWxheW91dGAgKyAoY29sb3JTY2hlbWVDbGFzcyA/IGAgJHtjb2xvclNjaGVtZUNsYXNzfWAgOiBcIlwiKSArIChjbGFzc05hbWUgPyBgICR7Y2xhc3NOYW1lfWAgOiBcIlwiKSxcbiAgICAgICAgICBcImRhdGEtbWF0Y2hcIjogaXNNYXRjaCA/IFwiXCIgOiBudWxsLFxuICAgICAgICAgIFwiZGF0YS1zbVwiOiBpc1NtYWxsTGF5b3V0ID8gXCJcIiA6IG51bGwsXG4gICAgICAgICAgXCJkYXRhLWxnXCI6ICFpc1NtYWxsTGF5b3V0ID8gXCJcIiA6IG51bGwsXG4gICAgICAgICAgXCJkYXRhLXNpemVcIjogaXNTbWFsbExheW91dCA/IFwic21cIiA6IFwibGdcIixcbiAgICAgICAgICBcImRhdGEtbm8tc2NydWItZ2VzdHVyZVwiOiBub1NjcnViR2VzdHVyZSA/IFwiXCIgOiBudWxsLFxuICAgICAgICAgIHJlZjogY29tcG9zZVJlZnMobGF5b3V0RWwuc2V0LCBmb3J3YXJkUmVmKVxuICAgICAgICB9LFxuICAgICAgICBjYW5SZW5kZXIgJiYgaXNNYXRjaCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIERlZmF1bHRMYXlvdXRDb250ZXh0LlByb3ZpZGVyLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgIGRpc2FibGVUaW1lU2xpZGVyLFxuICAgICAgICAgICAgICBoaWRlUXVhbGl0eUJpdHJhdGUsXG4gICAgICAgICAgICAgIGljb25zLFxuICAgICAgICAgICAgICBjb2xvclNjaGVtZSxcbiAgICAgICAgICAgICAgZG93bmxvYWQsXG4gICAgICAgICAgICAgIGlzU21hbGxMYXlvdXQsXG4gICAgICAgICAgICAgIG1lbnVDb250YWluZXIsXG4gICAgICAgICAgICAgIG1lbnVHcm91cCxcbiAgICAgICAgICAgICAgbm9BdWRpb0dhaW4sXG4gICAgICAgICAgICAgIGF1ZGlvR2FpbnMsXG4gICAgICAgICAgICAgIGxheW91dEVsLFxuICAgICAgICAgICAgICBub0dlc3R1cmVzLFxuICAgICAgICAgICAgICBub0tleWJvYXJkQW5pbWF0aW9ucyxcbiAgICAgICAgICAgICAgbm9Nb2RhbCxcbiAgICAgICAgICAgICAgbm9TY3J1Ykdlc3R1cmUsXG4gICAgICAgICAgICAgIHNob3dNZW51RGVsYXksXG4gICAgICAgICAgICAgIHNob3dUb29sdGlwRGVsYXksXG4gICAgICAgICAgICAgIHNsaWRlckNoYXB0ZXJzTWluV2lkdGgsXG4gICAgICAgICAgICAgIHNsb3RzLFxuICAgICAgICAgICAgICBzZWVrU3RlcCxcbiAgICAgICAgICAgICAgcGxheWJhY2tSYXRlcyxcbiAgICAgICAgICAgICAgdGh1bWJuYWlscyxcbiAgICAgICAgICAgICAgdHJhbnNsYXRpb25zLFxuICAgICAgICAgICAgICB1c2VyUHJlZmVyc0Fubm91bmNlbWVudHMsXG4gICAgICAgICAgICAgIHVzZXJQcmVmZXJzS2V5Ym9hcmRBbmltYXRpb25zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW5kZXJMYXlvdXQoeyBzdHJlYW1UeXBlOiAkc3RyZWFtVHlwZSwgaXNTbWFsbExheW91dCwgaXNMb2FkTGF5b3V0IH0pLFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICkgOiBudWxsXG4gICAgICApO1xuICAgIH1cbiAgKTtcbiAgTGF5b3V0LmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0TWVkaWFMYXlvdXRcIjtcbiAgcmV0dXJuIExheW91dDtcbn1cblxuZnVuY3Rpb24gdXNlRGVmYXVsdEF1ZGlvTGF5b3V0U2xvdHMoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KERlZmF1bHRMYXlvdXRDb250ZXh0KS5zbG90cztcbn1cbmZ1bmN0aW9uIHVzZURlZmF1bHRWaWRlb0xheW91dFNsb3RzKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChEZWZhdWx0TGF5b3V0Q29udGV4dCkuc2xvdHM7XG59XG5mdW5jdGlvbiBzbG90KHNsb3RzLCBuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgY29uc3Qgc2xvdDIgPSBzbG90cz8uW25hbWVdLCBjYXBpdGFsaXplZE5hbWUgPSB1cHBlcmNhc2VGaXJzdENoYXIobmFtZSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgc2xvdHM/LltgYmVmb3JlJHtjYXBpdGFsaXplZE5hbWV9YF0sIGlzVW5kZWZpbmVkKHNsb3QyKSA/IGRlZmF1bHRWYWx1ZSA6IHNsb3QyLCBzbG90cz8uW2BhZnRlciR7Y2FwaXRhbGl6ZWROYW1lfWBdKTtcbn1cblxuZnVuY3Rpb24gRGVmYXVsdEFubm91bmNlcigpIHtcbiAgY29uc3QgeyB1c2VyUHJlZmVyc0Fubm91bmNlbWVudHMsIHRyYW5zbGF0aW9ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgJHVzZXJQcmVmZXJzQW5ub3VuY2VtZW50cyA9IHVzZVNpZ25hbCh1c2VyUHJlZmVyc0Fubm91bmNlbWVudHMpO1xuICBpZiAoISR1c2VyUHJlZmVyc0Fubm91bmNlbWVudHMpIHJldHVybiBudWxsO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVkaWFBbm5vdW5jZXIsIHsgdHJhbnNsYXRpb25zIH0pO1xufVxuRGVmYXVsdEFubm91bmNlci5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEFubm91bmNlclwiO1xuXG5mdW5jdGlvbiBEZWZhdWx0VG9vbHRpcCh7IGNvbnRlbnQsIHBsYWNlbWVudCwgY2hpbGRyZW4gfSkge1xuICBjb25zdCB7IHNob3dUb29sdGlwRGVsYXkgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSb290LCB7IHNob3dEZWxheTogc2hvd1Rvb2x0aXBEZWxheSB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChUcmlnZ2VyLCB7IGFzQ2hpbGQ6IHRydWUgfSwgY2hpbGRyZW4pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZW50LCB7IGNsYXNzTmFtZTogXCJ2ZHMtdG9vbHRpcC1jb250ZW50XCIsIHBsYWNlbWVudCB9LCBjb250ZW50KSk7XG59XG5EZWZhdWx0VG9vbHRpcC5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFRvb2x0aXBcIjtcblxuZnVuY3Rpb24gRGVmYXVsdFBsYXlCdXR0b24oeyB0b29sdGlwIH0pIHtcbiAgY29uc3QgeyBpY29uczogSWNvbnMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIHBsYXlUZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJQbGF5XCIpLCBwYXVzZVRleHQgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIlBhdXNlXCIpLCAkcGF1c2VkID0gdXNlTWVkaWFTdGF0ZShcInBhdXNlZFwiKSwgJGVuZGVkID0gdXNlTWVkaWFTdGF0ZShcImVuZGVkXCIpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRvb2x0aXAsIHsgY29udGVudDogJHBhdXNlZCA/IHBsYXlUZXh0IDogcGF1c2VUZXh0LCBwbGFjZW1lbnQ6IHRvb2x0aXAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGxheUJ1dHRvbiwgeyBjbGFzc05hbWU6IFwidmRzLXBsYXktYnV0dG9uIHZkcy1idXR0b25cIiwgXCJhcmlhLWxhYmVsXCI6IHBsYXlUZXh0IH0sICRlbmRlZCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLlBsYXlCdXR0b24uUmVwbGF5LCB7IGNsYXNzTmFtZTogXCJ2ZHMtaWNvblwiIH0pIDogJHBhdXNlZCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLlBsYXlCdXR0b24uUGxheSwgeyBjbGFzc05hbWU6IFwidmRzLWljb25cIiB9KSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLlBsYXlCdXR0b24uUGF1c2UsIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uXCIgfSkpKTtcbn1cbkRlZmF1bHRQbGF5QnV0dG9uLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0UGxheUJ1dHRvblwiO1xuY29uc3QgRGVmYXVsdE11dGVCdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmKFxuICAoeyB0b29sdGlwIH0sIGZvcndhcmRSZWYpID0+IHtcbiAgICBjb25zdCB7IGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgbXV0ZVRleHQgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIk11dGVcIiksIHVubXV0ZVRleHQgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIlVubXV0ZVwiKSwgJG11dGVkID0gdXNlTWVkaWFTdGF0ZShcIm11dGVkXCIpLCAkdm9sdW1lID0gdXNlTWVkaWFTdGF0ZShcInZvbHVtZVwiKTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRvb2x0aXAsIHsgY29udGVudDogJG11dGVkID8gdW5tdXRlVGV4dCA6IG11dGVUZXh0LCBwbGFjZW1lbnQ6IHRvb2x0aXAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTXV0ZUJ1dHRvbiwgeyBjbGFzc05hbWU6IFwidmRzLW11dGUtYnV0dG9uIHZkcy1idXR0b25cIiwgXCJhcmlhLWxhYmVsXCI6IG11dGVUZXh0LCByZWY6IGZvcndhcmRSZWYgfSwgJG11dGVkIHx8ICR2b2x1bWUgPT0gMCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLk11dGVCdXR0b24uTXV0ZSwgeyBjbGFzc05hbWU6IFwidmRzLWljb25cIiB9KSA6ICR2b2x1bWUgPCAwLjUgPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29ucy5NdXRlQnV0dG9uLlZvbHVtZUxvdywgeyBjbGFzc05hbWU6IFwidmRzLWljb25cIiB9KSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLk11dGVCdXR0b24uVm9sdW1lSGlnaCwgeyBjbGFzc05hbWU6IFwidmRzLWljb25cIiB9KSkpO1xuICB9XG4pO1xuRGVmYXVsdE11dGVCdXR0b24uZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRNdXRlQnV0dG9uXCI7XG5mdW5jdGlvbiBEZWZhdWx0Q2FwdGlvbkJ1dHRvbih7IHRvb2x0aXAgfSkge1xuICBjb25zdCB7IGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgY2FwdGlvbnNUZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJDYXB0aW9uc1wiKSwgb25UZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJDbG9zZWQtQ2FwdGlvbnMgT25cIiksIG9mZlRleHQgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIkNsb3NlZC1DYXB0aW9ucyBPZmZcIiksICR0cmFjayA9IHVzZU1lZGlhU3RhdGUoXCJ0ZXh0VHJhY2tcIiksIGlzT24gPSAkdHJhY2sgJiYgaXNUcmFja0NhcHRpb25LaW5kKCR0cmFjayk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VG9vbHRpcCwgeyBjb250ZW50OiBpc09uID8gb25UZXh0IDogb2ZmVGV4dCwgcGxhY2VtZW50OiB0b29sdGlwIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KENhcHRpb25CdXR0b24sIHsgY2xhc3NOYW1lOiBcInZkcy1jYXB0aW9uLWJ1dHRvbiB2ZHMtYnV0dG9uXCIsIFwiYXJpYS1sYWJlbFwiOiBjYXB0aW9uc1RleHQgfSwgaXNPbiA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLkNhcHRpb25CdXR0b24uT24sIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uXCIgfSkgOiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29ucy5DYXB0aW9uQnV0dG9uLk9mZiwgeyBjbGFzc05hbWU6IFwidmRzLWljb25cIiB9KSkpO1xufVxuRGVmYXVsdENhcHRpb25CdXR0b24uZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRDYXB0aW9uQnV0dG9uXCI7XG5mdW5jdGlvbiBEZWZhdWx0UElQQnV0dG9uKHsgdG9vbHRpcCB9KSB7XG4gIGNvbnN0IHsgaWNvbnM6IEljb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBwaXBUZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJQaVBcIiksIGVudGVyVGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiRW50ZXIgUGlQXCIpLCBleGl0VGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiRXhpdCBQaVBcIiksICRwaXAgPSB1c2VNZWRpYVN0YXRlKFwicGljdHVyZUluUGljdHVyZVwiKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRUb29sdGlwLCB7IGNvbnRlbnQ6ICRwaXAgPyBleGl0VGV4dCA6IGVudGVyVGV4dCwgcGxhY2VtZW50OiB0b29sdGlwIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFBJUEJ1dHRvbiwgeyBjbGFzc05hbWU6IFwidmRzLXBpcC1idXR0b24gdmRzLWJ1dHRvblwiLCBcImFyaWEtbGFiZWxcIjogcGlwVGV4dCB9LCAkcGlwID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbnMuUElQQnV0dG9uLkV4aXQsIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uXCIgfSkgOiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29ucy5QSVBCdXR0b24uRW50ZXIsIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uXCIgfSkpKTtcbn1cbkRlZmF1bHRQSVBCdXR0b24uZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRQSVBCdXR0b25cIjtcbmZ1bmN0aW9uIERlZmF1bHRGdWxsc2NyZWVuQnV0dG9uKHsgdG9vbHRpcCB9KSB7XG4gIGNvbnN0IHsgaWNvbnM6IEljb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBmdWxsc2NyZWVuVGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiRnVsbHNjcmVlblwiKSwgZW50ZXJUZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJFbnRlciBGdWxsc2NyZWVuXCIpLCBleGl0VGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiRXhpdCBGdWxsc2NyZWVuXCIpLCAkZnVsbHNjcmVlbiA9IHVzZU1lZGlhU3RhdGUoXCJmdWxsc2NyZWVuXCIpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRvb2x0aXAsIHsgY29udGVudDogJGZ1bGxzY3JlZW4gPyBleGl0VGV4dCA6IGVudGVyVGV4dCwgcGxhY2VtZW50OiB0b29sdGlwIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEZ1bGxzY3JlZW5CdXR0b24sIHsgY2xhc3NOYW1lOiBcInZkcy1mdWxsc2NyZWVuLWJ1dHRvbiB2ZHMtYnV0dG9uXCIsIFwiYXJpYS1sYWJlbFwiOiBmdWxsc2NyZWVuVGV4dCB9LCAkZnVsbHNjcmVlbiA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLkZ1bGxzY3JlZW5CdXR0b24uRXhpdCwgeyBjbGFzc05hbWU6IFwidmRzLWljb25cIiB9KSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLkZ1bGxzY3JlZW5CdXR0b24uRW50ZXIsIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uXCIgfSkpKTtcbn1cbkRlZmF1bHRGdWxsc2NyZWVuQnV0dG9uLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0RnVsbHNjcmVlbkJ1dHRvblwiO1xuZnVuY3Rpb24gRGVmYXVsdFNlZWtCdXR0b24oe1xuICBiYWNrd2FyZCxcbiAgdG9vbHRpcFxufSkge1xuICBjb25zdCB7IGljb25zOiBJY29ucywgc2Vla1N0ZXAgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIHNlZWtGb3J3YXJkVGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiU2VlayBGb3J3YXJkXCIpLCBzZWVrQmFja3dhcmRUZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJTZWVrIEJhY2t3YXJkXCIpLCBzZWNvbmRzID0gKGJhY2t3YXJkID8gLTEgOiAxKSAqIHNlZWtTdGVwLCBsYWJlbCA9IHNlY29uZHMgPj0gMCA/IHNlZWtGb3J3YXJkVGV4dCA6IHNlZWtCYWNrd2FyZFRleHQ7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VG9vbHRpcCwgeyBjb250ZW50OiBsYWJlbCwgcGxhY2VtZW50OiB0b29sdGlwIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFNlZWtCdXR0b24sIHsgY2xhc3NOYW1lOiBcInZkcy1zZWVrLWJ1dHRvbiB2ZHMtYnV0dG9uXCIsIHNlY29uZHMsIFwiYXJpYS1sYWJlbFwiOiBsYWJlbCB9LCBzZWNvbmRzID49IDAgPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29ucy5TZWVrQnV0dG9uLkZvcndhcmQsIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uXCIgfSkgOiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29ucy5TZWVrQnV0dG9uLkJhY2t3YXJkLCB7IGNsYXNzTmFtZTogXCJ2ZHMtaWNvblwiIH0pKSk7XG59XG5EZWZhdWx0U2Vla0J1dHRvbi5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFNlZWtCdXR0b25cIjtcbmZ1bmN0aW9uIERlZmF1bHRBaXJQbGF5QnV0dG9uKHsgdG9vbHRpcCB9KSB7XG4gIGNvbnN0IHsgaWNvbnM6IEljb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBhaXJQbGF5VGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiQWlyUGxheVwiKSwgJHN0YXRlID0gdXNlTWVkaWFTdGF0ZShcInJlbW90ZVBsYXliYWNrU3RhdGVcIiksIHN0YXRlVGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKHVwcGVyY2FzZUZpcnN0Q2hhcigkc3RhdGUpKSwgbGFiZWwgPSBgJHthaXJQbGF5VGV4dH0gJHtzdGF0ZVRleHR9YCwgSWNvbiA9ICgkc3RhdGUgPT09IFwiY29ubmVjdGluZ1wiID8gSWNvbnMuQWlyUGxheUJ1dHRvbi5Db25uZWN0aW5nIDogJHN0YXRlID09PSBcImNvbm5lY3RlZFwiID8gSWNvbnMuQWlyUGxheUJ1dHRvbi5Db25uZWN0ZWQgOiBudWxsKSA/PyBJY29ucy5BaXJQbGF5QnV0dG9uLkRlZmF1bHQ7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VG9vbHRpcCwgeyBjb250ZW50OiBhaXJQbGF5VGV4dCwgcGxhY2VtZW50OiB0b29sdGlwIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEFpclBsYXlCdXR0b24sIHsgY2xhc3NOYW1lOiBcInZkcy1haXJwbGF5LWJ1dHRvbiB2ZHMtYnV0dG9uXCIsIFwiYXJpYS1sYWJlbFwiOiBsYWJlbCB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IGNsYXNzTmFtZTogXCJ2ZHMtaWNvblwiIH0pKSk7XG59XG5EZWZhdWx0QWlyUGxheUJ1dHRvbi5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEFpclBsYXlCdXR0b25cIjtcbmZ1bmN0aW9uIERlZmF1bHRHb29nbGVDYXN0QnV0dG9uKHsgdG9vbHRpcCB9KSB7XG4gIGNvbnN0IHsgaWNvbnM6IEljb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBnb29nbGVDYXN0VGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiR29vZ2xlIENhc3RcIiksICRzdGF0ZSA9IHVzZU1lZGlhU3RhdGUoXCJyZW1vdGVQbGF5YmFja1N0YXRlXCIpLCBzdGF0ZVRleHQgPSB1c2VEZWZhdWx0TGF5b3V0V29yZCh1cHBlcmNhc2VGaXJzdENoYXIoJHN0YXRlKSksIGxhYmVsID0gYCR7Z29vZ2xlQ2FzdFRleHR9ICR7c3RhdGVUZXh0fWAsIEljb24gPSAoJHN0YXRlID09PSBcImNvbm5lY3RpbmdcIiA/IEljb25zLkdvb2dsZUNhc3RCdXR0b24uQ29ubmVjdGluZyA6ICRzdGF0ZSA9PT0gXCJjb25uZWN0ZWRcIiA/IEljb25zLkdvb2dsZUNhc3RCdXR0b24uQ29ubmVjdGVkIDogbnVsbCkgPz8gSWNvbnMuR29vZ2xlQ2FzdEJ1dHRvbi5EZWZhdWx0O1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRvb2x0aXAsIHsgY29udGVudDogZ29vZ2xlQ2FzdFRleHQsIHBsYWNlbWVudDogdG9vbHRpcCB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChHb29nbGVDYXN0QnV0dG9uLCB7IGNsYXNzTmFtZTogXCJ2ZHMtZ29vZ2xlLWNhc3QtYnV0dG9uIHZkcy1idXR0b25cIiwgXCJhcmlhLWxhYmVsXCI6IGxhYmVsIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uXCIgfSkpKTtcbn1cbkRlZmF1bHRHb29nbGVDYXN0QnV0dG9uLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0R29vZ2xlQ2FzdEJ1dHRvblwiO1xuZnVuY3Rpb24gRGVmYXVsdExpdmVCdXR0b24oKSB7XG4gIGNvbnN0ICRsaXZlID0gdXNlTWVkaWFTdGF0ZShcImxpdmVcIiksIGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJTa2lwIFRvIExpdmVcIiksIGxpdmVUZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJMSVZFXCIpO1xuICByZXR1cm4gJGxpdmUgPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChMaXZlQnV0dG9uLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbGl2ZS1idXR0b25cIiwgXCJhcmlhLWxhYmVsXCI6IGxhYmVsIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbGl2ZS1idXR0b24tdGV4dFwiIH0sIGxpdmVUZXh0KSkgOiBudWxsO1xufVxuRGVmYXVsdExpdmVCdXR0b24uZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRMaXZlQnV0dG9uXCI7XG5mdW5jdGlvbiBEZWZhdWx0RG93bmxvYWRCdXR0b24oKSB7XG4gIGNvbnN0IHsgZG93bmxvYWQsIGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgJHNyYyA9IHVzZU1lZGlhU3RhdGUoXCJzb3VyY2VcIiksICR0aXRsZSA9IHVzZU1lZGlhU3RhdGUoXCJ0aXRsZVwiKSwgZmlsZSA9IGdldERvd25sb2FkRmlsZSh7XG4gICAgdGl0bGU6ICR0aXRsZSxcbiAgICBzcmM6ICRzcmMsXG4gICAgZG93bmxvYWRcbiAgfSksIGRvd25sb2FkVGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiRG93bmxvYWRcIik7XG4gIHJldHVybiBmaWxlID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRvb2x0aXAsIHsgY29udGVudDogZG93bmxvYWRUZXh0LCBwbGFjZW1lbnQ6IFwidG9wXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgXCJhXCIsXG4gICAge1xuICAgICAgcm9sZTogXCJidXR0b25cIixcbiAgICAgIGNsYXNzTmFtZTogXCJ2ZHMtZG93bmxvYWQtYnV0dG9uIHZkcy1idXR0b25cIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBkb3dubG9hZFRleHQsXG4gICAgICBocmVmOiBmaWxlLnVybCArIGA/ZG93bmxvYWQ9JHtmaWxlLm5hbWV9YCxcbiAgICAgIGRvd25sb2FkOiBmaWxlLm5hbWUsXG4gICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICB9LFxuICAgIEljb25zLkRvd25sb2FkQnV0dG9uID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbnMuRG93bmxvYWRCdXR0b24uRGVmYXVsdCwgeyBjbGFzc05hbWU6IFwidmRzLWljb25cIiB9KSA6IG51bGxcbiAgKSkgOiBudWxsO1xufVxuRGVmYXVsdERvd25sb2FkQnV0dG9uLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0RG93bmxvYWRCdXR0b25cIjtcblxuZnVuY3Rpb24gRGVmYXVsdENhcHRpb25zKCkge1xuICBjb25zdCBleGFtcGxlVGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiQ2FwdGlvbnMgbG9vayBsaWtlIHRoaXNcIik7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChDYXB0aW9ucywgeyBjbGFzc05hbWU6IFwidmRzLWNhcHRpb25zXCIsIGV4YW1wbGVUZXh0IH0pO1xufVxuRGVmYXVsdENhcHRpb25zLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0Q2FwdGlvbnNcIjtcblxuZnVuY3Rpb24gRGVmYXVsdENvbnRyb2xzU3BhY2VyKCkge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwidmRzLWNvbnRyb2xzLXNwYWNlclwiIH0pO1xufVxuRGVmYXVsdENvbnRyb2xzU3BhY2VyLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0Q29udHJvbHNTcGFjZXJcIjtcblxuZnVuY3Rpb24gdXNlUGFyZW50RGlhbG9nRWwoKSB7XG4gIGNvbnN0IHsgbGF5b3V0RWwgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksICRsYXlvdXRFbCA9IHVzZVNpZ25hbChsYXlvdXRFbCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+ICRsYXlvdXRFbD8uY2xvc2VzdChcImRpYWxvZ1wiKSwgWyRsYXlvdXRFbF0pO1xufVxuXG5mdW5jdGlvbiBEZWZhdWx0Q2hhcHRlcnNNZW51KHsgdG9vbHRpcCwgcGxhY2VtZW50LCBwb3J0YWxDbGFzcyA9IFwiXCIgfSkge1xuICBjb25zdCB7XG4gICAgc2hvd01lbnVEZWxheSxcbiAgICBub01vZGFsLFxuICAgIGlzU21hbGxMYXlvdXQsXG4gICAgaWNvbnM6IEljb25zLFxuICAgIG1lbnVHcm91cCxcbiAgICBtZW51Q29udGFpbmVyLFxuICAgIGNvbG9yU2NoZW1lXG4gIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBjaGFwdGVyc1RleHQgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIkNoYXB0ZXJzXCIpLCBvcHRpb25zID0gdXNlQ2hhcHRlck9wdGlvbnMoKSwgZGlzYWJsZWQgPSAhb3B0aW9ucy5sZW5ndGgsIHsgdGh1bWJuYWlscyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgJHNyYyA9IHVzZU1lZGlhU3RhdGUoXCJjdXJyZW50U3JjXCIpLCAkdmlld1R5cGUgPSB1c2VNZWRpYVN0YXRlKFwidmlld1R5cGVcIiksICRvZmZzZXQgPSAhaXNTbWFsbExheW91dCAmJiBtZW51R3JvdXAgPT09IFwiYm90dG9tXCIgJiYgJHZpZXdUeXBlID09PSBcInZpZGVvXCIgPyAyNiA6IDAsICRSZW1vdGlvblRodW1ibmFpbCA9IHVzZVNpZ25hbChSZW1vdGlvblRodW1ibmFpbCksIGNvbG9yU2NoZW1lQ2xhc3MgPSB1c2VDb2xvclNjaGVtZUNsYXNzKGNvbG9yU2NoZW1lKSwgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSwgZGlhbG9nRWwgPSB1c2VQYXJlbnREaWFsb2dFbCgpO1xuICBpZiAoZGlzYWJsZWQpIHJldHVybiBudWxsO1xuICBmdW5jdGlvbiBvbk9wZW4oKSB7XG4gICAgZmx1c2hTeW5jKCgpID0+IHtcbiAgICAgIHNldElzT3Blbih0cnVlKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvbkNsb3NlKCkge1xuICAgIHNldElzT3BlbihmYWxzZSk7XG4gIH1cbiAgY29uc3QgQ29udGVudCA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIEl0ZW1zLFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ2ZHMtY2hhcHRlcnMtbWVudS1pdGVtcyB2ZHMtbWVudS1pdGVtc1wiLFxuICAgICAgcGxhY2VtZW50LFxuICAgICAgb2Zmc2V0OiAkb2Zmc2V0XG4gICAgfSxcbiAgICBpc09wZW4gPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFJvb3QkMSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInZkcy1jaGFwdGVycy1yYWRpby1ncm91cCB2ZHMtcmFkaW8tZ3JvdXBcIixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuc2VsZWN0ZWRWYWx1ZSxcbiAgICAgICAgXCJkYXRhLXRodW1ibmFpbHNcIjogdGh1bWJuYWlscyA/IFwiXCIgOiBudWxsXG4gICAgICB9LFxuICAgICAgb3B0aW9ucy5tYXAoXG4gICAgICAgICh7IGN1ZSwgbGFiZWwsIHZhbHVlLCBzdGFydFRpbWVUZXh0LCBkdXJhdGlvblRleHQsIHNlbGVjdCwgc2V0UHJvZ3Jlc3NWYXIgfSkgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgSXRlbSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidmRzLWNoYXB0ZXItcmFkaW8gdmRzLXJhZGlvXCIsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGtleTogdmFsdWUsXG4gICAgICAgICAgICBvblNlbGVjdDogc2VsZWN0LFxuICAgICAgICAgICAgcmVmOiBzZXRQcm9ncmVzc1ZhclxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGh1bWJuYWlscyA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkMiwgeyBzcmM6IHRodW1ibmFpbHMsIGNsYXNzTmFtZTogXCJ2ZHMtdGh1bWJuYWlsXCIsIHRpbWU6IGN1ZS5zdGFydFRpbWUgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW1nLCBudWxsKSkgOiAkUmVtb3Rpb25UaHVtYm5haWwgJiYgaXNSZW1vdGlvblNyYygkc3JjKSA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KCRSZW1vdGlvblRodW1ibmFpbCwgeyBjbGFzc05hbWU6IFwidmRzLXRodW1ibmFpbFwiLCBmcmFtZTogY3VlLnN0YXJ0VGltZSAqICRzcmMuZnBzIH0pIDogbnVsbCxcbiAgICAgICAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtY2hhcHRlci1yYWRpby1jb250ZW50XCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInZkcy1jaGFwdGVyLXJhZGlvLWxhYmVsXCIgfSwgbGFiZWwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwidmRzLWNoYXB0ZXItcmFkaW8tc3RhcnQtdGltZVwiIH0sIHN0YXJ0VGltZVRleHQpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwidmRzLWNoYXB0ZXItcmFkaW8tZHVyYXRpb25cIiB9LCBkdXJhdGlvblRleHQpKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSA6IG51bGxcbiAgKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIFJvb3QkMyxcbiAgICB7XG4gICAgICBjbGFzc05hbWU6IFwidmRzLWNoYXB0ZXJzLW1lbnUgdmRzLW1lbnVcIixcbiAgICAgIHNob3dEZWxheTogc2hvd01lbnVEZWxheSxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9uQ2xvc2VcbiAgICB9LFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRUb29sdGlwLCB7IGNvbnRlbnQ6IGNoYXB0ZXJzVGV4dCwgcGxhY2VtZW50OiB0b29sdGlwIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQnV0dG9uLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IFwidmRzLW1lbnUtYnV0dG9uIHZkcy1idXR0b25cIixcbiAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBjaGFwdGVyc1RleHRcbiAgICAgIH0sXG4gICAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29ucy5NZW51LkNoYXB0ZXJzLCB7IGNsYXNzTmFtZTogXCJ2ZHMtaWNvblwiIH0pXG4gICAgKSksXG4gICAgbm9Nb2RhbCB8fCAhaXNTbWFsbExheW91dCA/IENvbnRlbnQgOiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFBvcnRhbCxcbiAgICAgIHtcbiAgICAgICAgY29udGFpbmVyOiBtZW51Q29udGFpbmVyID8/IGRpYWxvZ0VsLFxuICAgICAgICBjbGFzc05hbWU6IHBvcnRhbENsYXNzICsgKGNvbG9yU2NoZW1lQ2xhc3MgPyBgICR7Y29sb3JTY2hlbWVDbGFzc31gIDogXCJcIiksXG4gICAgICAgIGRpc2FibGVkOiBcImZ1bGxzY3JlZW5cIixcbiAgICAgICAgXCJkYXRhLXNtXCI6IGlzU21hbGxMYXlvdXQgPyBcIlwiIDogbnVsbCxcbiAgICAgICAgXCJkYXRhLWxnXCI6ICFpc1NtYWxsTGF5b3V0ID8gXCJcIiA6IG51bGwsXG4gICAgICAgIFwiZGF0YS1zaXplXCI6IGlzU21hbGxMYXlvdXQgPyBcInNtXCIgOiBcImxnXCJcbiAgICAgIH0sXG4gICAgICBDb250ZW50XG4gICAgKVxuICApO1xufVxuRGVmYXVsdENoYXB0ZXJzTWVudS5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdENoYXB0ZXJzTWVudVwiO1xuXG5jb25zdCBGT05UX0NPTE9SX09QVElPTiA9IHtcbiAgdHlwZTogXCJjb2xvclwiXG59O1xuY29uc3QgRk9OVF9GQU1JTFlfT1BUSU9OID0ge1xuICB0eXBlOiBcInJhZGlvXCIsXG4gIHZhbHVlczoge1xuICAgIFwiTW9ub3NwYWNlZCBTZXJpZlwiOiBcIm1vbm8tc2VyaWZcIixcbiAgICBcIlByb3BvcnRpb25hbCBTZXJpZlwiOiBcInByby1zZXJpZlwiLFxuICAgIFwiTW9ub3NwYWNlZCBTYW5zLVNlcmlmXCI6IFwibW9uby1zYW5zXCIsXG4gICAgXCJQcm9wb3J0aW9uYWwgU2Fucy1TZXJpZlwiOiBcInByby1zYW5zXCIsXG4gICAgQ2FzdWFsOiBcImNhc3VhbFwiLFxuICAgIEN1cnNpdmU6IFwiY3Vyc2l2ZVwiLFxuICAgIFwiU21hbGwgQ2FwaXRhbHNcIjogXCJjYXBpdGFsc1wiXG4gIH1cbn07XG5jb25zdCBGT05UX1NJWkVfT1BUSU9OID0ge1xuICB0eXBlOiBcInNsaWRlclwiLFxuICBtaW46IDAsXG4gIG1heDogNDAwLFxuICBzdGVwOiAyNSxcbiAgdXBJY29uOiBudWxsLFxuICBkb3duSWNvbjogbnVsbFxufTtcbmNvbnN0IEZPTlRfT1BBQ0lUWV9PUFRJT04gPSB7XG4gIHR5cGU6IFwic2xpZGVyXCIsXG4gIG1pbjogMCxcbiAgbWF4OiAxMDAsXG4gIHN0ZXA6IDUsXG4gIHVwSWNvbjogbnVsbCxcbiAgZG93bkljb246IG51bGxcbn07XG5jb25zdCBGT05UX1RFWFRfU0hBRE9XX09QVElPTiA9IHtcbiAgdHlwZTogXCJyYWRpb1wiLFxuICB2YWx1ZXM6IFtcIk5vbmVcIiwgXCJEcm9wIFNoYWRvd1wiLCBcIlJhaXNlZFwiLCBcIkRlcHJlc3NlZFwiLCBcIk91dGxpbmVcIl1cbn07XG5jb25zdCBGT05UX0RFRkFVTFRTID0ge1xuICBmb250RmFtaWx5OiBcInByby1zYW5zXCIsXG4gIGZvbnRTaXplOiBcIjEwMCVcIixcbiAgdGV4dENvbG9yOiBcIiNmZmZmZmZcIixcbiAgdGV4dE9wYWNpdHk6IFwiMTAwJVwiLFxuICB0ZXh0U2hhZG93OiBcIm5vbmVcIixcbiAgdGV4dEJnOiBcIiMwMDAwMDBcIixcbiAgdGV4dEJnT3BhY2l0eTogXCIxMDAlXCIsXG4gIGRpc3BsYXlCZzogXCIjMDAwMDAwXCIsXG4gIGRpc3BsYXlCZ09wYWNpdHk6IFwiMCVcIlxufTtcbmNvbnN0IEZPTlRfU0lHTkFMUyA9IE9iamVjdC5rZXlzKEZPTlRfREVGQVVMVFMpLnJlZHVjZShcbiAgKHByZXYsIHR5cGUpID0+ICh7XG4gICAgLi4ucHJldixcbiAgICBbdHlwZV06IHNpZ25hbChGT05UX0RFRkFVTFRTW3R5cGVdKVxuICB9KSxcbiAge31cbik7XG5pZiAoIUlTX1NFUlZFUikge1xuICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LmtleXMoRk9OVF9TSUdOQUxTKSkge1xuICAgIGNvbnN0IHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYHZkcy1wbGF5ZXI6JHtjYW1lbFRvS2ViYWJDYXNlKHR5cGUpfWApO1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIEZPTlRfU0lHTkFMU1t0eXBlXS5zZXQodmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiBvbkZvbnRSZXNldCgpIHtcbiAgZm9yIChjb25zdCB0eXBlIG9mIE9iamVjdC5rZXlzKEZPTlRfU0lHTkFMUykpIHtcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBGT05UX0RFRkFVTFRTW3R5cGVdO1xuICAgIEZPTlRfU0lHTkFMU1t0eXBlXS5zZXQoZGVmYXVsdFZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoZXhUb1JnYihoZXgpIHtcbiAgY29uc3QgeyBzdHlsZSB9ID0gbmV3IE9wdGlvbigpO1xuICBzdHlsZS5jb2xvciA9IGhleDtcbiAgcmV0dXJuIHN0eWxlLmNvbG9yLm1hdGNoKC9cXCgoLio/KVxcKS8pWzFdLnJlcGxhY2UoLywvZywgXCIgXCIpO1xufVxuXG5sZXQgaXNXYXRjaGluZ1ZhcnMgPSBmYWxzZSwgcGxheWVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG5mdW5jdGlvbiB1cGRhdGVGb250Q3NzVmFycygpIHtcbiAgaWYgKElTX1NFUlZFUikgcmV0dXJuO1xuICBjb25zdCB7IHBsYXllciB9ID0gdXNlTWVkaWFDb250ZXh0JDEoKTtcbiAgcGxheWVycy5hZGQocGxheWVyKTtcbiAgb25EaXNwb3NlKCgpID0+IHBsYXllcnMuZGVsZXRlKHBsYXllcikpO1xuICBpZiAoIWlzV2F0Y2hpbmdWYXJzKSB7XG4gICAgc2NvcGVkKCgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBrZXlzT2YoRk9OVF9TSUdOQUxTKSkge1xuICAgICAgICBjb25zdCAkdmFsdWUgPSBGT05UX1NJR05BTFNbdHlwZV0sIGRlZmF1bHRWYWx1ZSA9IEZPTlRfREVGQVVMVFNbdHlwZV0sIHZhck5hbWUgPSBgLS1tZWRpYS11c2VyLSR7Y2FtZWxUb0tlYmFiQ2FzZSh0eXBlKX1gLCBzdG9yYWdlS2V5ID0gYHZkcy1wbGF5ZXI6JHtjYW1lbFRvS2ViYWJDYXNlKHR5cGUpfWA7XG4gICAgICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSAkdmFsdWUoKSwgaXNEZWZhdWx0VmFyVmFsdWUgPSB2YWx1ZSA9PT0gZGVmYXVsdFZhbHVlLCB2YXJWYWx1ZSA9ICFpc0RlZmF1bHRWYXJWYWx1ZSA/IGdldENzc1ZhclZhbHVlKHBsYXllciwgdHlwZSwgdmFsdWUpIDogbnVsbDtcbiAgICAgICAgICBmb3IgKGNvbnN0IHBsYXllcjIgb2YgcGxheWVycykge1xuICAgICAgICAgICAgcGxheWVyMi5lbD8uc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNEZWZhdWx0VmFyVmFsdWUpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHN0b3JhZ2VLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBudWxsKTtcbiAgICBpc1dhdGNoaW5nVmFycyA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENzc1ZhclZhbHVlKHBsYXllciwgdHlwZSwgdmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImZvbnRGYW1pbHlcIjpcbiAgICAgIGNvbnN0IGZvbnRWYXJpYW50ID0gdmFsdWUgPT09IFwiY2FwaXRhbHNcIiA/IFwic21hbGwtY2Fwc1wiIDogXCJcIjtcbiAgICAgIHBsYXllci5lbD8uc3R5bGUuc2V0UHJvcGVydHkoXCItLW1lZGlhLXVzZXItZm9udC12YXJpYW50XCIsIGZvbnRWYXJpYW50KTtcbiAgICAgIHJldHVybiBnZXRGb250RmFtaWx5Q1NTVmFyVmFsdWUodmFsdWUpO1xuICAgIGNhc2UgXCJmb250U2l6ZVwiOlxuICAgIGNhc2UgXCJ0ZXh0T3BhY2l0eVwiOlxuICAgIGNhc2UgXCJ0ZXh0QmdPcGFjaXR5XCI6XG4gICAgY2FzZSBcImRpc3BsYXlCZ09wYWNpdHlcIjpcbiAgICAgIHJldHVybiBwZXJjZW50VG9SYXRpbyh2YWx1ZSk7XG4gICAgY2FzZSBcInRleHRDb2xvclwiOlxuICAgICAgcmV0dXJuIGByZ2IoJHtoZXhUb1JnYih2YWx1ZSl9IC8gdmFyKC0tbWVkaWEtdXNlci10ZXh0LW9wYWNpdHksIDEpKWA7XG4gICAgY2FzZSBcInRleHRTaGFkb3dcIjpcbiAgICAgIHJldHVybiBnZXRUZXh0U2hhZG93Q3NzVmFyVmFsdWUodmFsdWUpO1xuICAgIGNhc2UgXCJ0ZXh0QmdcIjpcbiAgICAgIHJldHVybiBgcmdiKCR7aGV4VG9SZ2IodmFsdWUpfSAvIHZhcigtLW1lZGlhLXVzZXItdGV4dC1iZy1vcGFjaXR5LCAxKSlgO1xuICAgIGNhc2UgXCJkaXNwbGF5QmdcIjpcbiAgICAgIHJldHVybiBgcmdiKCR7aGV4VG9SZ2IodmFsdWUpfSAvIHZhcigtLW1lZGlhLXVzZXItZGlzcGxheS1iZy1vcGFjaXR5LCAxKSlgO1xuICB9XG59XG5mdW5jdGlvbiBwZXJjZW50VG9SYXRpbyh2YWx1ZSkge1xuICByZXR1cm4gKHBhcnNlSW50KHZhbHVlKSAvIDEwMCkudG9TdHJpbmcoKTtcbn1cbmZ1bmN0aW9uIGdldEZvbnRGYW1pbHlDU1NWYXJWYWx1ZSh2YWx1ZSkge1xuICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgY2FzZSBcIm1vbm8tc2VyaWZcIjpcbiAgICAgIHJldHVybiAnXCJDb3VyaWVyIE5ld1wiLCBDb3VyaWVyLCBcIk5pbWJ1cyBNb25vIExcIiwgXCJDdXRpdmUgTW9ub1wiLCBtb25vc3BhY2UnO1xuICAgIGNhc2UgXCJtb25vLXNhbnNcIjpcbiAgICAgIHJldHVybiAnXCJEZWphIFZ1IFNhbnMgTW9ub1wiLCBcIkx1Y2lkYSBDb25zb2xlXCIsIE1vbmFjbywgQ29uc29sYXMsIFwiUFQgTW9ub1wiLCBtb25vc3BhY2UnO1xuICAgIGNhc2UgXCJwcm8tc2Fuc1wiOlxuICAgICAgcmV0dXJuICdSb2JvdG8sIFwiQXJpYWwgVW5pY29kZSBNc1wiLCBBcmlhbCwgSGVsdmV0aWNhLCBWZXJkYW5hLCBcIlBUIFNhbnMgQ2FwdGlvblwiLCBzYW5zLXNlcmlmJztcbiAgICBjYXNlIFwiY2FzdWFsXCI6XG4gICAgICByZXR1cm4gJ1wiQ29taWMgU2FucyBNU1wiLCBJbXBhY3QsIEhhbmRsZWUsIGZhbnRhc3knO1xuICAgIGNhc2UgXCJjdXJzaXZlXCI6XG4gICAgICByZXR1cm4gJ1wiTW9ub3R5cGUgQ29yc2l2YVwiLCBcIlVSVyBDaGFuY2VyeSBMXCIsIFwiQXBwbGUgQ2hhbmNlcnlcIiwgXCJEYW5jaW5nIFNjcmlwdFwiLCBjdXJzaXZlJztcbiAgICBjYXNlIFwiY2FwaXRhbHNcIjpcbiAgICAgIHJldHVybiAnXCJBcmlhbCBVbmljb2RlIE1zXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIFZlcmRhbmEsIFwiTWFyY2VsbHVzIFNDXCIsIHNhbnMtc2VyaWYgKyBmb250LXZhcmlhbnQ9c21hbGwtY2Fwcyc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnXCJUaW1lcyBOZXcgUm9tYW5cIiwgVGltZXMsIEdlb3JnaWEsIENhbWJyaWEsIFwiUFQgU2VyaWYgQ2FwdGlvblwiLCBzZXJpZic7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRleHRTaGFkb3dDc3NWYXJWYWx1ZSh2YWx1ZSkge1xuICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgY2FzZSBcImRyb3Agc2hhZG93XCI6XG4gICAgICByZXR1cm4gXCJyZ2IoMzQsIDM0LCAzNCkgMS44NjM4OXB4IDEuODYzODlweCAyLjc5NTgzcHgsIHJnYigzNCwgMzQsIDM0KSAxLjg2Mzg5cHggMS44NjM4OXB4IDMuNzI3NzhweCwgcmdiKDM0LCAzNCwgMzQpIDEuODYzODlweCAxLjg2Mzg5cHggNC42NTk3MnB4XCI7XG4gICAgY2FzZSBcInJhaXNlZFwiOlxuICAgICAgcmV0dXJuIFwicmdiKDM0LCAzNCwgMzQpIDFweCAxcHgsIHJnYigzNCwgMzQsIDM0KSAycHggMnB4XCI7XG4gICAgY2FzZSBcImRlcHJlc3NlZFwiOlxuICAgICAgcmV0dXJuIFwicmdiKDIwNCwgMjA0LCAyMDQpIDFweCAxcHgsIHJnYigzNCwgMzQsIDM0KSAtMXB4IC0xcHhcIjtcbiAgICBjYXNlIFwib3V0bGluZVwiOlxuICAgICAgcmV0dXJuIFwicmdiKDM0LCAzNCwgMzQpIDBweCAwcHggMS44NjM4OXB4LCByZ2IoMzQsIDM0LCAzNCkgMHB4IDBweCAxLjg2Mzg5cHgsIHJnYigzNCwgMzQsIDM0KSAwcHggMHB4IDEuODYzODlweCwgcmdiKDM0LCAzNCwgMzQpIDBweCAwcHggMS44NjM4OXB4LCByZ2IoMzQsIDM0LCAzNCkgMHB4IDBweCAxLjg2Mzg5cHhcIjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gRGVmYXVsdE1lbnVTZWN0aW9uKHsgbGFiZWwsIHZhbHVlLCBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IGlkID0gUmVhY3QudXNlSWQoKTtcbiAgaWYgKCFsYWJlbCkge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1zZWN0aW9uXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwidmRzLW1lbnUtc2VjdGlvbi1ib2R5XCIgfSwgY2hpbGRyZW4pKTtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIsIHsgY2xhc3NOYW1lOiBcInZkcy1tZW51LXNlY3Rpb25cIiwgcm9sZTogXCJncm91cFwiLCBcImFyaWEtbGFiZWxsZWRieVwiOiBpZCB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1zZWN0aW9uLXRpdGxlXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoZWFkZXJcIiwgeyBpZCB9LCBsYWJlbCksIHZhbHVlID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwidmRzLW1lbnUtc2VjdGlvbi12YWx1ZVwiIH0sIHZhbHVlKSA6IG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1zZWN0aW9uLWJvZHlcIiB9LCBjaGlsZHJlbikpO1xufVxuRGVmYXVsdE1lbnVTZWN0aW9uLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0TWVudVNlY3Rpb25cIjtcbmZ1bmN0aW9uIERlZmF1bHRNZW51QnV0dG9uKHsgbGFiZWwsIGhpbnQgPSBcIlwiLCBJY29uLCBkaXNhYmxlZCA9IGZhbHNlIH0pIHtcbiAgY29uc3QgeyBpY29uczogSWNvbnMgfSA9IFJlYWN0LnVzZUNvbnRleHQoRGVmYXVsdExheW91dENvbnRleHQpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1pdGVtXCIsIGRpc2FibGVkIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLk1lbnUuQXJyb3dMZWZ0LCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1jbG9zZS1pY29uIHZkcy1pY29uXCIgfSksIEljb24gPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1pdGVtLWljb24gdmRzLWljb25cIiB9KSA6IG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1pdGVtLWxhYmVsXCIgfSwgbGFiZWwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwidmRzLW1lbnUtaXRlbS1oaW50XCIgfSwgaGludCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLk1lbnUuQXJyb3dSaWdodCwgeyBjbGFzc05hbWU6IFwidmRzLW1lbnUtb3Blbi1pY29uIHZkcy1pY29uXCIgfSkpO1xufVxuRGVmYXVsdE1lbnVCdXR0b24uZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRNZW51QnV0dG9uXCI7XG5mdW5jdGlvbiBEZWZhdWx0TWVudUl0ZW0oeyBsYWJlbCwgY2hpbGRyZW4gfSkge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwidmRzLW1lbnUtaXRlbVwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInZkcy1tZW51LWl0ZW0tbGFiZWxcIiB9LCBsYWJlbCksIGNoaWxkcmVuKTtcbn1cbkRlZmF1bHRNZW51SXRlbS5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdE1lbnVJdGVtXCI7XG5mdW5jdGlvbiBEZWZhdWx0TWVudVJhZGlvR3JvdXAoeyB2YWx1ZSwgb3B0aW9ucywgb25DaGFuZ2UgfSkge1xuICBjb25zdCB7IGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkMSwgeyBjbGFzc05hbWU6IFwidmRzLXJhZGlvLWdyb3VwXCIsIHZhbHVlLCBvbkNoYW5nZSB9LCBvcHRpb25zLm1hcCgob3B0aW9uKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtLCB7IGNsYXNzTmFtZTogXCJ2ZHMtcmFkaW9cIiwgdmFsdWU6IG9wdGlvbi52YWx1ZSwga2V5OiBvcHRpb24udmFsdWUgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbnMuTWVudS5SYWRpb0NoZWNrLCB7IGNsYXNzTmFtZTogXCJ2ZHMtaWNvblwiIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwidmRzLXJhZGlvLWxhYmVsXCIsIFwiZGF0YS1wYXJ0XCI6IFwibGFiZWxcIiB9LCBvcHRpb24ubGFiZWwpKSkpO1xufVxuRGVmYXVsdE1lbnVSYWRpb0dyb3VwLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0TWVudVJhZGlvR3JvdXBcIjtcbmZ1bmN0aW9uIGNyZWF0ZVJhZGlvT3B0aW9ucyhlbnRyaWVzKSB7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IGlzQXJyYXkoZW50cmllcykgPyBlbnRyaWVzLm1hcCgoZW50cnkpID0+ICh7IGxhYmVsOiBlbnRyeSwgdmFsdWU6IGVudHJ5LnRvTG93ZXJDYXNlKCkgfSkpIDogT2JqZWN0LmtleXMoZW50cmllcykubWFwKChsYWJlbCkgPT4gKHsgbGFiZWwsIHZhbHVlOiBlbnRyaWVzW2xhYmVsXSB9KSksXG4gICAgW2VudHJpZXNdXG4gICk7XG59XG5cbmZ1bmN0aW9uIERlZmF1bHRNZW51U2xpZGVySXRlbSh7XG4gIGxhYmVsLFxuICB2YWx1ZSxcbiAgVXBJY29uLFxuICBEb3duSWNvbixcbiAgY2hpbGRyZW4sXG4gIGlzTWluLFxuICBpc01heFxufSkge1xuICBjb25zdCBoYXNUaXRsZSA9IGxhYmVsIHx8IHZhbHVlLCBDb250ZW50ID0gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIERvd25JY29uID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRG93bkljb24sIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uIGRvd25cIiB9KSA6IG51bGwsIGNoaWxkcmVuLCBVcEljb24gPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChVcEljb24sIHsgY2xhc3NOYW1lOiBcInZkcy1pY29uIHVwXCIgfSkgOiBudWxsKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIFwiZGl2XCIsXG4gICAge1xuICAgICAgY2xhc3NOYW1lOiBgdmRzLW1lbnUtaXRlbSB2ZHMtbWVudS1zbGlkZXItaXRlbSR7aGFzVGl0bGUgPyBcIiBncm91cFwiIDogXCJcIn1gLFxuICAgICAgXCJkYXRhLW1pblwiOiBpc01pbiA/IFwiXCIgOiBudWxsLFxuICAgICAgXCJkYXRhLW1heFwiOiBpc01heCA/IFwiXCIgOiBudWxsXG4gICAgfSxcbiAgICBoYXNUaXRsZSA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1zbGlkZXItdGl0bGVcIiB9LCBsYWJlbCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIGxhYmVsKSA6IG51bGwsIHZhbHVlID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgdmFsdWUpIDogbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInZkcy1tZW51LXNsaWRlci1ib2R5XCIgfSwgQ29udGVudCkpIDogQ29udGVudFxuICApO1xufVxuRGVmYXVsdE1lbnVTbGlkZXJJdGVtLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0TWVudVNsaWRlckl0ZW1cIjtcbmZ1bmN0aW9uIERlZmF1bHRTbGlkZXJQYXJ0cygpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFjaywgeyBjbGFzc05hbWU6IFwidmRzLXNsaWRlci10cmFja1wiIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFja0ZpbGwsIHsgY2xhc3NOYW1lOiBcInZkcy1zbGlkZXItdHJhY2stZmlsbCB2ZHMtc2xpZGVyLXRyYWNrXCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFRodW1iLCB7IGNsYXNzTmFtZTogXCJ2ZHMtc2xpZGVyLXRodW1iXCIgfSkpO1xufVxuRGVmYXVsdFNsaWRlclBhcnRzLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0U2xpZGVyUGFydHNcIjtcbmZ1bmN0aW9uIERlZmF1bHRTbGlkZXJTdGVwcygpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFN0ZXBzLCB7IGNsYXNzTmFtZTogXCJ2ZHMtc2xpZGVyLXN0ZXBzXCIgfSwgKHN0ZXApID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInZkcy1zbGlkZXItc3RlcFwiLCBrZXk6IFN0cmluZyhzdGVwKSB9KSk7XG59XG5EZWZhdWx0U2xpZGVyU3RlcHMuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRTbGlkZXJTdGVwc1wiO1xuXG5mdW5jdGlvbiBEZWZhdWx0Rm9udE1lbnUoKSB7XG4gIGNvbnN0IGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJDYXB0aW9uIFN0eWxlc1wiKSwgJGhhc0NhcHRpb25zID0gdXNlTWVkaWFTdGF0ZShcImhhc0NhcHRpb25zXCIpLCBmb250U2VjdGlvbkxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJGb250XCIpLCB0ZXh0U2VjdGlvbkxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJUZXh0XCIpLCB0ZXh0QmdTZWN0aW9uTGFiZWwgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIlRleHQgQmFja2dyb3VuZFwiKSwgZGlzcGxheUJnU2VjdGlvbkxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJEaXNwbGF5IEJhY2tncm91bmRcIik7XG4gIGlmICghJGhhc0NhcHRpb25zKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkMywgeyBjbGFzc05hbWU6IFwidmRzLWZvbnQtbWVudSB2ZHMtbWVudVwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRNZW51QnV0dG9uLCB7IGxhYmVsIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtcywgeyBjbGFzc05hbWU6IFwidmRzLWZvbnQtc3R5bGUtaXRlbXMgdmRzLW1lbnUtaXRlbXNcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TWVudVNlY3Rpb24sIHsgbGFiZWw6IGZvbnRTZWN0aW9uTGFiZWwgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEZvbnRGYW1pbHlNZW51LCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEZvbnRTaXplU2xpZGVyLCBudWxsKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRNZW51U2VjdGlvbiwgeyBsYWJlbDogdGV4dFNlY3Rpb25MYWJlbCB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VGV4dENvbG9ySW5wdXQsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VGV4dFNoYWRvd01lbnUsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VGV4dE9wYWNpdHlTbGlkZXIsIG51bGwpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdE1lbnVTZWN0aW9uLCB7IGxhYmVsOiB0ZXh0QmdTZWN0aW9uTGFiZWwgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRleHRCZ0lucHV0LCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRleHRCZ09wYWNpdHlTbGlkZXIsIG51bGwpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdE1lbnVTZWN0aW9uLCB7IGxhYmVsOiBkaXNwbGF5QmdTZWN0aW9uTGFiZWwgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdERpc3BsYXlCZ0lucHV0LCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdERpc3BsYXlCZ09wYWNpdHlTbGlkZXIsIG51bGwpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdE1lbnVTZWN0aW9uLCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0UmVzZXRNZW51SXRlbSwgbnVsbCkpKSk7XG59XG5EZWZhdWx0Rm9udE1lbnUuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRGb250TWVudVwiO1xuZnVuY3Rpb24gRGVmYXVsdEZvbnRGYW1pbHlNZW51KCkge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEZvbnRTZXR0aW5nLCB7IGxhYmVsOiBcIkZhbWlseVwiLCB0eXBlOiBcImZvbnRGYW1pbHlcIiwgb3B0aW9uOiBGT05UX0ZBTUlMWV9PUFRJT04gfSk7XG59XG5EZWZhdWx0Rm9udEZhbWlseU1lbnUuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRGb250RmFtaWx5TWVudVwiO1xuZnVuY3Rpb24gRGVmYXVsdEZvbnRTaXplU2xpZGVyKCkge1xuICBjb25zdCB7IGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgb3B0aW9uID0ge1xuICAgIC4uLkZPTlRfU0laRV9PUFRJT04sXG4gICAgdXBJY29uOiBJY29ucy5NZW51LkZvbnRTaXplVXAsXG4gICAgZG93bkljb246IEljb25zLk1lbnUuRm9udFNpemVEb3duXG4gIH07XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Rm9udFNldHRpbmcsIHsgbGFiZWw6IFwiU2l6ZVwiLCB0eXBlOiBcImZvbnRTaXplXCIsIG9wdGlvbiB9KTtcbn1cbkRlZmF1bHRGb250U2l6ZVNsaWRlci5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEZvbnRTaXplU2xpZGVyXCI7XG5mdW5jdGlvbiBEZWZhdWx0VGV4dENvbG9ySW5wdXQoKSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Rm9udFNldHRpbmcsIHsgbGFiZWw6IFwiQ29sb3JcIiwgdHlwZTogXCJ0ZXh0Q29sb3JcIiwgb3B0aW9uOiBGT05UX0NPTE9SX09QVElPTiB9KTtcbn1cbkRlZmF1bHRUZXh0Q29sb3JJbnB1dC5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFRleHRDb2xvcklucHV0XCI7XG5mdW5jdGlvbiBEZWZhdWx0VGV4dE9wYWNpdHlTbGlkZXIoKSB7XG4gIGNvbnN0IHsgaWNvbnM6IEljb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBvcHRpb24gPSB7XG4gICAgLi4uRk9OVF9PUEFDSVRZX09QVElPTixcbiAgICB1cEljb246IEljb25zLk1lbnUuT3BhY2l0eVVwLFxuICAgIGRvd25JY29uOiBJY29ucy5NZW51Lk9wYWNpdHlEb3duXG4gIH07XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Rm9udFNldHRpbmcsIHsgbGFiZWw6IFwiT3BhY2l0eVwiLCB0eXBlOiBcInRleHRPcGFjaXR5XCIsIG9wdGlvbiB9KTtcbn1cbkRlZmF1bHRUZXh0T3BhY2l0eVNsaWRlci5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFRleHRPcGFjaXR5U2xpZGVyXCI7XG5mdW5jdGlvbiBEZWZhdWx0VGV4dFNoYWRvd01lbnUoKSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Rm9udFNldHRpbmcsIHsgbGFiZWw6IFwiU2hhZG93XCIsIHR5cGU6IFwidGV4dFNoYWRvd1wiLCBvcHRpb246IEZPTlRfVEVYVF9TSEFET1dfT1BUSU9OIH0pO1xufVxuRGVmYXVsdFRleHRTaGFkb3dNZW51LmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0VGV4dFNoYWRvd01lbnVcIjtcbmZ1bmN0aW9uIERlZmF1bHRUZXh0QmdJbnB1dCgpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRGb250U2V0dGluZywgeyBsYWJlbDogXCJDb2xvclwiLCB0eXBlOiBcInRleHRCZ1wiLCBvcHRpb246IEZPTlRfQ09MT1JfT1BUSU9OIH0pO1xufVxuRGVmYXVsdFRleHRCZ0lucHV0LmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0VGV4dEJnSW5wdXRcIjtcbmZ1bmN0aW9uIERlZmF1bHRUZXh0QmdPcGFjaXR5U2xpZGVyKCkge1xuICBjb25zdCB7IGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgb3B0aW9uID0ge1xuICAgIC4uLkZPTlRfT1BBQ0lUWV9PUFRJT04sXG4gICAgdXBJY29uOiBJY29ucy5NZW51Lk9wYWNpdHlVcCxcbiAgICBkb3duSWNvbjogSWNvbnMuTWVudS5PcGFjaXR5RG93blxuICB9O1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEZvbnRTZXR0aW5nLCB7IGxhYmVsOiBcIk9wYWNpdHlcIiwgdHlwZTogXCJ0ZXh0QmdPcGFjaXR5XCIsIG9wdGlvbiB9KTtcbn1cbkRlZmF1bHRUZXh0QmdPcGFjaXR5U2xpZGVyLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0VGV4dEJnT3BhY2l0eVNsaWRlclwiO1xuZnVuY3Rpb24gRGVmYXVsdERpc3BsYXlCZ0lucHV0KCkge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEZvbnRTZXR0aW5nLCB7IGxhYmVsOiBcIkNvbG9yXCIsIHR5cGU6IFwiZGlzcGxheUJnXCIsIG9wdGlvbjogRk9OVF9DT0xPUl9PUFRJT04gfSk7XG59XG5EZWZhdWx0RGlzcGxheUJnSW5wdXQuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHREaXNwbGF5QmdJbnB1dFwiO1xuZnVuY3Rpb24gRGVmYXVsdERpc3BsYXlCZ09wYWNpdHlTbGlkZXIoKSB7XG4gIGNvbnN0IHsgaWNvbnM6IEljb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBvcHRpb24gPSB7XG4gICAgLi4uRk9OVF9PUEFDSVRZX09QVElPTixcbiAgICB1cEljb246IEljb25zLk1lbnUuT3BhY2l0eVVwLFxuICAgIGRvd25JY29uOiBJY29ucy5NZW51Lk9wYWNpdHlEb3duXG4gIH07XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Rm9udFNldHRpbmcsIHsgbGFiZWw6IFwiT3BhY2l0eVwiLCB0eXBlOiBcImRpc3BsYXlCZ09wYWNpdHlcIiwgb3B0aW9uIH0pO1xufVxuRGVmYXVsdERpc3BsYXlCZ09wYWNpdHlTbGlkZXIuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHREaXNwbGF5QmdPcGFjaXR5U2xpZGVyXCI7XG5mdW5jdGlvbiBEZWZhdWx0Rm9udFNldHRpbmcoeyBsYWJlbCwgb3B0aW9uLCB0eXBlIH0pIHtcbiAgY29uc3QgcGxheWVyID0gdXNlTWVkaWFQbGF5ZXIoKSwgJGN1cnJlbnRWYWx1ZSA9IEZPTlRfU0lHTkFMU1t0eXBlXSwgJHZhbHVlID0gdXNlU2lnbmFsKCRjdXJyZW50VmFsdWUpLCB0cmFuc2xhdGVkTGFiZWwgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChsYWJlbCk7XG4gIGNvbnN0IG5vdGlmeSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBwbGF5ZXI/LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwidmRzLWZvbnQtY2hhbmdlXCIpKTtcbiAgfSwgW3BsYXllcl0pO1xuICBjb25zdCBvbkNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgJGN1cnJlbnRWYWx1ZS5zZXQobmV3VmFsdWUpO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSxcbiAgICBbJGN1cnJlbnRWYWx1ZSwgbm90aWZ5XVxuICApO1xuICBpZiAob3B0aW9uLnR5cGUgPT09IFwiY29sb3JcIikge1xuICAgIGxldCBvbkNvbG9yQ2hhbmdlMiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBvbkNoYW5nZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRNZW51SXRlbSwgeyBsYWJlbDogdHJhbnNsYXRlZExhYmVsIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgeyBjbGFzc05hbWU6IFwidmRzLWNvbG9yLXBpY2tlclwiLCB0eXBlOiBcImNvbG9yXCIsIHZhbHVlOiAkdmFsdWUsIG9uQ2hhbmdlOiBvbkNvbG9yQ2hhbmdlMiB9KSk7XG4gIH1cbiAgaWYgKG9wdGlvbi50eXBlID09PSBcInNsaWRlclwiKSB7XG4gICAgbGV0IG9uU2xpZGVyVmFsdWVDaGFuZ2UyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIG9uQ2hhbmdlKHZhbHVlICsgXCIlXCIpO1xuICAgIH07XG4gICAgY29uc3QgeyBtaW4sIG1heCwgc3RlcCwgdXBJY29uLCBkb3duSWNvbiB9ID0gb3B0aW9uO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIERlZmF1bHRNZW51U2xpZGVySXRlbSxcbiAgICAgIHtcbiAgICAgICAgbGFiZWw6IHRyYW5zbGF0ZWRMYWJlbCxcbiAgICAgICAgdmFsdWU6ICR2YWx1ZSxcbiAgICAgICAgVXBJY29uOiB1cEljb24sXG4gICAgICAgIERvd25JY29uOiBkb3duSWNvbixcbiAgICAgICAgaXNNaW46ICR2YWx1ZSA9PT0gbWluICsgXCIlXCIsXG4gICAgICAgIGlzTWF4OiAkdmFsdWUgPT09IG1heCArIFwiJVwiXG4gICAgICB9LFxuICAgICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFJvb3QkNCxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJ2ZHMtc2xpZGVyXCIsXG4gICAgICAgICAgbWluLFxuICAgICAgICAgIG1heCxcbiAgICAgICAgICBzdGVwLFxuICAgICAgICAgIGtleVN0ZXA6IHN0ZXAsXG4gICAgICAgICAgdmFsdWU6IHBhcnNlSW50KCR2YWx1ZSksXG4gICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHRyYW5zbGF0ZWRMYWJlbCxcbiAgICAgICAgICBvblZhbHVlQ2hhbmdlOiBvblNsaWRlclZhbHVlQ2hhbmdlMixcbiAgICAgICAgICBvbkRyYWdWYWx1ZUNoYW5nZTogb25TbGlkZXJWYWx1ZUNoYW5nZTJcbiAgICAgICAgfSxcbiAgICAgICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFNsaWRlclBhcnRzLCBudWxsKSxcbiAgICAgICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFNsaWRlclN0ZXBzLCBudWxsKVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgaWYgKG9wdGlvbi50eXBlID09PSBcInJhZGlvXCIpIHtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBEZWZhdWx0Rm9udFJhZGlvR3JvdXAsXG4gICAgICB7XG4gICAgICAgIGlkOiBjYW1lbFRvS2ViYWJDYXNlKHR5cGUpLFxuICAgICAgICBsYWJlbDogdHJhbnNsYXRlZExhYmVsLFxuICAgICAgICB2YWx1ZTogJHZhbHVlLFxuICAgICAgICB2YWx1ZXM6IG9wdGlvbi52YWx1ZXMsXG4gICAgICAgIG9uQ2hhbmdlXG4gICAgICB9XG4gICAgKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbkRlZmF1bHRGb250U2V0dGluZy5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEZvbnRTZXR0aW5nXCI7XG5mdW5jdGlvbiBEZWZhdWx0Rm9udFJhZGlvR3JvdXAoeyBpZCwgbGFiZWwsIHZhbHVlLCB2YWx1ZXMsIG9uQ2hhbmdlIH0pIHtcbiAgY29uc3QgcmFkaW9PcHRpb25zID0gY3JlYXRlUmFkaW9PcHRpb25zKHZhbHVlcyksIHsgdHJhbnNsYXRpb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBoaW50ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgbGFiZWwyID0gcmFkaW9PcHRpb25zLmZpbmQoKHJhZGlvKSA9PiByYWRpby52YWx1ZSA9PT0gdmFsdWUpPy5sYWJlbCB8fCBcIlwiO1xuICAgIHJldHVybiBpMThuKHRyYW5zbGF0aW9ucywgbGFiZWwyKTtcbiAgfSwgW3ZhbHVlLCByYWRpb09wdGlvbnNdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkMywgeyBjbGFzc05hbWU6IGB2ZHMtJHtpZH0tbWVudSB2ZHMtbWVudWAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdE1lbnVCdXR0b24sIHsgbGFiZWwsIGhpbnQgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW1zLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1pdGVtc1wiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRNZW51UmFkaW9Hcm91cCwgeyB2YWx1ZSwgb3B0aW9uczogcmFkaW9PcHRpb25zLCBvbkNoYW5nZSB9KSkpO1xufVxuRGVmYXVsdEZvbnRSYWRpb0dyb3VwLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0Rm9udFJhZGlvR3JvdXBcIjtcbmZ1bmN0aW9uIERlZmF1bHRSZXNldE1lbnVJdGVtKCkge1xuICBjb25zdCByZXNldFRleHQgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIlJlc2V0XCIpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyBjbGFzc05hbWU6IFwidmRzLW1lbnUtaXRlbVwiLCByb2xlOiBcIm1lbnVpdGVtXCIsIG9uQ2xpY2s6IG9uRm9udFJlc2V0IH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1pdGVtLWxhYmVsXCIgfSwgcmVzZXRUZXh0KSk7XG59XG5EZWZhdWx0UmVzZXRNZW51SXRlbS5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFJlc2V0TWVudUl0ZW1cIjtcblxuZnVuY3Rpb24gRGVmYXVsdE1lbnVDaGVja2JveCh7XG4gIGxhYmVsLFxuICBjaGVja2VkLFxuICBzdG9yYWdlS2V5LFxuICBkZWZhdWx0Q2hlY2tlZCA9IGZhbHNlLFxuICBvbkNoYW5nZVxufSkge1xuICBjb25zdCBbaXNDaGVja2VkLCBzZXRJc0NoZWNrZWRdID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdENoZWNrZWQpLCBbaXNBY3RpdmUsIHNldElzQWN0aXZlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzYXZlZFZhbHVlID0gc3RvcmFnZUtleSA/IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkpIDogbnVsbCwgY2hlY2tlZDIgPSAhIShzYXZlZFZhbHVlID8/IGRlZmF1bHRDaGVja2VkKTtcbiAgICBzZXRJc0NoZWNrZWQoY2hlY2tlZDIpO1xuICAgIG9uQ2hhbmdlPy4oY2hlY2tlZDIpO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzQm9vbGVhbihjaGVja2VkKSkgc2V0SXNDaGVja2VkKGNoZWNrZWQpO1xuICB9LCBbY2hlY2tlZF0pO1xuICBmdW5jdGlvbiBvblByZXNzKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50ICYmIFwiYnV0dG9uXCIgaW4gZXZlbnQgJiYgZXZlbnQ/LmJ1dHRvbiA9PT0gMSkgcmV0dXJuO1xuICAgIGNvbnN0IHRvZ2dsZWRDaGVjayA9ICFpc0NoZWNrZWQ7XG4gICAgc2V0SXNDaGVja2VkKHRvZ2dsZWRDaGVjayk7XG4gICAgaWYgKHN0b3JhZ2VLZXkpIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIHRvZ2dsZWRDaGVjayA/IFwiMVwiIDogXCJcIik7XG4gICAgb25DaGFuZ2U/Lih0b2dnbGVkQ2hlY2ssIGV2ZW50Py5uYXRpdmVFdmVudCk7XG4gICAgc2V0SXNBY3RpdmUoZmFsc2UpO1xuICB9XG4gIGZ1bmN0aW9uIG9uQWN0aXZlKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCkgcmV0dXJuO1xuICAgIHNldElzQWN0aXZlKHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIG9uS2V5RG93bihldmVudCkge1xuICAgIGlmIChpc0tleWJvYXJkQ2xpY2soZXZlbnQubmF0aXZlRXZlbnQpKSBvblByZXNzKCk7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIFwiZGl2XCIsXG4gICAge1xuICAgICAgY2xhc3NOYW1lOiBcInZkcy1tZW51LWNoZWNrYm94XCIsXG4gICAgICByb2xlOiBcIm1lbnVpdGVtY2hlY2tib3hcIixcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLFxuICAgICAgXCJhcmlhLWNoZWNrZWRcIjogaXNDaGVja2VkID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIsXG4gICAgICBcImRhdGEtYWN0aXZlXCI6IGlzQWN0aXZlID8gXCJcIiA6IG51bGwsXG4gICAgICBvblBvaW50ZXJVcDogb25QcmVzcyxcbiAgICAgIG9uUG9pbnRlckRvd246IG9uQWN0aXZlLFxuICAgICAgb25LZXlEb3duXG4gICAgfVxuICApO1xufVxuRGVmYXVsdE1lbnVDaGVja2JveC5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdE1lbnVDaGVja2JveFwiO1xuXG5mdW5jdGlvbiBEZWZhdWx0QWNjZXNzaWJpbGl0eU1lbnUoeyBzbG90cyB9KSB7XG4gIGNvbnN0IGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJBY2Nlc3NpYmlsaXR5XCIpLCB7IGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkMywgeyBjbGFzc05hbWU6IFwidmRzLWFjY2Vzc2liaWxpdHktbWVudSB2ZHMtbWVudVwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRNZW51QnV0dG9uLCB7IGxhYmVsLCBJY29uOiBJY29ucy5NZW51LkFjY2Vzc2liaWxpdHkgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW1zLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1pdGVtc1wiIH0sIHNsb3Qoc2xvdHMsIFwiYWNjZXNzaWJpbGl0eU1lbnVJdGVtc1N0YXJ0XCIsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TWVudVNlY3Rpb24sIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRBbm5vdW5jZW1lbnRzTWVudUNoZWNrYm94LCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEtleWJvYXJkQW5pbWF0aW9uc01lbnVDaGVja2JveCwgbnVsbCkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TWVudVNlY3Rpb24sIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRGb250TWVudSwgbnVsbCkpLCBzbG90KHNsb3RzLCBcImFjY2Vzc2liaWxpdHlNZW51SXRlbXNFbmRcIiwgbnVsbCkpKTtcbn1cbkRlZmF1bHRBY2Nlc3NpYmlsaXR5TWVudS5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEFjY2Vzc2liaWxpdHlNZW51XCI7XG5mdW5jdGlvbiBEZWZhdWx0QW5ub3VuY2VtZW50c01lbnVDaGVja2JveCgpIHtcbiAgY29uc3QgeyB1c2VyUHJlZmVyc0Fubm91bmNlbWVudHMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJBbm5vdW5jZW1lbnRzXCIpO1xuICBmdW5jdGlvbiBvbkNoYW5nZShjaGVja2VkKSB7XG4gICAgdXNlclByZWZlcnNBbm5vdW5jZW1lbnRzLnNldChjaGVja2VkKTtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdE1lbnVJdGVtLCB7IGxhYmVsIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIERlZmF1bHRNZW51Q2hlY2tib3gsXG4gICAge1xuICAgICAgbGFiZWwsXG4gICAgICBkZWZhdWx0Q2hlY2tlZDogdHJ1ZSxcbiAgICAgIHN0b3JhZ2VLZXk6IFwidmRzLXBsYXllcjo6YW5ub3VuY2VtZW50c1wiLFxuICAgICAgb25DaGFuZ2VcbiAgICB9XG4gICkpO1xufVxuRGVmYXVsdEFubm91bmNlbWVudHNNZW51Q2hlY2tib3guZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRBbm5vdW5jZW1lbnRzTWVudUNoZWNrYm94XCI7XG5mdW5jdGlvbiBEZWZhdWx0S2V5Ym9hcmRBbmltYXRpb25zTWVudUNoZWNrYm94KCkge1xuICBjb25zdCAkdmlld1R5cGUgPSB1c2VNZWRpYVN0YXRlKFwidmlld1R5cGVcIiksIHsgdXNlclByZWZlcnNLZXlib2FyZEFuaW1hdGlvbnMsIG5vS2V5Ym9hcmRBbmltYXRpb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBsYWJlbCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiS2V5Ym9hcmQgQW5pbWF0aW9uc1wiKTtcbiAgaWYgKCR2aWV3VHlwZSAhPT0gXCJ2aWRlb1wiIHx8IG5vS2V5Ym9hcmRBbmltYXRpb25zKSByZXR1cm4gbnVsbDtcbiAgZnVuY3Rpb24gb25DaGFuZ2UoY2hlY2tlZCkge1xuICAgIHVzZXJQcmVmZXJzS2V5Ym9hcmRBbmltYXRpb25zLnNldChjaGVja2VkKTtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdE1lbnVJdGVtLCB7IGxhYmVsIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIERlZmF1bHRNZW51Q2hlY2tib3gsXG4gICAge1xuICAgICAgbGFiZWwsXG4gICAgICBkZWZhdWx0Q2hlY2tlZDogdHJ1ZSxcbiAgICAgIHN0b3JhZ2VLZXk6IFwidmRzLXBsYXllcjo6a2V5Ym9hcmQtYW5pbWF0aW9uc1wiLFxuICAgICAgb25DaGFuZ2VcbiAgICB9XG4gICkpO1xufVxuRGVmYXVsdEtleWJvYXJkQW5pbWF0aW9uc01lbnVDaGVja2JveC5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEtleWJvYXJkQW5pbWF0aW9uc01lbnVDaGVja2JveFwiO1xuXG5mdW5jdGlvbiBEZWZhdWx0QXVkaW9NZW51KHsgc2xvdHMgfSkge1xuICBjb25zdCBsYWJlbCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiQXVkaW9cIiksICRjYW5TZXRBdWRpb0dhaW4gPSB1c2VNZWRpYVN0YXRlKFwiY2FuU2V0QXVkaW9HYWluXCIpLCAkYXVkaW9UcmFja3MgPSB1c2VNZWRpYVN0YXRlKFwiYXVkaW9UcmFja3NcIiksIHsgbm9BdWRpb0dhaW4sIGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgaGFzR2FpblNsaWRlciA9ICRjYW5TZXRBdWRpb0dhaW4gJiYgIW5vQXVkaW9HYWluLCAkZGlzYWJsZWQgPSAhaGFzR2FpblNsaWRlciAmJiAkYXVkaW9UcmFja3MubGVuZ3RoIDw9IDE7XG4gIGlmICgkZGlzYWJsZWQpIHJldHVybiBudWxsO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm9vdCQzLCB7IGNsYXNzTmFtZTogXCJ2ZHMtYXVkaW8tbWVudSB2ZHMtbWVudVwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRNZW51QnV0dG9uLCB7IGxhYmVsLCBJY29uOiBJY29ucy5NZW51LkF1ZGlvIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtcywgeyBjbGFzc05hbWU6IFwidmRzLW1lbnUtaXRlbXNcIiB9LCBzbG90KHNsb3RzLCBcImF1ZGlvTWVudUl0ZW1zU3RhcnRcIiwgbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRBdWRpb1RyYWNrc01lbnUsIG51bGwpLCBoYXNHYWluU2xpZGVyID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEF1ZGlvQm9vc3RNZW51U2VjdGlvbiwgbnVsbCkgOiBudWxsLCBzbG90KHNsb3RzLCBcImF1ZGlvTWVudUl0ZW1zRW5kXCIsIG51bGwpKSk7XG59XG5EZWZhdWx0QXVkaW9NZW51LmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0QXVkaW9NZW51XCI7XG5mdW5jdGlvbiBEZWZhdWx0QXVkaW9Cb29zdE1lbnVTZWN0aW9uKCkge1xuICBjb25zdCAkYXVkaW9HYWluID0gdXNlTWVkaWFTdGF0ZShcImF1ZGlvR2FpblwiKSwgbGFiZWwgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIkJvb3N0XCIpLCB2YWx1ZSA9IE1hdGgucm91bmQoKCgkYXVkaW9HYWluID8/IDEpIC0gMSkgKiAxMDApICsgXCIlXCIsICRjYW5TZXRBdWRpb0dhaW4gPSB1c2VNZWRpYVN0YXRlKFwiY2FuU2V0QXVkaW9HYWluXCIpLCB7IG5vQXVkaW9HYWluLCBpY29uczogSWNvbnMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksICRkaXNhYmxlZCA9ICEkY2FuU2V0QXVkaW9HYWluIHx8IG5vQXVkaW9HYWluLCBtaW4gPSB1c2VHYWluTWluKCksIG1heCA9IHVzZUdhaW5NYXgoKTtcbiAgaWYgKCRkaXNhYmxlZCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TWVudVNlY3Rpb24sIHsgbGFiZWwsIHZhbHVlIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIERlZmF1bHRNZW51U2xpZGVySXRlbSxcbiAgICB7XG4gICAgICBVcEljb246IEljb25zLk1lbnUuQXVkaW9Cb29zdFVwLFxuICAgICAgRG93bkljb246IEljb25zLk1lbnUuQXVkaW9Cb29zdERvd24sXG4gICAgICBpc01pbjogKCgkYXVkaW9HYWluID8/IDEpIC0gMSkgKiAxMDAgPD0gbWluLFxuICAgICAgaXNNYXg6ICgoJGF1ZGlvR2FpbiA/PyAxKSAtIDEpICogMTAwID09PSBtYXhcbiAgICB9LFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRBdWRpb0dhaW5TbGlkZXIsIG51bGwpXG4gICkpO1xufVxuRGVmYXVsdEF1ZGlvQm9vc3RNZW51U2VjdGlvbi5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEF1ZGlvQm9vc3RNZW51U2VjdGlvblwiO1xuZnVuY3Rpb24gdXNlR2Fpbk1pbigpIHtcbiAgY29uc3QgeyBhdWRpb0dhaW5zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBtaW4gPSBpc0FycmF5KGF1ZGlvR2FpbnMpID8gYXVkaW9HYWluc1swXSA6IGF1ZGlvR2FpbnM/Lm1pbjtcbiAgcmV0dXJuIG1pbiA/PyAwO1xufVxuZnVuY3Rpb24gdXNlR2Fpbk1heCgpIHtcbiAgY29uc3QgeyBhdWRpb0dhaW5zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBtYXggPSBpc0FycmF5KGF1ZGlvR2FpbnMpID8gYXVkaW9HYWluc1thdWRpb0dhaW5zLmxlbmd0aCAtIDFdIDogYXVkaW9HYWlucz8ubWF4O1xuICByZXR1cm4gbWF4ID8/IDMwMDtcbn1cbmZ1bmN0aW9uIHVzZUdhaW5TdGVwKCkge1xuICBjb25zdCB7IGF1ZGlvR2FpbnMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIHN0ZXAgPSBpc0FycmF5KGF1ZGlvR2FpbnMpID8gYXVkaW9HYWluc1sxXSAtIGF1ZGlvR2FpbnNbMF0gOiBhdWRpb0dhaW5zPy5zdGVwO1xuICByZXR1cm4gc3RlcCB8fCAyNTtcbn1cbmZ1bmN0aW9uIERlZmF1bHRBdWRpb0dhaW5TbGlkZXIoKSB7XG4gIGNvbnN0IGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJBdWRpbyBCb29zdFwiKSwgbWluID0gdXNlR2Fpbk1pbigpLCBtYXggPSB1c2VHYWluTWF4KCksIHN0ZXAgPSB1c2VHYWluU3RlcCgpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgUm9vdCQ1LFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ2ZHMtYXVkaW8tZ2Fpbi1zbGlkZXIgdmRzLXNsaWRlclwiLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLFxuICAgICAgbWluLFxuICAgICAgbWF4LFxuICAgICAgc3RlcCxcbiAgICAgIGtleVN0ZXA6IHN0ZXBcbiAgICB9LFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRTbGlkZXJQYXJ0cywgbnVsbCksXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFNsaWRlclN0ZXBzLCBudWxsKVxuICApO1xufVxuRGVmYXVsdEF1ZGlvR2FpblNsaWRlci5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEF1ZGlvR2FpblNsaWRlclwiO1xuZnVuY3Rpb24gRGVmYXVsdEF1ZGlvVHJhY2tzTWVudSgpIHtcbiAgY29uc3QgeyBpY29uczogSWNvbnMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJUcmFja1wiKSwgZGVmYXVsdFRleHQgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIkRlZmF1bHRcIiksICR0cmFjayA9IHVzZU1lZGlhU3RhdGUoXCJhdWRpb1RyYWNrXCIpLCBvcHRpb25zID0gdXNlQXVkaW9PcHRpb25zKCk7XG4gIGlmIChvcHRpb25zLmRpc2FibGVkKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkMywgeyBjbGFzc05hbWU6IFwidmRzLWF1ZGlvLXRyYWNrLW1lbnUgdmRzLW1lbnVcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBEZWZhdWx0TWVudUJ1dHRvbixcbiAgICB7XG4gICAgICBsYWJlbCxcbiAgICAgIGhpbnQ6ICR0cmFjaz8ubGFiZWwgPz8gZGVmYXVsdFRleHQsXG4gICAgICBkaXNhYmxlZDogb3B0aW9ucy5kaXNhYmxlZCxcbiAgICAgIEljb246IEljb25zLk1lbnUuQXVkaW9cbiAgICB9XG4gICksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW1zLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1pdGVtc1wiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIFJvb3QkMSxcbiAgICB7XG4gICAgICBjbGFzc05hbWU6IFwidmRzLWF1ZGlvLXJhZGlvLWdyb3VwIHZkcy1yYWRpby1ncm91cFwiLFxuICAgICAgdmFsdWU6IG9wdGlvbnMuc2VsZWN0ZWRWYWx1ZVxuICAgIH0sXG4gICAgb3B0aW9ucy5tYXAoKHsgbGFiZWw6IGxhYmVsMiwgdmFsdWUsIHNlbGVjdCB9KSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEl0ZW0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ2ZHMtYXVkaW8tcmFkaW8gdmRzLXJhZGlvXCIsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvblNlbGVjdDogc2VsZWN0LFxuICAgICAgICBrZXk6IHZhbHVlXG4gICAgICB9LFxuICAgICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbnMuTWVudS5SYWRpb0NoZWNrLCB7IGNsYXNzTmFtZTogXCJ2ZHMtaWNvblwiIH0pLFxuICAgICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInZkcy1yYWRpby1sYWJlbFwiIH0sIGxhYmVsMilcbiAgICApKVxuICApKSk7XG59XG5EZWZhdWx0QXVkaW9UcmFja3NNZW51LmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0QXVkaW9UcmFja3NNZW51XCI7XG5cbmZ1bmN0aW9uIERlZmF1bHRDYXB0aW9uTWVudSh7IHNsb3RzIH0pIHtcbiAgY29uc3QgeyBpY29uczogSWNvbnMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJDYXB0aW9uc1wiKSwgb2ZmVGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiT2ZmXCIpLCBvcHRpb25zID0gdXNlQ2FwdGlvbk9wdGlvbnMoeyBvZmY6IG9mZlRleHQgfSksIGhpbnQgPSBvcHRpb25zLnNlbGVjdGVkVHJhY2s/LmxhYmVsID8/IG9mZlRleHQ7XG4gIGlmIChvcHRpb25zLmRpc2FibGVkKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkMywgeyBjbGFzc05hbWU6IFwidmRzLWNhcHRpb25zLW1lbnUgdmRzLW1lbnVcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBEZWZhdWx0TWVudUJ1dHRvbixcbiAgICB7XG4gICAgICBsYWJlbCxcbiAgICAgIGhpbnQsXG4gICAgICBkaXNhYmxlZDogb3B0aW9ucy5kaXNhYmxlZCxcbiAgICAgIEljb246IEljb25zLk1lbnUuQ2FwdGlvbnNcbiAgICB9XG4gICksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW1zLCB7IGNsYXNzTmFtZTogXCJ2ZHMtbWVudS1pdGVtc1wiIH0sIHNsb3Qoc2xvdHMsIFwiY2FwdGlvbnNNZW51SXRlbXNTdGFydFwiLCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgUm9vdCQxLFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ2ZHMtY2FwdGlvbnMtcmFkaW8tZ3JvdXAgdmRzLXJhZGlvLWdyb3VwXCIsXG4gICAgICB2YWx1ZTogb3B0aW9ucy5zZWxlY3RlZFZhbHVlXG4gICAgfSxcbiAgICBvcHRpb25zLm1hcCgoeyBsYWJlbDogbGFiZWwyLCB2YWx1ZSwgc2VsZWN0IH0pID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgSXRlbSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInZkcy1jYXB0aW9uLXJhZGlvIHZkcy1yYWRpb1wiLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgb25TZWxlY3Q6IHNlbGVjdCxcbiAgICAgICAga2V5OiB2YWx1ZVxuICAgICAgfSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25zLk1lbnUuUmFkaW9DaGVjaywgeyBjbGFzc05hbWU6IFwidmRzLWljb25cIiB9KSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtcmFkaW8tbGFiZWxcIiB9LCBsYWJlbDIpXG4gICAgKSlcbiAgKSwgc2xvdChzbG90cywgXCJjYXB0aW9uc01lbnVJdGVtc0VuZFwiLCBudWxsKSkpO1xufVxuRGVmYXVsdENhcHRpb25NZW51LmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0Q2FwdGlvbk1lbnVcIjtcblxuZnVuY3Rpb24gRGVmYXVsdFBsYXliYWNrTWVudSh7IHNsb3RzIH0pIHtcbiAgY29uc3QgbGFiZWwgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIlBsYXliYWNrXCIpLCB7IGljb25zOiBJY29ucyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkMywgeyBjbGFzc05hbWU6IFwidmRzLXBsYXliYWNrLW1lbnUgdmRzLW1lbnVcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TWVudUJ1dHRvbiwgeyBsYWJlbCwgSWNvbjogSWNvbnMuTWVudS5QbGF5YmFjayB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSXRlbXMsIHsgY2xhc3NOYW1lOiBcInZkcy1tZW51LWl0ZW1zXCIgfSwgc2xvdChzbG90cywgXCJwbGF5YmFja01lbnVJdGVtc1N0YXJ0XCIsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TWVudVNlY3Rpb24sIG51bGwsIHNsb3Qoc2xvdHMsIFwicGxheWJhY2tNZW51TG9vcFwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TG9vcE1lbnVDaGVja2JveCwgbnVsbCkpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFNwZWVkTWVudVNlY3Rpb24sIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0UXVhbGl0eU1lbnVTZWN0aW9uLCBudWxsKSwgc2xvdChzbG90cywgXCJwbGF5YmFja01lbnVJdGVtc0VuZFwiLCBudWxsKSkpO1xufVxuRGVmYXVsdFBsYXliYWNrTWVudS5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFBsYXliYWNrTWVudVwiO1xuZnVuY3Rpb24gRGVmYXVsdExvb3BNZW51Q2hlY2tib3goKSB7XG4gIGNvbnN0IHsgcmVtb3RlIH0gPSB1c2VNZWRpYUNvbnRleHQoKSwgbGFiZWwgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIkxvb3BcIik7XG4gIGZ1bmN0aW9uIG9uQ2hhbmdlKGNoZWNrZWQsIHRyaWdnZXIpIHtcbiAgICByZW1vdGUudXNlclByZWZlcnNMb29wQ2hhbmdlKGNoZWNrZWQsIHRyaWdnZXIpO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TWVudUl0ZW0sIHsgbGFiZWwgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdE1lbnVDaGVja2JveCwgeyBsYWJlbCwgc3RvcmFnZUtleTogXCJ2ZHMtcGxheWVyOjp1c2VyLWxvb3BcIiwgb25DaGFuZ2UgfSkpO1xufVxuRGVmYXVsdExvb3BNZW51Q2hlY2tib3guZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRMb29wTWVudUNoZWNrYm94XCI7XG5mdW5jdGlvbiBEZWZhdWx0QXV0b1F1YWxpdHlNZW51Q2hlY2tib3goKSB7XG4gIGNvbnN0IHsgcmVtb3RlLCBxdWFsaXRpZXMgfSA9IHVzZU1lZGlhQ29udGV4dCgpLCAkYXV0b1F1YWxpdHkgPSB1c2VNZWRpYVN0YXRlKFwiYXV0b1F1YWxpdHlcIiksIGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJBdXRvXCIpO1xuICBmdW5jdGlvbiBvbkNoYW5nZShjaGVja2VkLCB0cmlnZ2VyKSB7XG4gICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgIHJlbW90ZS5yZXF1ZXN0QXV0b1F1YWxpdHkodHJpZ2dlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW90ZS5jaGFuZ2VRdWFsaXR5KHF1YWxpdGllcy5zZWxlY3RlZEluZGV4LCB0cmlnZ2VyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRNZW51SXRlbSwgeyBsYWJlbCB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBEZWZhdWx0TWVudUNoZWNrYm94LFxuICAgIHtcbiAgICAgIGxhYmVsLFxuICAgICAgY2hlY2tlZDogJGF1dG9RdWFsaXR5LFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBkZWZhdWx0Q2hlY2tlZDogJGF1dG9RdWFsaXR5XG4gICAgfVxuICApKTtcbn1cbkRlZmF1bHRBdXRvUXVhbGl0eU1lbnVDaGVja2JveC5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEF1dG9RdWFsaXR5TWVudUNoZWNrYm94XCI7XG5mdW5jdGlvbiBEZWZhdWx0UXVhbGl0eU1lbnVTZWN0aW9uKCkge1xuICBjb25zdCB7IGhpZGVRdWFsaXR5Qml0cmF0ZSwgaWNvbnM6IEljb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCAkY2FuU2V0UXVhbGl0eSA9IHVzZU1lZGlhU3RhdGUoXCJjYW5TZXRRdWFsaXR5XCIpLCAkcXVhbGl0aWVzID0gdXNlTWVkaWFTdGF0ZShcInF1YWxpdGllc1wiKSwgJHF1YWxpdHkgPSB1c2VNZWRpYVN0YXRlKFwicXVhbGl0eVwiKSwgbGFiZWwgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIlF1YWxpdHlcIiksIGF1dG9UZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJBdXRvXCIpLCBzb3J0ZWRRdWFsaXRpZXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IHNvcnRWaWRlb1F1YWxpdGllcygkcXVhbGl0aWVzKSwgWyRxdWFsaXRpZXNdKTtcbiAgaWYgKCEkY2FuU2V0UXVhbGl0eSB8fCAkcXVhbGl0aWVzLmxlbmd0aCA8PSAxKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgaGVpZ2h0ID0gJHF1YWxpdHk/LmhlaWdodCwgYml0cmF0ZSA9ICFoaWRlUXVhbGl0eUJpdHJhdGUgPyAkcXVhbGl0eT8uYml0cmF0ZSA6IG51bGwsIGJpdHJhdGVUZXh0ID0gYml0cmF0ZSAmJiBiaXRyYXRlID4gMCA/IGAkeyhiaXRyYXRlIC8gMWU2KS50b0ZpeGVkKDIpfSBNYnBzYCA6IG51bGwsIHZhbHVlID0gaGVpZ2h0ID8gYCR7aGVpZ2h0fXAke2JpdHJhdGVUZXh0ID8gYCAoJHtiaXRyYXRlVGV4dH0pYCA6IFwiXCJ9YCA6IGF1dG9UZXh0LCBpc01pbiA9IHNvcnRlZFF1YWxpdGllc1swXSA9PT0gJHF1YWxpdHksIGlzTWF4ID0gc29ydGVkUXVhbGl0aWVzLmF0KC0xKSA9PT0gJHF1YWxpdHk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TWVudVNlY3Rpb24sIHsgbGFiZWwsIHZhbHVlIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIERlZmF1bHRNZW51U2xpZGVySXRlbSxcbiAgICB7XG4gICAgICBVcEljb246IEljb25zLk1lbnUuUXVhbGl0eVVwLFxuICAgICAgRG93bkljb246IEljb25zLk1lbnUuUXVhbGl0eURvd24sXG4gICAgICBpc01pbixcbiAgICAgIGlzTWF4XG4gICAgfSxcbiAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0UXVhbGl0eVNsaWRlciwgbnVsbClcbiAgKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEF1dG9RdWFsaXR5TWVudUNoZWNrYm94LCBudWxsKSk7XG59XG5EZWZhdWx0UXVhbGl0eU1lbnVTZWN0aW9uLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0UXVhbGl0eU1lbnVTZWN0aW9uXCI7XG5mdW5jdGlvbiBEZWZhdWx0UXVhbGl0eVNsaWRlcigpIHtcbiAgY29uc3QgbGFiZWwgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIlF1YWxpdHlcIik7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSb290JDYsIHsgY2xhc3NOYW1lOiBcInZkcy1xdWFsaXR5LXNsaWRlciB2ZHMtc2xpZGVyXCIsIFwiYXJpYS1sYWJlbFwiOiBsYWJlbCB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0U2xpZGVyUGFydHMsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0U2xpZGVyU3RlcHMsIG51bGwpKTtcbn1cbkRlZmF1bHRRdWFsaXR5U2xpZGVyLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0UXVhbGl0eVNsaWRlclwiO1xuZnVuY3Rpb24gRGVmYXVsdFNwZWVkTWVudVNlY3Rpb24oKSB7XG4gIGNvbnN0IHsgaWNvbnM6IEljb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCAkcGxheWJhY2tSYXRlID0gdXNlTWVkaWFTdGF0ZShcInBsYXliYWNrUmF0ZVwiKSwgJGNhblNldFBsYXliYWNrUmF0ZSA9IHVzZU1lZGlhU3RhdGUoXCJjYW5TZXRQbGF5YmFja1JhdGVcIiksIGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJTcGVlZFwiKSwgbm9ybWFsVGV4dCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiTm9ybWFsXCIpLCBtaW4gPSB1c2VTcGVlZE1pbigpLCBtYXggPSB1c2VTcGVlZE1heCgpLCB2YWx1ZSA9ICRwbGF5YmFja1JhdGUgPT09IDEgPyBub3JtYWxUZXh0IDogJHBsYXliYWNrUmF0ZSArIFwieFwiO1xuICBpZiAoISRjYW5TZXRQbGF5YmFja1JhdGUpIHJldHVybiBudWxsO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdE1lbnVTZWN0aW9uLCB7IGxhYmVsLCB2YWx1ZSB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBEZWZhdWx0TWVudVNsaWRlckl0ZW0sXG4gICAge1xuICAgICAgVXBJY29uOiBJY29ucy5NZW51LlNwZWVkVXAsXG4gICAgICBEb3duSWNvbjogSWNvbnMuTWVudS5TcGVlZERvd24sXG4gICAgICBpc01pbjogJHBsYXliYWNrUmF0ZSA9PT0gbWluLFxuICAgICAgaXNNYXg6ICRwbGF5YmFja1JhdGUgPT09IG1heFxuICAgIH0sXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFNwZWVkU2xpZGVyLCBudWxsKVxuICApKTtcbn1cbmZ1bmN0aW9uIHVzZVNwZWVkTWluKCkge1xuICBjb25zdCB7IHBsYXliYWNrUmF0ZXMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIHJhdGVzID0gcGxheWJhY2tSYXRlcztcbiAgcmV0dXJuIChpc0FycmF5KHJhdGVzKSA/IHJhdGVzWzBdIDogcmF0ZXM/Lm1pbikgPz8gMDtcbn1cbmZ1bmN0aW9uIHVzZVNwZWVkTWF4KCkge1xuICBjb25zdCB7IHBsYXliYWNrUmF0ZXMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIHJhdGVzID0gcGxheWJhY2tSYXRlcztcbiAgcmV0dXJuIChpc0FycmF5KHJhdGVzKSA/IHJhdGVzW3JhdGVzLmxlbmd0aCAtIDFdIDogcmF0ZXM/Lm1heCkgPz8gMjtcbn1cbmZ1bmN0aW9uIHVzZVNwZWVkU3RlcCgpIHtcbiAgY29uc3QgeyBwbGF5YmFja1JhdGVzIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCByYXRlcyA9IHBsYXliYWNrUmF0ZXM7XG4gIHJldHVybiAoaXNBcnJheShyYXRlcykgPyByYXRlc1sxXSAtIHJhdGVzWzBdIDogcmF0ZXM/LnN0ZXApIHx8IDAuMjU7XG59XG5mdW5jdGlvbiBEZWZhdWx0U3BlZWRTbGlkZXIoKSB7XG4gIGNvbnN0IGxhYmVsID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJTcGVlZFwiKSwgbWluID0gdXNlU3BlZWRNaW4oKSwgbWF4ID0gdXNlU3BlZWRNYXgoKSwgc3RlcCA9IHVzZVNwZWVkU3RlcCgpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgUm9vdCQ3LFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ2ZHMtc3BlZWQtc2xpZGVyIHZkcy1zbGlkZXJcIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBsYWJlbCxcbiAgICAgIG1pbixcbiAgICAgIG1heCxcbiAgICAgIHN0ZXAsXG4gICAgICBrZXlTdGVwOiBzdGVwXG4gICAgfSxcbiAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0U2xpZGVyUGFydHMsIG51bGwpLFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRTbGlkZXJTdGVwcywgbnVsbClcbiAgKTtcbn1cbkRlZmF1bHRTcGVlZFNsaWRlci5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFNwZWVkU2xpZGVyXCI7XG5cbmZ1bmN0aW9uIERlZmF1bHRTZXR0aW5nc01lbnUoe1xuICB0b29sdGlwLFxuICBwbGFjZW1lbnQsXG4gIHBvcnRhbENsYXNzID0gXCJcIixcbiAgc2xvdHNcbn0pIHtcbiAgY29uc3Qge1xuICAgIHNob3dNZW51RGVsYXksXG4gICAgaWNvbnM6IEljb25zLFxuICAgIGlzU21hbGxMYXlvdXQsXG4gICAgbWVudUNvbnRhaW5lcixcbiAgICBtZW51R3JvdXAsXG4gICAgbm9Nb2RhbCxcbiAgICBjb2xvclNjaGVtZVxuICB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgc2V0dGluZ3NUZXh0ID0gdXNlRGVmYXVsdExheW91dFdvcmQoXCJTZXR0aW5nc1wiKSwgJHZpZXdUeXBlID0gdXNlTWVkaWFTdGF0ZShcInZpZXdUeXBlXCIpLCAkb2Zmc2V0ID0gIWlzU21hbGxMYXlvdXQgJiYgbWVudUdyb3VwID09PSBcImJvdHRvbVwiICYmICR2aWV3VHlwZSA9PT0gXCJ2aWRlb1wiID8gMjYgOiAwLCBjb2xvclNjaGVtZUNsYXNzID0gdXNlQ29sb3JTY2hlbWVDbGFzcyhjb2xvclNjaGVtZSksIFtpc09wZW4sIHNldElzT3Blbl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksIGRpYWxvZ0VsID0gdXNlUGFyZW50RGlhbG9nRWwoKTtcbiAgdXNlU2NvcGVkKHVwZGF0ZUZvbnRDc3NWYXJzKTtcbiAgZnVuY3Rpb24gb25PcGVuKCkge1xuICAgIGZsdXNoU3luYygoKSA9PiB7XG4gICAgICBzZXRJc09wZW4odHJ1ZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb25DbG9zZSgpIHtcbiAgICBzZXRJc09wZW4oZmFsc2UpO1xuICB9XG4gIGNvbnN0IENvbnRlbnQgPSAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBJdGVtcyxcbiAgICB7XG4gICAgICBjbGFzc05hbWU6IFwidmRzLXNldHRpbmdzLW1lbnUtaXRlbXMgdmRzLW1lbnUtaXRlbXNcIixcbiAgICAgIHBsYWNlbWVudCxcbiAgICAgIG9mZnNldDogJG9mZnNldFxuICAgIH0sXG4gICAgaXNPcGVuID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIHNsb3Qoc2xvdHMsIFwic2V0dGluZ3NNZW51SXRlbXNTdGFydFwiLCBudWxsKSwgc2xvdChzbG90cywgXCJzZXR0aW5nc01lbnVTdGFydEl0ZW1zXCIsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0UGxheWJhY2tNZW51LCB7IHNsb3RzIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0QWNjZXNzaWJpbGl0eU1lbnUsIHsgc2xvdHMgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRBdWRpb01lbnUsIHsgc2xvdHMgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDYXB0aW9uTWVudSwgeyBzbG90cyB9KSwgc2xvdChzbG90cywgXCJzZXR0aW5nc01lbnVFbmRJdGVtc1wiLCBudWxsKSwgc2xvdChzbG90cywgXCJzZXR0aW5nc01lbnVJdGVtc0VuZFwiLCBudWxsKSkgOiBudWxsXG4gICk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBSb290JDMsXG4gICAge1xuICAgICAgY2xhc3NOYW1lOiBcInZkcy1zZXR0aW5ncy1tZW51IHZkcy1tZW51XCIsXG4gICAgICBzaG93RGVsYXk6IHNob3dNZW51RGVsYXksXG4gICAgICBvbk9wZW4sXG4gICAgICBvbkNsb3NlXG4gICAgfSxcbiAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VG9vbHRpcCwgeyBjb250ZW50OiBzZXR0aW5nc1RleHQsIHBsYWNlbWVudDogdG9vbHRpcCB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b24sIHsgY2xhc3NOYW1lOiBcInZkcy1tZW51LWJ1dHRvbiB2ZHMtYnV0dG9uXCIsIFwiYXJpYS1sYWJlbFwiOiBzZXR0aW5nc1RleHQgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbnMuTWVudS5TZXR0aW5ncywgeyBjbGFzc05hbWU6IFwidmRzLWljb24gdmRzLXJvdGF0ZS1pY29uXCIgfSkpKSxcbiAgICBub01vZGFsIHx8ICFpc1NtYWxsTGF5b3V0ID8gQ29udGVudCA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgUG9ydGFsLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IHBvcnRhbENsYXNzICsgKGNvbG9yU2NoZW1lQ2xhc3MgPyBgICR7Y29sb3JTY2hlbWVDbGFzc31gIDogXCJcIiksXG4gICAgICAgIGNvbnRhaW5lcjogbWVudUNvbnRhaW5lciA/PyBkaWFsb2dFbCxcbiAgICAgICAgZGlzYWJsZWQ6IFwiZnVsbHNjcmVlblwiLFxuICAgICAgICBcImRhdGEtc21cIjogaXNTbWFsbExheW91dCA/IFwiXCIgOiBudWxsLFxuICAgICAgICBcImRhdGEtbGdcIjogIWlzU21hbGxMYXlvdXQgPyBcIlwiIDogbnVsbCxcbiAgICAgICAgXCJkYXRhLXNpemVcIjogaXNTbWFsbExheW91dCA/IFwic21cIiA6IFwibGdcIixcbiAgICAgICAgXCJkYXRhLXZpZXctdHlwZVwiOiAkdmlld1R5cGVcbiAgICAgIH0sXG4gICAgICBDb250ZW50XG4gICAgKVxuICApO1xufVxuRGVmYXVsdFNldHRpbmdzTWVudS5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFNldHRpbmdzTWVudVwiO1xuXG5mdW5jdGlvbiBEZWZhdWx0Vm9sdW1lUG9wdXAoeyB0b29sdGlwLCBvcmllbnRhdGlvbiwgc2xvdHMgfSkge1xuICBjb25zdCAkcG9pbnRlciA9IHVzZU1lZGlhU3RhdGUoXCJwb2ludGVyXCIpLCAkbXV0ZWQgPSB1c2VNZWRpYVN0YXRlKFwibXV0ZWRcIiksICRjYW5TZXRWb2x1bWUgPSB1c2VNZWRpYVN0YXRlKFwiY2FuU2V0Vm9sdW1lXCIpLCBbcm9vdEVsLCBzZXRSb290RWxdID0gUmVhY3QudXNlU3RhdGUobnVsbCksIGlzUm9vdEFjdGl2ZSA9IHVzZUFjdGl2ZShyb290RWwpLCBtdXRlQnV0dG9uID0gc2xvdChzbG90cywgXCJtdXRlQnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRNdXRlQnV0dG9uLCB7IHRvb2x0aXAgfSkpO1xuICBpZiAoISRjYW5TZXRWb2x1bWUpIHtcbiAgICByZXR1cm4gbXV0ZUJ1dHRvbjtcbiAgfVxuICByZXR1cm4gJHBvaW50ZXIgPT09IFwiY29hcnNlXCIgJiYgISRtdXRlZCA/IG51bGwgOiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtdm9sdW1lXCIsIFwiZGF0YS1hY3RpdmVcIjogaXNSb290QWN0aXZlID8gXCJcIiA6IG51bGwsIHJlZjogc2V0Um9vdEVsIH0sIG11dGVCdXR0b24sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInZkcy12b2x1bWUtcG9wdXBcIiB9LCBzbG90KHNsb3RzLCBcInZvbHVtZVNsaWRlclwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Vm9sdW1lU2xpZGVyLCB7IG9yaWVudGF0aW9uIH0pKSkpO1xufVxuRGVmYXVsdFZvbHVtZVBvcHVwLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0Vm9sdW1lUG9wdXBcIjtcbmZ1bmN0aW9uIERlZmF1bHRWb2x1bWVTbGlkZXIocHJvcHMpIHtcbiAgY29uc3QgbGFiZWwgPSB1c2VEZWZhdWx0TGF5b3V0V29yZChcIlZvbHVtZVwiKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkOCwgeyBjbGFzc05hbWU6IFwidmRzLXZvbHVtZS1zbGlkZXIgdmRzLXNsaWRlclwiLCBcImFyaWEtbGFiZWxcIjogbGFiZWwsIC4uLnByb3BzIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYWNrLCB7IGNsYXNzTmFtZTogXCJ2ZHMtc2xpZGVyLXRyYWNrXCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYWNrRmlsbCwgeyBjbGFzc05hbWU6IFwidmRzLXNsaWRlci10cmFjay1maWxsIHZkcy1zbGlkZXItdHJhY2tcIiB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGh1bWIsIHsgY2xhc3NOYW1lOiBcInZkcy1zbGlkZXItdGh1bWJcIiB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJldmlldywgeyBjbGFzc05hbWU6IFwidmRzLXNsaWRlci1wcmV2aWV3XCIsIG5vQ2xhbXA6IHRydWUgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmFsdWUsIHsgY2xhc3NOYW1lOiBcInZkcy1zbGlkZXItdmFsdWVcIiB9KSkpO1xufVxuRGVmYXVsdFZvbHVtZVNsaWRlci5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFZvbHVtZVNsaWRlclwiO1xuZnVuY3Rpb24gRGVmYXVsdFRpbWVTbGlkZXIoKSB7XG4gIGNvbnN0IFtpbnN0YW5jZSwgc2V0SW5zdGFuY2VdID0gUmVhY3QudXNlU3RhdGUobnVsbCksIFt3aWR0aCwgc2V0V2lkdGhdID0gUmVhY3QudXNlU3RhdGUoMCksICRzcmMgPSB1c2VNZWRpYVN0YXRlKFwiY3VycmVudFNyY1wiKSwgeyB0aHVtYm5haWxzLCBzbGlkZXJDaGFwdGVyc01pbldpZHRoLCBkaXNhYmxlVGltZVNsaWRlciwgc2Vla1N0ZXAsIG5vU2NydWJHZXN0dXJlIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBsYWJlbCA9IHVzZURlZmF1bHRMYXlvdXRXb3JkKFwiU2Vla1wiKSwgJFJlbW90aW9uU2xpZGVyVGh1bWJuYWlsID0gdXNlU2lnbmFsKFJlbW90aW9uU2xpZGVyVGh1bWJuYWlsKTtcbiAgY29uc3Qgb25SZXNpemUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgZWwgPSBpbnN0YW5jZT8uZWw7XG4gICAgZWwgJiYgc2V0V2lkdGgoZWwuY2xpZW50V2lkdGgpO1xuICB9LCBbaW5zdGFuY2VdKTtcbiAgdXNlUmVzaXplT2JzZXJ2ZXIoaW5zdGFuY2U/LmVsLCBvblJlc2l6ZSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBSb290JDksXG4gICAge1xuICAgICAgY2xhc3NOYW1lOiBcInZkcy10aW1lLXNsaWRlciB2ZHMtc2xpZGVyXCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogbGFiZWwsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZVRpbWVTbGlkZXIsXG4gICAgICBub1N3aXBlR2VzdHVyZTogbm9TY3J1Ykdlc3R1cmUsXG4gICAgICBrZXlTdGVwOiBzZWVrU3RlcCxcbiAgICAgIHJlZjogc2V0SW5zdGFuY2VcbiAgICB9LFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQ2hhcHRlcnMsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ2ZHMtc2xpZGVyLWNoYXB0ZXJzXCIsXG4gICAgICAgIGRpc2FibGVkOiB3aWR0aCA8IHNsaWRlckNoYXB0ZXJzTWluV2lkdGhcbiAgICAgIH0sXG4gICAgICAoY3VlcywgZm9yd2FyZFJlZikgPT4gY3Vlcy5tYXAoKGN1ZSkgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwidmRzLXNsaWRlci1jaGFwdGVyXCIsIGtleTogY3VlLnN0YXJ0VGltZSwgcmVmOiBmb3J3YXJkUmVmIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYWNrLCB7IGNsYXNzTmFtZTogXCJ2ZHMtc2xpZGVyLXRyYWNrXCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYWNrRmlsbCwgeyBjbGFzc05hbWU6IFwidmRzLXNsaWRlci10cmFjay1maWxsIHZkcy1zbGlkZXItdHJhY2tcIiB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJvZ3Jlc3MsIHsgY2xhc3NOYW1lOiBcInZkcy1zbGlkZXItcHJvZ3Jlc3MgdmRzLXNsaWRlci10cmFja1wiIH0pKSlcbiAgICApLFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFRodW1iLCB7IGNsYXNzTmFtZTogXCJ2ZHMtc2xpZGVyLXRodW1iXCIgfSksXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJldmlldywgeyBjbGFzc05hbWU6IFwidmRzLXNsaWRlci1wcmV2aWV3XCIgfSwgdGh1bWJuYWlscyA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGh1bWJuYWlsLlJvb3QsXG4gICAgICB7XG4gICAgICAgIHNyYzogdGh1bWJuYWlscyxcbiAgICAgICAgY2xhc3NOYW1lOiBcInZkcy1zbGlkZXItdGh1bWJuYWlsIHZkcy10aHVtYm5haWxcIlxuICAgICAgfSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFRodW1ibmFpbC5JbWcsIG51bGwpXG4gICAgKSA6ICRSZW1vdGlvblNsaWRlclRodW1ibmFpbCAmJiBpc1JlbW90aW9uU3JjKCRzcmMpID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJFJlbW90aW9uU2xpZGVyVGh1bWJuYWlsLCB7IGNsYXNzTmFtZTogXCJ2ZHMtc2xpZGVyLXRodW1ibmFpbCB2ZHMtdGh1bWJuYWlsXCIgfSkgOiBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChDaGFwdGVyVGl0bGUsIHsgY2xhc3NOYW1lOiBcInZkcy1zbGlkZXItY2hhcHRlci10aXRsZVwiIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChWYWx1ZSwgeyBjbGFzc05hbWU6IFwidmRzLXNsaWRlci12YWx1ZVwiIH0pKVxuICApO1xufVxuRGVmYXVsdFRpbWVTbGlkZXIuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRUaW1lU2xpZGVyXCI7XG5cbmZ1bmN0aW9uIERlZmF1bHRUaW1lR3JvdXAoeyBzbG90cyB9KSB7XG4gIGNvbnN0ICRkdXJhdGlvbiA9IHVzZU1lZGlhU3RhdGUoXCJkdXJhdGlvblwiKTtcbiAgaWYgKCEkZHVyYXRpb24pIHJldHVybiBudWxsO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwidmRzLXRpbWUtZ3JvdXBcIiB9LCBzbG90KHNsb3RzLCBcImN1cnJlbnRUaW1lXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbWUsIHsgY2xhc3NOYW1lOiBcInZkcy10aW1lXCIsIHR5cGU6IFwiY3VycmVudFwiIH0pKSwgc2xvdChzbG90cywgXCJ0aW1lU2VwYXJhdG9yXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInZkcy10aW1lLWRpdmlkZXJcIiB9LCBcIi9cIikpLCBzbG90KHNsb3RzLCBcImVuZFRpbWVcIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZSwgeyBjbGFzc05hbWU6IFwidmRzLXRpbWVcIiwgdHlwZTogXCJkdXJhdGlvblwiIH0pKSk7XG59XG5EZWZhdWx0VGltZUdyb3VwLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0VGltZUdyb3VwXCI7XG5mdW5jdGlvbiBEZWZhdWx0VGltZUluZm8oeyBzbG90cyB9KSB7XG4gIGNvbnN0ICRsaXZlID0gdXNlTWVkaWFTdGF0ZShcImxpdmVcIik7XG4gIHJldHVybiAkbGl2ZSA/IHNsb3Qoc2xvdHMsIFwibGl2ZUJ1dHRvblwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0TGl2ZUJ1dHRvbiwgbnVsbCkpIDogLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRpbWVHcm91cCwgeyBzbG90cyB9KTtcbn1cbkRlZmF1bHRUaW1lSW5mby5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFRpbWVJbmZvXCI7XG5mdW5jdGlvbiBEZWZhdWx0VGltZUludmVydCh7IHNsb3RzIH0pIHtcbiAgY29uc3QgJGxpdmUgPSB1c2VNZWRpYVN0YXRlKFwibGl2ZVwiKSwgJGR1cmF0aW9uID0gdXNlTWVkaWFTdGF0ZShcImR1cmF0aW9uXCIpO1xuICByZXR1cm4gJGxpdmUgPyBzbG90KHNsb3RzLCBcImxpdmVCdXR0b25cIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdExpdmVCdXR0b24sIG51bGwpKSA6IHNsb3QoXG4gICAgc2xvdHMsXG4gICAgXCJlbmRUaW1lXCIsXG4gICAgJGR1cmF0aW9uID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZSwgeyBjbGFzc05hbWU6IFwidmRzLXRpbWVcIiwgdHlwZTogXCJjdXJyZW50XCIsIHRvZ2dsZTogdHJ1ZSwgcmVtYWluZGVyOiB0cnVlIH0pIDogbnVsbFxuICApO1xufVxuRGVmYXVsdFRpbWVJbnZlcnQuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRUaW1lSW52ZXJ0XCI7XG5cbmNvbnN0IE1lZGlhTGF5b3V0JDEgPSBjcmVhdGVEZWZhdWx0TWVkaWFMYXlvdXQoe1xuICB0eXBlOiBcImF1ZGlvXCIsXG4gIHNtTGF5b3V0V2hlbih7IHdpZHRoIH0pIHtcbiAgICByZXR1cm4gd2lkdGggPCA1NzY7XG4gIH0sXG4gIHJlbmRlckxheW91dDogKCkgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXVkaW9MYXlvdXQsIG51bGwpXG59KTtcbmZ1bmN0aW9uIERlZmF1bHRBdWRpb0xheW91dChwcm9wcykge1xuICBjb25zdCBbc2NydWJiaW5nLCBzZXRTY3J1YmJpbmddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLCAkcG9pbnRlciA9IHVzZU1lZGlhU3RhdGUoXCJwb2ludGVyXCIpO1xuICBjb25zdCBvblN0YXJ0U2NydWJiaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IGV2ZW50LCBoYXNUaW1lU2xpZGVyID0gISEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgdGFyZ2V0LmNsb3Nlc3QoXCIudmRzLXRpbWUtc2xpZGVyXCIpKTtcbiAgICBpZiAoIWhhc1RpbWVTbGlkZXIpIHJldHVybjtcbiAgICBldmVudC5uYXRpdmVFdmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICBzZXRTY3J1YmJpbmcodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgY29uc3Qgb25TdG9wU2NydWJiaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFNjcnViYmluZyhmYWxzZSk7XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoc2NydWJiaW5nKSByZXR1cm4gbGlzdGVuRXZlbnQod2luZG93LCBcInBvaW50ZXJkb3duXCIsIG9uU3RvcFNjcnViYmluZyk7XG4gIH0sIFtzY3J1YmJpbmcsIG9uU3RvcFNjcnViYmluZ10pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTWVkaWFMYXlvdXQkMSxcbiAgICB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIFwiZGF0YS1zY3J1YmJpbmdcIjogc2NydWJiaW5nID8gXCJcIiA6IG51bGwsXG4gICAgICBvblBvaW50ZXJEb3duOiBzY3J1YmJpbmcgPyAoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKSA6IHZvaWQgMCxcbiAgICAgIG9uUG9pbnRlckRvd25DYXB0dXJlOiAkcG9pbnRlciA9PT0gXCJjb2Fyc2VcIiAmJiAhc2NydWJiaW5nID8gb25TdGFydFNjcnViYmluZyA6IHZvaWQgMFxuICAgIH1cbiAgKTtcbn1cbkRlZmF1bHRBdWRpb0xheW91dC5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEF1ZGlvTGF5b3V0XCI7XG5mdW5jdGlvbiBBdWRpb0xheW91dCgpIHtcbiAgY29uc3Qgc2xvdHMgPSB1c2VEZWZhdWx0QXVkaW9MYXlvdXRTbG90cygpO1xuICB1c2VMYXlvdXROYW1lKFwiYXVkaW9cIik7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEFubm91bmNlciwgbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDYXB0aW9ucywgbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkYSwgeyBjbGFzc05hbWU6IFwidmRzLWNvbnRyb2xzXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXAsIHsgY2xhc3NOYW1lOiBcInZkcy1jb250cm9scy1ncm91cFwiIH0sIHNsb3Qoc2xvdHMsIFwic2Vla0JhY2t3YXJkQnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRTZWVrQnV0dG9uLCB7IGJhY2t3YXJkOiB0cnVlLCB0b29sdGlwOiBcInRvcCBzdGFydFwiIH0pKSwgc2xvdChzbG90cywgXCJwbGF5QnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRQbGF5QnV0dG9uLCB7IHRvb2x0aXA6IFwidG9wIGNlbnRlclwiIH0pKSwgc2xvdChzbG90cywgXCJzZWVrRm9yd2FyZEJ1dHRvblwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0U2Vla0J1dHRvbiwgeyB0b29sdGlwOiBcInRvcCBjZW50ZXJcIiB9KSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRBdWRpb1RpdGxlLCBudWxsKSwgc2xvdChzbG90cywgXCJ0aW1lU2xpZGVyXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRUaW1lU2xpZGVyLCBudWxsKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRUaW1lSW52ZXJ0LCB7IHNsb3RzIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Vm9sdW1lUG9wdXAsIHsgb3JpZW50YXRpb246IFwidmVydGljYWxcIiwgdG9vbHRpcDogXCJ0b3BcIiwgc2xvdHMgfSksIHNsb3Qoc2xvdHMsIFwiY2FwdGlvbkJ1dHRvblwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Q2FwdGlvbkJ1dHRvbiwgeyB0b29sdGlwOiBcInRvcCBjZW50ZXJcIiB9KSksIHNsb3Qoc2xvdHMsIFwiZG93bmxvYWRCdXR0b25cIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdERvd25sb2FkQnV0dG9uLCBudWxsKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRBdWRpb01lbnVzLCB7IHNsb3RzIH0pKSkpO1xufVxuQXVkaW9MYXlvdXQuZGlzcGxheU5hbWUgPSBcIkF1ZGlvTGF5b3V0XCI7XG5mdW5jdGlvbiBEZWZhdWx0QXVkaW9NZW51cyh7IHNsb3RzIH0pIHtcbiAgY29uc3QgeyBpc1NtYWxsTGF5b3V0LCBub01vZGFsIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCBwbGFjZW1lbnQgPSBub01vZGFsID8gXCJ0b3AgZW5kXCIgOiAhaXNTbWFsbExheW91dCA/IFwidG9wIGVuZFwiIDogbnVsbDtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBzbG90KFxuICAgIHNsb3RzLFxuICAgIFwiY2hhcHRlcnNNZW51XCIsXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdENoYXB0ZXJzTWVudSwgeyB0b29sdGlwOiBcInRvcFwiLCBwbGFjZW1lbnQsIHBvcnRhbENsYXNzOiBcInZkcy1hdWRpby1sYXlvdXRcIiB9KVxuICApLCBzbG90KFxuICAgIHNsb3RzLFxuICAgIFwic2V0dGluZ3NNZW51XCIsXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBEZWZhdWx0U2V0dGluZ3NNZW51LFxuICAgICAge1xuICAgICAgICB0b29sdGlwOiBcInRvcCBlbmRcIixcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBwb3J0YWxDbGFzczogXCJ2ZHMtYXVkaW8tbGF5b3V0XCIsXG4gICAgICAgIHNsb3RzXG4gICAgICB9XG4gICAgKVxuICApKTtcbn1cbkRlZmF1bHRBdWRpb01lbnVzLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0QXVkaW9NZW51c1wiO1xuZnVuY3Rpb24gRGVmYXVsdEF1ZGlvVGl0bGUoKSB7XG4gIGNvbnN0IFtyb290RWwsIHNldFJvb3RFbF0gPSBSZWFjdC51c2VTdGF0ZShudWxsKSwgbWVkaWEgPSB1c2VNZWRpYUNvbnRleHQoKSwgeyB0cmFuc2xhdGlvbnMgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIFtpc1RleHRPdmVyZmxvd2luZywgc2V0SXNUZXh0T3ZlcmZsb3dpbmddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBpc0NvbnRpbnVlZCA9IGNyZWF0ZUNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCB7IHN0YXJ0ZWQsIGN1cnJlbnRUaW1lIH0gPSBtZWRpYS4kc3RhdGU7XG4gICAgcmV0dXJuIHN0YXJ0ZWQoKSB8fCBjdXJyZW50VGltZSgpID4gMDtcbiAgfSk7XG4gIGNvbnN0ICR0aXRsZSA9IHVzZVNpZ25hbChcbiAgICBjcmVhdGVDb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCB7IHRpdGxlLCBlbmRlZCB9ID0gbWVkaWEuJHN0YXRlO1xuICAgICAgaWYgKCF0aXRsZSgpKSByZXR1cm4gXCJcIjtcbiAgICAgIGNvbnN0IHdvcmQgPSBlbmRlZCgpID8gXCJSZXBsYXlcIiA6IGlzQ29udGludWVkKCkgPyBcIkNvbnRpbnVlXCIgOiBcIlBsYXlcIjtcbiAgICAgIHJldHVybiBgJHtpMThuKHRyYW5zbGF0aW9ucywgd29yZCl9OiAke3RpdGxlKCl9YDtcbiAgICB9KVxuICApO1xuICBjb25zdCBjaGFwdGVyVGl0bGUgPSB1c2VDaGFwdGVyVGl0bGUoKSwgJGlzQ29udGludWVkID0gdXNlU2lnbmFsKGlzQ29udGludWVkKSwgJGNoYXB0ZXJUaXRsZSA9ICRpc0NvbnRpbnVlZCA/IGNoYXB0ZXJUaXRsZSA6IFwiXCIsIGlzVHJhbnNpdGlvbkFjdGl2ZSA9IHVzZVRyYW5zaXRpb25BY3RpdmUocm9vdEVsKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNUcmFuc2l0aW9uQWN0aXZlICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIG1lZGlhLnBsYXllci5lbD8uZm9jdXMoKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgY29uc3Qgb25SZXNpemUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgZWwgPSByb290RWwsIGlzT3ZlcmZsb3dpbmcgPSAhIWVsICYmICFpc1RyYW5zaXRpb25BY3RpdmUgJiYgZWwuY2xpZW50V2lkdGggPCBlbC5jaGlsZHJlblswXS5jbGllbnRXaWR0aDtcbiAgICBpZiAoZWwpIHRvZ2dsZUNsYXNzKGVsLCBcInZkcy1tYXJxdWVlXCIsIGlzT3ZlcmZsb3dpbmcpO1xuICAgIHNldElzVGV4dE92ZXJmbG93aW5nKGlzT3ZlcmZsb3dpbmcpO1xuICB9LCBbcm9vdEVsLCBpc1RyYW5zaXRpb25BY3RpdmVdKTtcbiAgdXNlUmVzaXplT2JzZXJ2ZXIocm9vdEVsLCBvblJlc2l6ZSk7XG4gIHJldHVybiAkdGl0bGUgPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwidmRzLXRpdGxlXCIsIHRpdGxlOiAkdGl0bGUsIHJlZjogc2V0Um9vdEVsIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEF1ZGlvVGl0bGUsIHsgdGl0bGU6ICR0aXRsZSwgY2hhcHRlclRpdGxlOiAkY2hhcHRlclRpdGxlIH0pLCBpc1RleHRPdmVyZmxvd2luZyAmJiAhaXNUcmFuc2l0aW9uQWN0aXZlID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXVkaW9UaXRsZSwgeyB0aXRsZTogJHRpdGxlLCBjaGFwdGVyVGl0bGU6ICRjaGFwdGVyVGl0bGUgfSkgOiBudWxsKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDb250cm9sc1NwYWNlciwgbnVsbCk7XG59XG5EZWZhdWx0QXVkaW9UaXRsZS5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdEF1ZGlvVGl0bGVcIjtcbmZ1bmN0aW9uIEF1ZGlvVGl0bGUoeyB0aXRsZSwgY2hhcHRlclRpdGxlIH0pIHtcbiAgY29uc3Qgc2xvdHMgPSB1c2VEZWZhdWx0QXVkaW9MYXlvdXRTbG90cygpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcInZkcy10aXRsZS10ZXh0XCIgfSwgc2xvdChzbG90cywgXCJ0aXRsZVwiLCB0aXRsZSksIHNsb3Qoc2xvdHMsIFwiY2hhcHRlclRpdGxlXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtY2hhcHRlci10aXRsZVwiIH0sIGNoYXB0ZXJUaXRsZSkpKTtcbn1cbkF1ZGlvVGl0bGUuZGlzcGxheU5hbWUgPSBcIkF1ZGlvVGl0bGVcIjtcblxuY29uc3QgRGVmYXVsdEtleWJvYXJkRGlzcGxheSA9IFJlYWN0LmZvcndhcmRSZWYoXG4gICh7IGljb25zOiBJY29ucywgLi4ucHJvcHMgfSwgZm9yd2FyZFJlZikgPT4ge1xuICAgIGNvbnN0IFt2aXNpYmxlLCBzZXRWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSwgW0ljb24sIHNldEljb25dID0gUmVhY3QudXNlU3RhdGUobnVsbCksIFtjb3VudCwgc2V0Q291bnRdID0gUmVhY3QudXNlU3RhdGUoMCksICRsYXN0S2V5Ym9hcmRBY3Rpb24gPSB1c2VNZWRpYVN0YXRlKFwibGFzdEtleWJvYXJkQWN0aW9uXCIpO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBzZXRDb3VudCgobikgPT4gbiArIDEpO1xuICAgIH0sIFskbGFzdEtleWJvYXJkQWN0aW9uXSk7XG4gICAgY29uc3QgYWN0aW9uRGF0YUF0dHIgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9ICRsYXN0S2V5Ym9hcmRBY3Rpb24/LmFjdGlvbjtcbiAgICAgIHJldHVybiBhY3Rpb24gJiYgdmlzaWJsZSA/IGNhbWVsVG9LZWJhYkNhc2UoYWN0aW9uKSA6IG51bGw7XG4gICAgfSwgW3Zpc2libGUsICRsYXN0S2V5Ym9hcmRBY3Rpb25dKTtcbiAgICBjb25zdCBjbGFzc05hbWUgPSBSZWFjdC51c2VNZW1vKFxuICAgICAgKCkgPT4gYHZkcy1rYi1hY3Rpb24keyF2aXNpYmxlID8gXCIgaGlkZGVuXCIgOiBcIlwifSR7cHJvcHMuY2xhc3NOYW1lID8gYCAke3Byb3BzLmNsYXNzTmFtZX1gIDogXCJcIn1gLFxuICAgICAgW3Zpc2libGVdXG4gICAgKTtcbiAgICBjb25zdCAkJHRleHQgPSBjcmVhdGVDb21wdXRlZChnZXRUZXh0KSwgJHRleHQgPSB1c2VTaWduYWwoJCR0ZXh0KTtcbiAgICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgSWNvbjIgPSBnZXRJY29uKEljb25zKTtcbiAgICAgIHNldEljb24oKCkgPT4gSWNvbjIpO1xuICAgIH0sIFtJY29uc10pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBzZXRWaXNpYmxlKCEhJGxhc3RLZXlib2FyZEFjdGlvbik7XG4gICAgICBjb25zdCBpZCA9IHNldFRpbWVvdXQoKCkgPT4gc2V0VmlzaWJsZShmYWxzZSksIDUwMCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBzZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChpZCk7XG4gICAgICB9O1xuICAgIH0sIFskbGFzdEtleWJvYXJkQWN0aW9uXSk7XG4gICAgcmV0dXJuIEljb24gPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFByaW1pdGl2ZS5kaXYsXG4gICAgICB7XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIFwiZGF0YS1hY3Rpb25cIjogYWN0aW9uRGF0YUF0dHIsXG4gICAgICAgIHJlZjogZm9yd2FyZFJlZlxuICAgICAgfSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInZkcy1rYi10ZXh0LXdyYXBwZXJcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMta2ItdGV4dFwiIH0sICR0ZXh0KSksXG4gICAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMta2ItYmV6ZWxcIiwga2V5OiBjb3VudCB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMta2ItaWNvblwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIG51bGwpKSlcbiAgICApIDogbnVsbDtcbiAgfVxuKTtcbkRlZmF1bHRLZXlib2FyZERpc3BsYXkuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRLZXlib2FyZERpc3BsYXlcIjtcbmZ1bmN0aW9uIGdldFRleHQoKSB7XG4gIGNvbnN0IHsgJHN0YXRlIH0gPSB1c2VDb250ZXh0KG1lZGlhQ29udGV4dCksIGFjdGlvbiA9ICRzdGF0ZS5sYXN0S2V5Ym9hcmRBY3Rpb24oKT8uYWN0aW9uLCBhdWRpb0dhaW4gPSAkc3RhdGUuYXVkaW9HYWluKCkgPz8gMTtcbiAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICBjYXNlIFwidG9nZ2xlTXV0ZWRcIjpcbiAgICAgIHJldHVybiAkc3RhdGUubXV0ZWQoKSA/IFwiMCVcIiA6IGdldFZvbHVtZVRleHQoJHN0YXRlLnZvbHVtZSgpLCBhdWRpb0dhaW4pO1xuICAgIGNhc2UgXCJ2b2x1bWVVcFwiOlxuICAgIGNhc2UgXCJ2b2x1bWVEb3duXCI6XG4gICAgICByZXR1cm4gZ2V0Vm9sdW1lVGV4dCgkc3RhdGUudm9sdW1lKCksIGF1ZGlvR2Fpbik7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5mdW5jdGlvbiBnZXRWb2x1bWVUZXh0KHZvbHVtZSwgZ2Fpbikge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZCh2b2x1bWUgKiBnYWluICogMTAwKX0lYDtcbn1cbmZ1bmN0aW9uIGdldEljb24oSWNvbnMpIHtcbiAgY29uc3QgeyAkc3RhdGUgfSA9IHVzZUNvbnRleHQobWVkaWFDb250ZXh0KSwgYWN0aW9uID0gJHN0YXRlLmxhc3RLZXlib2FyZEFjdGlvbigpPy5hY3Rpb247XG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSBcInRvZ2dsZVBhdXNlZFwiOlxuICAgICAgcmV0dXJuICEkc3RhdGUucGF1c2VkKCkgPyBJY29ucy5QbGF5IDogSWNvbnMuUGF1c2U7XG4gICAgY2FzZSBcInRvZ2dsZU11dGVkXCI6XG4gICAgICByZXR1cm4gJHN0YXRlLm11dGVkKCkgfHwgJHN0YXRlLnZvbHVtZSgpID09PSAwID8gSWNvbnMuTXV0ZSA6ICRzdGF0ZS52b2x1bWUoKSA+PSAwLjUgPyBJY29ucy5Wb2x1bWVVcCA6IEljb25zLlZvbHVtZURvd247XG4gICAgY2FzZSBcInRvZ2dsZUZ1bGxzY3JlZW5cIjpcbiAgICAgIHJldHVybiAkc3RhdGUuZnVsbHNjcmVlbigpID8gSWNvbnMuRW50ZXJGdWxsc2NyZWVuIDogSWNvbnMuRXhpdEZ1bGxzY3JlZW47XG4gICAgY2FzZSBcInRvZ2dsZVBpY3R1cmVJblBpY3R1cmVcIjpcbiAgICAgIHJldHVybiAkc3RhdGUucGljdHVyZUluUGljdHVyZSgpID8gSWNvbnMuRW50ZXJQaVAgOiBJY29ucy5FeGl0UGlQO1xuICAgIGNhc2UgXCJ0b2dnbGVDYXB0aW9uc1wiOlxuICAgICAgcmV0dXJuICRzdGF0ZS5oYXNDYXB0aW9ucygpID8gJHN0YXRlLnRleHRUcmFjaygpID8gSWNvbnMuQ2FwdGlvbnNPbiA6IEljb25zLkNhcHRpb25zT2ZmIDogbnVsbDtcbiAgICBjYXNlIFwidm9sdW1lVXBcIjpcbiAgICAgIHJldHVybiBJY29ucy5Wb2x1bWVVcDtcbiAgICBjYXNlIFwidm9sdW1lRG93blwiOlxuICAgICAgcmV0dXJuIEljb25zLlZvbHVtZURvd247XG4gICAgY2FzZSBcInNlZWtGb3J3YXJkXCI6XG4gICAgICByZXR1cm4gSWNvbnMuU2Vla0ZvcndhcmQ7XG4gICAgY2FzZSBcInNlZWtCYWNrd2FyZFwiOlxuICAgICAgcmV0dXJuIEljb25zLlNlZWtCYWNrd2FyZDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gRGVmYXVsdFRpdGxlKCkge1xuICBjb25zdCAkc3RhcnRlZCA9IHVzZU1lZGlhU3RhdGUoXCJzdGFydGVkXCIpLCAkdGl0bGUgPSB1c2VNZWRpYVN0YXRlKFwidGl0bGVcIiksICRoYXNDaGFwdGVycyA9IHVzZUFjdGl2ZVRleHRUcmFjayhcImNoYXB0ZXJzXCIpO1xuICByZXR1cm4gJGhhc0NoYXB0ZXJzICYmICgkc3RhcnRlZCB8fCAhJHRpdGxlKSA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KENoYXB0ZXJUaXRsZSQxLCB7IGNsYXNzTmFtZTogXCJ2ZHMtY2hhcHRlci10aXRsZVwiIH0pIDogLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGl0bGUsIHsgY2xhc3NOYW1lOiBcInZkcy1jaGFwdGVyLXRpdGxlXCIgfSk7XG59XG5EZWZhdWx0VGl0bGUuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRUaXRsZVwiO1xuXG5jb25zdCBNZWRpYUxheW91dCA9IGNyZWF0ZURlZmF1bHRNZWRpYUxheW91dCh7XG4gIHR5cGU6IFwidmlkZW9cIixcbiAgc21MYXlvdXRXaGVuKHsgd2lkdGgsIGhlaWdodCB9KSB7XG4gICAgcmV0dXJuIHdpZHRoIDwgNTc2IHx8IGhlaWdodCA8IDM4MDtcbiAgfSxcbiAgcmVuZGVyTGF5b3V0KHByb3BzKSB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFZpZGVvTGF5b3V0LCB7IC4uLnByb3BzIH0pO1xuICB9XG59KTtcbmZ1bmN0aW9uIERlZmF1bHRWaWRlb0xheW91dChwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVkaWFMYXlvdXQsIHsgLi4ucHJvcHMgfSk7XG59XG5EZWZhdWx0VmlkZW9MYXlvdXQuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRWaWRlb0xheW91dFwiO1xuZnVuY3Rpb24gVmlkZW9MYXlvdXQoeyBzdHJlYW1UeXBlLCBpc0xvYWRMYXlvdXQsIGlzU21hbGxMYXlvdXQgfSkge1xuICB1c2VMYXlvdXROYW1lKFwidmlkZW9cIik7XG4gIHJldHVybiBpc0xvYWRMYXlvdXQgPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VmlkZW9Mb2FkTGF5b3V0LCBudWxsKSA6IHN0cmVhbVR5cGUgPT09IFwidW5rbm93blwiID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEJ1ZmZlcmluZ0luZGljYXRvciwgbnVsbCkgOiBpc1NtYWxsTGF5b3V0ID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFZpZGVvU21hbGxMYXlvdXQsIG51bGwpIDogLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFZpZGVvTGFyZ2VMYXlvdXQsIG51bGwpO1xufVxuVmlkZW9MYXlvdXQuZGlzcGxheU5hbWUgPSBcIlZpZGVvTGF5b3V0XCI7XG5mdW5jdGlvbiBEZWZhdWx0VmlkZW9MYXJnZUxheW91dCgpIHtcbiAgY29uc3QgeyBtZW51R3JvdXAgfSA9IHVzZURlZmF1bHRMYXlvdXRDb250ZXh0KCksIGJhc2VTbG90cyA9IHVzZURlZmF1bHRWaWRlb0xheW91dFNsb3RzKCksIHNsb3RzID0geyAuLi5iYXNlU2xvdHMsIC4uLmJhc2VTbG90cz8ubGFyZ2VMYXlvdXQgfTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0QW5ub3VuY2VyLCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFZpZGVvR2VzdHVyZXMsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VmlkZW9LZXlib2FyZERpc3BsYXksIG51bGwpLCBzbG90KHNsb3RzLCBcImJ1ZmZlcmluZ0luZGljYXRvclwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0QnVmZmVyaW5nSW5kaWNhdG9yLCBudWxsKSksIHNsb3Qoc2xvdHMsIFwiY2FwdGlvbnNcIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdENhcHRpb25zLCBudWxsKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkYSwgeyBjbGFzc05hbWU6IFwidmRzLWNvbnRyb2xzXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXAsIHsgY2xhc3NOYW1lOiBcInZkcy1jb250cm9scy1ncm91cFwiIH0sIHNsb3Qoc2xvdHMsIFwidG9wQ29udHJvbHNHcm91cFN0YXJ0XCIsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Q29udHJvbHNTcGFjZXIsIG51bGwpLCBzbG90KHNsb3RzLCBcInRvcENvbnRyb2xzR3JvdXBDZW50ZXJcIiwgbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDb250cm9sc1NwYWNlciwgbnVsbCksIHNsb3Qoc2xvdHMsIFwidG9wQ29udHJvbHNHcm91cEVuZFwiLCBudWxsKSwgbWVudUdyb3VwID09PSBcInRvcFwiICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRWaWRlb01lbnVzLCB7IHNsb3RzIH0pKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdENvbnRyb2xzU3BhY2VyLCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXAsIHsgY2xhc3NOYW1lOiBcInZkcy1jb250cm9scy1ncm91cFwiIH0sIHNsb3Qoc2xvdHMsIFwiY2VudGVyQ29udHJvbHNHcm91cFN0YXJ0XCIsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Q29udHJvbHNTcGFjZXIsIG51bGwpLCBzbG90KHNsb3RzLCBcImNlbnRlckNvbnRyb2xzR3JvdXBDZW50ZXJcIiwgbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDb250cm9sc1NwYWNlciwgbnVsbCksIHNsb3Qoc2xvdHMsIFwiY2VudGVyQ29udHJvbHNHcm91cEVuZFwiLCBudWxsKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDb250cm9sc1NwYWNlciwgbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEdyb3VwLCB7IGNsYXNzTmFtZTogXCJ2ZHMtY29udHJvbHMtZ3JvdXBcIiB9LCBzbG90KHNsb3RzLCBcInRpbWVTbGlkZXJcIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRpbWVTbGlkZXIsIG51bGwpKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEdyb3VwLCB7IGNsYXNzTmFtZTogXCJ2ZHMtY29udHJvbHMtZ3JvdXBcIiB9LCBzbG90KHNsb3RzLCBcInBsYXlCdXR0b25cIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFBsYXlCdXR0b24sIHsgdG9vbHRpcDogXCJ0b3Agc3RhcnRcIiB9KSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRWb2x1bWVQb3B1cCwgeyBvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsIHRvb2x0aXA6IFwidG9wXCIsIHNsb3RzIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VGltZUluZm8sIHsgc2xvdHMgfSksIHNsb3Qoc2xvdHMsIFwiY2hhcHRlclRpdGxlXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRUaXRsZSwgbnVsbCkpLCBzbG90KHNsb3RzLCBcImNhcHRpb25CdXR0b25cIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdENhcHRpb25CdXR0b24sIHsgdG9vbHRpcDogXCJ0b3BcIiB9KSksIG1lbnVHcm91cCA9PT0gXCJib3R0b21cIiAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VmlkZW9NZW51cywgeyBzbG90cyB9KSwgc2xvdChzbG90cywgXCJhaXJQbGF5QnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRBaXJQbGF5QnV0dG9uLCB7IHRvb2x0aXA6IFwidG9wXCIgfSkpLCBzbG90KHNsb3RzLCBcImdvb2dsZUNhc3RCdXR0b25cIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEdvb2dsZUNhc3RCdXR0b24sIHsgdG9vbHRpcDogXCJ0b3BcIiB9KSksIHNsb3Qoc2xvdHMsIFwiZG93bmxvYWRCdXR0b25cIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdERvd25sb2FkQnV0dG9uLCBudWxsKSksIHNsb3Qoc2xvdHMsIFwicGlwQnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRQSVBCdXR0b24sIHsgdG9vbHRpcDogXCJ0b3BcIiB9KSksIHNsb3Qoc2xvdHMsIFwiZnVsbHNjcmVlbkJ1dHRvblwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RnVsbHNjcmVlbkJ1dHRvbiwgeyB0b29sdGlwOiBcInRvcCBlbmRcIiB9KSkpKSk7XG59XG5EZWZhdWx0VmlkZW9MYXJnZUxheW91dC5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFZpZGVvTGFyZ2VMYXlvdXRcIjtcbmZ1bmN0aW9uIERlZmF1bHRWaWRlb1NtYWxsTGF5b3V0KCkge1xuICBjb25zdCBiYXNlU2xvdHMgPSB1c2VEZWZhdWx0VmlkZW9MYXlvdXRTbG90cygpLCBzbG90cyA9IHsgLi4uYmFzZVNsb3RzLCAuLi5iYXNlU2xvdHM/LnNtYWxsTGF5b3V0IH07XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEFubm91bmNlciwgbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRWaWRlb0dlc3R1cmVzLCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFZpZGVvS2V5Ym9hcmREaXNwbGF5LCBudWxsKSwgc2xvdChzbG90cywgXCJidWZmZXJpbmdJbmRpY2F0b3JcIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEJ1ZmZlcmluZ0luZGljYXRvciwgbnVsbCkpLCBzbG90KHNsb3RzLCBcImNhcHRpb25zXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDYXB0aW9ucywgbnVsbCkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSb290JGEsIHsgY2xhc3NOYW1lOiBcInZkcy1jb250cm9sc1wiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEdyb3VwLCB7IGNsYXNzTmFtZTogXCJ2ZHMtY29udHJvbHMtZ3JvdXBcIiB9LCBzbG90KHNsb3RzLCBcInRvcENvbnRyb2xzR3JvdXBTdGFydFwiLCBudWxsKSwgc2xvdChzbG90cywgXCJhaXJQbGF5QnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRBaXJQbGF5QnV0dG9uLCB7IHRvb2x0aXA6IFwidG9wIHN0YXJ0XCIgfSkpLCBzbG90KHNsb3RzLCBcImdvb2dsZUNhc3RCdXR0b25cIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEdvb2dsZUNhc3RCdXR0b24sIHsgdG9vbHRpcDogXCJ0b3Agc3RhcnRcIiB9KSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDb250cm9sc1NwYWNlciwgbnVsbCksIHNsb3Qoc2xvdHMsIFwidG9wQ29udHJvbHNHcm91cENlbnRlclwiLCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdENvbnRyb2xzU3BhY2VyLCBudWxsKSwgc2xvdChzbG90cywgXCJjYXB0aW9uQnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRDYXB0aW9uQnV0dG9uLCB7IHRvb2x0aXA6IFwiYm90dG9tXCIgfSkpLCBzbG90KHNsb3RzLCBcImRvd25sb2FkQnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHREb3dubG9hZEJ1dHRvbiwgbnVsbCkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0VmlkZW9NZW51cywgeyBzbG90cyB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFZvbHVtZVBvcHVwLCB7IG9yaWVudGF0aW9uOiBcInZlcnRpY2FsXCIsIHRvb2x0aXA6IFwiYm90dG9tIGVuZFwiLCBzbG90cyB9KSwgc2xvdChzbG90cywgXCJ0b3BDb250cm9sc0dyb3VwRW5kXCIsIG51bGwpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdENvbnRyb2xzU3BhY2VyLCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXAsIHsgY2xhc3NOYW1lOiBcInZkcy1jb250cm9scy1ncm91cFwiLCBzdHlsZTogeyBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIiB9IH0sIHNsb3Qoc2xvdHMsIFwiY2VudGVyQ29udHJvbHNHcm91cFN0YXJ0XCIsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0Q29udHJvbHNTcGFjZXIsIG51bGwpLCBzbG90KHNsb3RzLCBcImNlbnRlckNvbnRyb2xzR3JvdXBDZW50ZXJcIiwgbnVsbCksIHNsb3Qoc2xvdHMsIFwicGxheUJ1dHRvblwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0UGxheUJ1dHRvbiwgeyB0b29sdGlwOiBcInRvcFwiIH0pKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdENvbnRyb2xzU3BhY2VyLCBudWxsKSwgc2xvdChzbG90cywgXCJjZW50ZXJDb250cm9sc0dyb3VwRW5kXCIsIG51bGwpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdENvbnRyb2xzU3BhY2VyLCBudWxsKSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXAsIHsgY2xhc3NOYW1lOiBcInZkcy1jb250cm9scy1ncm91cFwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRUaW1lSW5mbywgeyBzbG90cyB9KSwgc2xvdChzbG90cywgXCJjaGFwdGVyVGl0bGVcIiwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFRpdGxlLCBudWxsKSksIHNsb3Qoc2xvdHMsIFwiZnVsbHNjcmVlbkJ1dHRvblwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RnVsbHNjcmVlbkJ1dHRvbiwgeyB0b29sdGlwOiBcInRvcCBlbmRcIiB9KSkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChHcm91cCwgeyBjbGFzc05hbWU6IFwidmRzLWNvbnRyb2xzLWdyb3VwXCIgfSwgc2xvdChzbG90cywgXCJ0aW1lU2xpZGVyXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRUaW1lU2xpZGVyLCBudWxsKSkpKSwgc2xvdChzbG90cywgXCJzdGFydER1cmF0aW9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRWaWRlb1N0YXJ0RHVyYXRpb24sIG51bGwpKSk7XG59XG5EZWZhdWx0VmlkZW9TbWFsbExheW91dC5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFZpZGVvU21hbGxMYXlvdXRcIjtcbmZ1bmN0aW9uIERlZmF1bHRWaWRlb1N0YXJ0RHVyYXRpb24oKSB7XG4gIGNvbnN0ICRkdXJhdGlvbiA9IHVzZU1lZGlhU3RhdGUoXCJkdXJhdGlvblwiKTtcbiAgaWYgKCRkdXJhdGlvbiA9PT0gMCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtc3RhcnQtZHVyYXRpb25cIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChUaW1lLCB7IGNsYXNzTmFtZTogXCJ2ZHMtdGltZVwiLCB0eXBlOiBcImR1cmF0aW9uXCIgfSkpO1xufVxuRGVmYXVsdFZpZGVvU3RhcnREdXJhdGlvbi5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFZpZGVvU3RhcnREdXJhdGlvblwiO1xuZnVuY3Rpb24gRGVmYXVsdFZpZGVvR2VzdHVyZXMoKSB7XG4gIGNvbnN0IHsgbm9HZXN0dXJlcyB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKTtcbiAgaWYgKG5vR2VzdHVyZXMpIHJldHVybiBudWxsO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwidmRzLWdlc3R1cmVzXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2VzdHVyZSwgeyBjbGFzc05hbWU6IFwidmRzLWdlc3R1cmVcIiwgZXZlbnQ6IFwicG9pbnRlcnVwXCIsIGFjdGlvbjogXCJ0b2dnbGU6cGF1c2VkXCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEdlc3R1cmUsIHsgY2xhc3NOYW1lOiBcInZkcy1nZXN0dXJlXCIsIGV2ZW50OiBcInBvaW50ZXJ1cFwiLCBhY3Rpb246IFwidG9nZ2xlOmNvbnRyb2xzXCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEdlc3R1cmUsIHsgY2xhc3NOYW1lOiBcInZkcy1nZXN0dXJlXCIsIGV2ZW50OiBcImRibHBvaW50ZXJ1cFwiLCBhY3Rpb246IFwidG9nZ2xlOmZ1bGxzY3JlZW5cIiB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2VzdHVyZSwgeyBjbGFzc05hbWU6IFwidmRzLWdlc3R1cmVcIiwgZXZlbnQ6IFwiZGJscG9pbnRlcnVwXCIsIGFjdGlvbjogXCJzZWVrOi0xMFwiIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChHZXN0dXJlLCB7IGNsYXNzTmFtZTogXCJ2ZHMtZ2VzdHVyZVwiLCBldmVudDogXCJkYmxwb2ludGVydXBcIiwgYWN0aW9uOiBcInNlZWs6MTBcIiB9KSk7XG59XG5EZWZhdWx0VmlkZW9HZXN0dXJlcy5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFZpZGVvR2VzdHVyZXNcIjtcbmZ1bmN0aW9uIERlZmF1bHRCdWZmZXJpbmdJbmRpY2F0b3IoKSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ2ZHMtYnVmZmVyaW5nLWluZGljYXRvclwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QkYiwgeyBjbGFzc05hbWU6IFwidmRzLWJ1ZmZlcmluZy1zcGlubmVyXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhY2skMSwgeyBjbGFzc05hbWU6IFwidmRzLWJ1ZmZlcmluZy10cmFja1wiIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFja0ZpbGwkMSwgeyBjbGFzc05hbWU6IFwidmRzLWJ1ZmZlcmluZy10cmFjay1maWxsXCIgfSkpKTtcbn1cbkRlZmF1bHRCdWZmZXJpbmdJbmRpY2F0b3IuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRCdWZmZXJpbmdJbmRpY2F0b3JcIjtcbmZ1bmN0aW9uIERlZmF1bHRWaWRlb01lbnVzKHsgc2xvdHMgfSkge1xuICBjb25zdCB7IGlzU21hbGxMYXlvdXQsIG5vTW9kYWwsIG1lbnVHcm91cCB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgc2lkZSA9IG1lbnVHcm91cCA9PT0gXCJ0b3BcIiB8fCBpc1NtYWxsTGF5b3V0ID8gXCJib3R0b21cIiA6IFwidG9wXCIsIHRvb2x0aXAgPSBgJHtzaWRlfSBlbmRgLCBwbGFjZW1lbnQgPSBub01vZGFsID8gYCR7c2lkZX0gZW5kYCA6ICFpc1NtYWxsTGF5b3V0ID8gYCR7c2lkZX0gZW5kYCA6IG51bGw7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgc2xvdChcbiAgICBzbG90cyxcbiAgICBcImNoYXB0ZXJzTWVudVwiLFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgRGVmYXVsdENoYXB0ZXJzTWVudSxcbiAgICAgIHtcbiAgICAgICAgdG9vbHRpcCxcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBwb3J0YWxDbGFzczogXCJ2ZHMtdmlkZW8tbGF5b3V0XCJcbiAgICAgIH1cbiAgICApXG4gICksIHNsb3QoXG4gICAgc2xvdHMsXG4gICAgXCJzZXR0aW5nc01lbnVcIixcbiAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIERlZmF1bHRTZXR0aW5nc01lbnUsXG4gICAgICB7XG4gICAgICAgIHRvb2x0aXAsXG4gICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgcG9ydGFsQ2xhc3M6IFwidmRzLXZpZGVvLWxheW91dFwiLFxuICAgICAgICBzbG90c1xuICAgICAgfVxuICAgIClcbiAgKSk7XG59XG5EZWZhdWx0VmlkZW9NZW51cy5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFZpZGVvTWVudXNcIjtcbmZ1bmN0aW9uIERlZmF1bHRWaWRlb0xvYWRMYXlvdXQoKSB7XG4gIGNvbnN0IHsgaXNTbWFsbExheW91dCB9ID0gdXNlRGVmYXVsdExheW91dENvbnRleHQoKSwgYmFzZVNsb3RzID0gdXNlRGVmYXVsdFZpZGVvTGF5b3V0U2xvdHMoKSwgc2xvdHMgPSB7IC4uLmJhc2VTbG90cywgLi4uYmFzZVNsb3RzPy5baXNTbWFsbExheW91dCA/IFwic21hbGxMYXlvdXRcIiA6IFwibGFyZ2VMYXlvdXRcIl0gfTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInZkcy1sb2FkLWNvbnRhaW5lclwiIH0sIHNsb3Qoc2xvdHMsIFwiYnVmZmVyaW5nSW5kaWNhdG9yXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRCdWZmZXJpbmdJbmRpY2F0b3IsIG51bGwpKSwgc2xvdChzbG90cywgXCJsb2FkQnV0dG9uXCIsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRQbGF5QnV0dG9uLCB7IHRvb2x0aXA6IFwidG9wXCIgfSkpKTtcbn1cbkRlZmF1bHRWaWRlb0xvYWRMYXlvdXQuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRWaWRlb0xvYWRMYXlvdXRcIjtcbmZ1bmN0aW9uIERlZmF1bHRWaWRlb0tleWJvYXJkRGlzcGxheSgpIHtcbiAgY29uc3QgeyBub0tleWJvYXJkQW5pbWF0aW9ucywgaWNvbnMsIHVzZXJQcmVmZXJzS2V5Ym9hcmRBbmltYXRpb25zIH0gPSB1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCgpLCAkdXNlclByZWZlcnNLZXlib2FyZEFuaW1hdGlvbnMgPSB1c2VTaWduYWwodXNlclByZWZlcnNLZXlib2FyZEFuaW1hdGlvbnMpLCBkaXNhYmxlZCA9IG5vS2V5Ym9hcmRBbmltYXRpb25zIHx8ICEkdXNlclByZWZlcnNLZXlib2FyZEFuaW1hdGlvbnM7XG4gIGlmIChkaXNhYmxlZCB8fCAhaWNvbnMuS2V5Ym9hcmREaXNwbGF5KSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRLZXlib2FyZERpc3BsYXksIHsgaWNvbnM6IGljb25zLktleWJvYXJkRGlzcGxheSB9KTtcbn1cbkRlZmF1bHRWaWRlb0tleWJvYXJkRGlzcGxheS5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdFZpZGVvS2V5Ym9hcmREaXNwbGF5XCI7XG5cbmV4cG9ydCB7IERlZmF1bHRBdWRpb0xheW91dCwgRGVmYXVsdEJ1ZmZlcmluZ0luZGljYXRvciwgRGVmYXVsdEtleWJvYXJkRGlzcGxheSwgRGVmYXVsdExheW91dENvbnRleHQsIERlZmF1bHRNZW51QnV0dG9uLCBEZWZhdWx0TWVudUNoZWNrYm94LCBEZWZhdWx0TWVudUl0ZW0sIERlZmF1bHRNZW51UmFkaW9Hcm91cCwgRGVmYXVsdE1lbnVTZWN0aW9uLCBEZWZhdWx0TWVudVNsaWRlckl0ZW0sIERlZmF1bHRTbGlkZXJQYXJ0cywgRGVmYXVsdFNsaWRlclN0ZXBzLCBEZWZhdWx0VG9vbHRpcCwgRGVmYXVsdFZpZGVvR2VzdHVyZXMsIERlZmF1bHRWaWRlb0xhcmdlTGF5b3V0LCBEZWZhdWx0VmlkZW9MYXlvdXQsIERlZmF1bHRWaWRlb1NtYWxsTGF5b3V0LCBjcmVhdGVSYWRpb09wdGlvbnMsIGkxOG4sIHVzZURlZmF1bHRMYXlvdXRDb250ZXh0LCB1c2VEZWZhdWx0TGF5b3V0V29yZCB9O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU2lnbmFsIiwiaXNCb29sZWFuIiwiY29tcG9zZVJlZnMiLCJ1cHBlcmNhc2VGaXJzdENoYXIiLCJpc1VuZGVmaW5lZCIsInNpZ25hbCIsImNhbWVsVG9LZWJhYkNhc2UiLCJpc1N0cmluZyIsIm9uRGlzcG9zZSIsInNjb3BlZCIsImtleXNPZiIsImVmZmVjdCIsImlzQXJyYXkiLCJpc0tleWJvYXJkQ2xpY2siLCJsaXN0ZW5FdmVudCIsInRvZ2dsZUNsYXNzIiwidXNlQ29udGV4dCIsImNyZWF0ZUNvbXB1dGVkIiwiY3JlYXRlU2lnbmFsIiwiTWVkaWFBbm5vdW5jZXIiLCJSb290IiwiVHJpZ2dlciIsIkNvbnRlbnQiLCJHb29nbGVDYXN0QnV0dG9uIiwiQ2FwdGlvbnMiLCJ1c2VDaGFwdGVyT3B0aW9ucyIsIlJvb3QkMSIsIlJvb3QkNSIsIlJvb3QkMiIsIlJvb3QkNiIsIlJvb3QkMyIsIlJvb3QkNyIsInVzZVNjb3BlZCIsIlJvb3QkNCIsIlJvb3QkYSIsIkdyb3VwIiwidXNlQ2hhcHRlclRpdGxlIiwiY3JlYXRlRWZmZWN0IiwidXNlQWN0aXZlVGV4dFRyYWNrIiwiQ2hhcHRlclRpdGxlIiwiQ2hhcHRlclRpdGxlJDEiLCJUaXRsZSIsIlJvb3QkYiIsIlRyYWNrIiwiVHJhY2skMSIsIlRyYWNrRmlsbCIsIlRyYWNrRmlsbCQxIiwidXNlQ29sb3JTY2hlbWVQcmVmZXJlbmNlIiwidXNlQWN0aXZlIiwidXNlUmVzaXplT2JzZXJ2ZXIiLCJ1c2VMYXlvdXROYW1lIiwidXNlVHJhbnNpdGlvbkFjdGl2ZSIsInVzZU1lZGlhQ29udGV4dCIsIk11dGVCdXR0b24iLCJQbGF5QnV0dG9uIiwiQ2FwdGlvbkJ1dHRvbiIsIlBJUEJ1dHRvbiIsIkZ1bGxzY3JlZW5CdXR0b24iLCJTZWVrQnV0dG9uIiwiQWlyUGxheUJ1dHRvbiIsIkxpdmVCdXR0b24iLCJJdGVtcyIsIkl0ZW0iLCJJbWciLCJCdXR0b24iLCJQb3J0YWwiLCJUaHVtYiIsIlN0ZXBzIiwidXNlTWVkaWFQbGF5ZXIiLCJ1c2VBdWRpb09wdGlvbnMiLCJ1c2VDYXB0aW9uT3B0aW9ucyIsIlJvb3QkOCIsIlByZXZpZXciLCJWYWx1ZSIsIlJvb3QkOSIsIkNoYXB0ZXJzIiwiUHJvZ3Jlc3MiLCJUaHVtYm5haWwiLCJUaW1lIiwiR2VzdHVyZSIsInVzZU1lZGlhU3RhdGUiLCJpc1RyYWNrQ2FwdGlvbktpbmQiLCJnZXREb3dubG9hZEZpbGUiLCJpc1JlbW90aW9uU3JjIiwiSVNfU0VSVkVSIiwidXNlTWVkaWFDb250ZXh0JDEiLCJzb3J0VmlkZW9RdWFsaXRpZXMiLCJQcmltaXRpdmUiLCJtZWRpYUNvbnRleHQiLCJmbHVzaFN5bmMiLCJSZW1vdGlvblRodW1ibmFpbCIsIlJlbW90aW9uU2xpZGVyVGh1bWJuYWlsIiwiRGVmYXVsdExheW91dENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiZGlzcGxheU5hbWUiLCJ1c2VEZWZhdWx0TGF5b3V0Q29udGV4dCIsInVzZURlZmF1bHRMYXlvdXRXb3JkIiwid29yZCIsInRyYW5zbGF0aW9ucyIsImkxOG4iLCJ1c2VDb2xvclNjaGVtZUNsYXNzIiwiY29sb3JTY2hlbWUiLCJzeXN0ZW1Db2xvclByZWZlcmVuY2UiLCJjcmVhdGVEZWZhdWx0TWVkaWFMYXlvdXQiLCJ0eXBlIiwic21MYXlvdXRXaGVuIiwicmVuZGVyTGF5b3V0IiwiTGF5b3V0IiwiZm9yd2FyZFJlZiIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwiZGlzYWJsZVRpbWVTbGlkZXIiLCJoaWRlUXVhbGl0eUJpdHJhdGUiLCJpY29ucyIsImRvd25sb2FkIiwibWVudUNvbnRhaW5lciIsIm1lbnVHcm91cCIsIm5vQXVkaW9HYWluIiwiYXVkaW9HYWlucyIsIm1pbiIsIm1heCIsInN0ZXAiLCJub0dlc3R1cmVzIiwibm9LZXlib2FyZEFuaW1hdGlvbnMiLCJub01vZGFsIiwibm9TY3J1Ykdlc3R1cmUiLCJwbGF5YmFja1JhdGVzIiwic2Vla1N0ZXAiLCJzaG93TWVudURlbGF5Iiwic2hvd1Rvb2x0aXBEZWxheSIsInNsaWRlckNoYXB0ZXJzTWluV2lkdGgiLCJzbG90cyIsInNtYWxsTGF5b3V0V2hlbiIsInRodW1ibmFpbHMiLCJwcm9wcyIsIm1lZGlhIiwiJGxvYWQiLCIkcHJvcHMiLCJsb2FkIiwiJGNhbkxvYWQiLCIkdmlld1R5cGUiLCIkc3RyZWFtVHlwZSIsIiRzbWFsbFdoZW4iLCJwbGF5ZXIiLCJzdGF0ZSIsInVzZXJQcmVmZXJzQW5ub3VuY2VtZW50cyIsInVzZXJQcmVmZXJzS2V5Ym9hcmRBbmltYXRpb25zIiwiaXNNYXRjaCIsImlzU21hbGxMYXlvdXQiLCJpc0ZvcmNlZExheW91dCIsImlzTG9hZExheW91dCIsImNhblJlbmRlciIsImNvbG9yU2NoZW1lQ2xhc3MiLCJsYXlvdXRFbCIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJzZXQiLCJQcm92aWRlciIsInZhbHVlIiwic3RyZWFtVHlwZSIsInVzZURlZmF1bHRBdWRpb0xheW91dFNsb3RzIiwidXNlRGVmYXVsdFZpZGVvTGF5b3V0U2xvdHMiLCJzbG90IiwibmFtZSIsImRlZmF1bHRWYWx1ZSIsInNsb3QyIiwiY2FwaXRhbGl6ZWROYW1lIiwiRnJhZ21lbnQiLCJEZWZhdWx0QW5ub3VuY2VyIiwiJHVzZXJQcmVmZXJzQW5ub3VuY2VtZW50cyIsIkRlZmF1bHRUb29sdGlwIiwiY29udGVudCIsInBsYWNlbWVudCIsInNob3dEZWxheSIsImFzQ2hpbGQiLCJEZWZhdWx0UGxheUJ1dHRvbiIsInRvb2x0aXAiLCJJY29ucyIsInBsYXlUZXh0IiwicGF1c2VUZXh0IiwiJHBhdXNlZCIsIiRlbmRlZCIsIlJlcGxheSIsIlBsYXkiLCJQYXVzZSIsIkRlZmF1bHRNdXRlQnV0dG9uIiwibXV0ZVRleHQiLCJ1bm11dGVUZXh0IiwiJG11dGVkIiwiJHZvbHVtZSIsIk11dGUiLCJWb2x1bWVMb3ciLCJWb2x1bWVIaWdoIiwiRGVmYXVsdENhcHRpb25CdXR0b24iLCJjYXB0aW9uc1RleHQiLCJvblRleHQiLCJvZmZUZXh0IiwiJHRyYWNrIiwiaXNPbiIsIk9uIiwiT2ZmIiwiRGVmYXVsdFBJUEJ1dHRvbiIsInBpcFRleHQiLCJlbnRlclRleHQiLCJleGl0VGV4dCIsIiRwaXAiLCJFeGl0IiwiRW50ZXIiLCJEZWZhdWx0RnVsbHNjcmVlbkJ1dHRvbiIsImZ1bGxzY3JlZW5UZXh0IiwiJGZ1bGxzY3JlZW4iLCJEZWZhdWx0U2Vla0J1dHRvbiIsImJhY2t3YXJkIiwic2Vla0ZvcndhcmRUZXh0Iiwic2Vla0JhY2t3YXJkVGV4dCIsInNlY29uZHMiLCJsYWJlbCIsIkZvcndhcmQiLCJCYWNrd2FyZCIsIkRlZmF1bHRBaXJQbGF5QnV0dG9uIiwiYWlyUGxheVRleHQiLCIkc3RhdGUiLCJzdGF0ZVRleHQiLCJJY29uIiwiQ29ubmVjdGluZyIsIkNvbm5lY3RlZCIsIkRlZmF1bHQiLCJEZWZhdWx0R29vZ2xlQ2FzdEJ1dHRvbiIsImdvb2dsZUNhc3RUZXh0IiwiRGVmYXVsdExpdmVCdXR0b24iLCIkbGl2ZSIsImxpdmVUZXh0IiwiRGVmYXVsdERvd25sb2FkQnV0dG9uIiwiJHNyYyIsIiR0aXRsZSIsImZpbGUiLCJ0aXRsZSIsInNyYyIsImRvd25sb2FkVGV4dCIsInJvbGUiLCJocmVmIiwidXJsIiwidGFyZ2V0IiwiRG93bmxvYWRCdXR0b24iLCJEZWZhdWx0Q2FwdGlvbnMiLCJleGFtcGxlVGV4dCIsIkRlZmF1bHRDb250cm9sc1NwYWNlciIsInVzZVBhcmVudERpYWxvZ0VsIiwiJGxheW91dEVsIiwidXNlTWVtbyIsImNsb3Nlc3QiLCJEZWZhdWx0Q2hhcHRlcnNNZW51IiwicG9ydGFsQ2xhc3MiLCJjaGFwdGVyc1RleHQiLCJvcHRpb25zIiwiZGlzYWJsZWQiLCJsZW5ndGgiLCIkb2Zmc2V0IiwiJFJlbW90aW9uVGh1bWJuYWlsIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwidXNlU3RhdGUiLCJkaWFsb2dFbCIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJvZmZzZXQiLCJzZWxlY3RlZFZhbHVlIiwibWFwIiwiY3VlIiwic3RhcnRUaW1lVGV4dCIsImR1cmF0aW9uVGV4dCIsInNlbGVjdCIsInNldFByb2dyZXNzVmFyIiwia2V5Iiwib25TZWxlY3QiLCJ0aW1lIiwic3RhcnRUaW1lIiwiZnJhbWUiLCJmcHMiLCJNZW51IiwiY29udGFpbmVyIiwiRk9OVF9DT0xPUl9PUFRJT04iLCJGT05UX0ZBTUlMWV9PUFRJT04iLCJ2YWx1ZXMiLCJDYXN1YWwiLCJDdXJzaXZlIiwiRk9OVF9TSVpFX09QVElPTiIsInVwSWNvbiIsImRvd25JY29uIiwiRk9OVF9PUEFDSVRZX09QVElPTiIsIkZPTlRfVEVYVF9TSEFET1dfT1BUSU9OIiwiRk9OVF9ERUZBVUxUUyIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsInRleHRDb2xvciIsInRleHRPcGFjaXR5IiwidGV4dFNoYWRvdyIsInRleHRCZyIsInRleHRCZ09wYWNpdHkiLCJkaXNwbGF5QmciLCJkaXNwbGF5QmdPcGFjaXR5IiwiRk9OVF9TSUdOQUxTIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsInByZXYiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwib25Gb250UmVzZXQiLCJoZXhUb1JnYiIsImhleCIsInN0eWxlIiwiT3B0aW9uIiwiY29sb3IiLCJtYXRjaCIsInJlcGxhY2UiLCJpc1dhdGNoaW5nVmFycyIsInBsYXllcnMiLCJTZXQiLCJ1cGRhdGVGb250Q3NzVmFycyIsImFkZCIsImRlbGV0ZSIsIiR2YWx1ZSIsInZhck5hbWUiLCJzdG9yYWdlS2V5IiwiaXNEZWZhdWx0VmFyVmFsdWUiLCJ2YXJWYWx1ZSIsImdldENzc1ZhclZhbHVlIiwicGxheWVyMiIsImVsIiwic2V0UHJvcGVydHkiLCJyZW1vdmVJdGVtIiwic2V0SXRlbSIsImZvbnRWYXJpYW50IiwiZ2V0Rm9udEZhbWlseUNTU1ZhclZhbHVlIiwicGVyY2VudFRvUmF0aW8iLCJnZXRUZXh0U2hhZG93Q3NzVmFyVmFsdWUiLCJwYXJzZUludCIsInRvU3RyaW5nIiwiRGVmYXVsdE1lbnVTZWN0aW9uIiwiaWQiLCJ1c2VJZCIsIkRlZmF1bHRNZW51QnV0dG9uIiwiaGludCIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJEZWZhdWx0TWVudUl0ZW0iLCJEZWZhdWx0TWVudVJhZGlvR3JvdXAiLCJvbkNoYW5nZSIsIm9wdGlvbiIsIlJhZGlvQ2hlY2siLCJjcmVhdGVSYWRpb09wdGlvbnMiLCJlbnRyaWVzIiwiZW50cnkiLCJ0b0xvd2VyQ2FzZSIsIkRlZmF1bHRNZW51U2xpZGVySXRlbSIsIlVwSWNvbiIsIkRvd25JY29uIiwiaXNNaW4iLCJpc01heCIsImhhc1RpdGxlIiwiRGVmYXVsdFNsaWRlclBhcnRzIiwiRGVmYXVsdFNsaWRlclN0ZXBzIiwiU3RyaW5nIiwiRGVmYXVsdEZvbnRNZW51IiwiJGhhc0NhcHRpb25zIiwiZm9udFNlY3Rpb25MYWJlbCIsInRleHRTZWN0aW9uTGFiZWwiLCJ0ZXh0QmdTZWN0aW9uTGFiZWwiLCJkaXNwbGF5QmdTZWN0aW9uTGFiZWwiLCJEZWZhdWx0Rm9udEZhbWlseU1lbnUiLCJEZWZhdWx0Rm9udFNpemVTbGlkZXIiLCJEZWZhdWx0VGV4dENvbG9ySW5wdXQiLCJEZWZhdWx0VGV4dFNoYWRvd01lbnUiLCJEZWZhdWx0VGV4dE9wYWNpdHlTbGlkZXIiLCJEZWZhdWx0VGV4dEJnSW5wdXQiLCJEZWZhdWx0VGV4dEJnT3BhY2l0eVNsaWRlciIsIkRlZmF1bHREaXNwbGF5QmdJbnB1dCIsIkRlZmF1bHREaXNwbGF5QmdPcGFjaXR5U2xpZGVyIiwiRGVmYXVsdFJlc2V0TWVudUl0ZW0iLCJEZWZhdWx0Rm9udFNldHRpbmciLCJGb250U2l6ZVVwIiwiRm9udFNpemVEb3duIiwiT3BhY2l0eVVwIiwiT3BhY2l0eURvd24iLCIkY3VycmVudFZhbHVlIiwidHJhbnNsYXRlZExhYmVsIiwibm90aWZ5IiwidXNlQ2FsbGJhY2siLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJuZXdWYWx1ZSIsIm9uQ29sb3JDaGFuZ2UyIiwiZXZlbnQiLCJvblNsaWRlclZhbHVlQ2hhbmdlMiIsImtleVN0ZXAiLCJvblZhbHVlQ2hhbmdlIiwib25EcmFnVmFsdWVDaGFuZ2UiLCJEZWZhdWx0Rm9udFJhZGlvR3JvdXAiLCJyYWRpb09wdGlvbnMiLCJsYWJlbDIiLCJmaW5kIiwicmFkaW8iLCJyZXNldFRleHQiLCJvbkNsaWNrIiwiRGVmYXVsdE1lbnVDaGVja2JveCIsImNoZWNrZWQiLCJkZWZhdWx0Q2hlY2tlZCIsImlzQ2hlY2tlZCIsInNldElzQ2hlY2tlZCIsImlzQWN0aXZlIiwic2V0SXNBY3RpdmUiLCJ1c2VFZmZlY3QiLCJzYXZlZFZhbHVlIiwiY2hlY2tlZDIiLCJvblByZXNzIiwiYnV0dG9uIiwidG9nZ2xlZENoZWNrIiwibmF0aXZlRXZlbnQiLCJvbkFjdGl2ZSIsIm9uS2V5RG93biIsInRhYkluZGV4Iiwib25Qb2ludGVyVXAiLCJvblBvaW50ZXJEb3duIiwiRGVmYXVsdEFjY2Vzc2liaWxpdHlNZW51IiwiQWNjZXNzaWJpbGl0eSIsIkRlZmF1bHRBbm5vdW5jZW1lbnRzTWVudUNoZWNrYm94IiwiRGVmYXVsdEtleWJvYXJkQW5pbWF0aW9uc01lbnVDaGVja2JveCIsIkRlZmF1bHRBdWRpb01lbnUiLCIkY2FuU2V0QXVkaW9HYWluIiwiJGF1ZGlvVHJhY2tzIiwiaGFzR2FpblNsaWRlciIsIiRkaXNhYmxlZCIsIkF1ZGlvIiwiRGVmYXVsdEF1ZGlvVHJhY2tzTWVudSIsIkRlZmF1bHRBdWRpb0Jvb3N0TWVudVNlY3Rpb24iLCIkYXVkaW9HYWluIiwiTWF0aCIsInJvdW5kIiwidXNlR2Fpbk1pbiIsInVzZUdhaW5NYXgiLCJBdWRpb0Jvb3N0VXAiLCJBdWRpb0Jvb3N0RG93biIsIkRlZmF1bHRBdWRpb0dhaW5TbGlkZXIiLCJ1c2VHYWluU3RlcCIsImRlZmF1bHRUZXh0IiwiRGVmYXVsdENhcHRpb25NZW51Iiwib2ZmIiwic2VsZWN0ZWRUcmFjayIsIkRlZmF1bHRQbGF5YmFja01lbnUiLCJQbGF5YmFjayIsIkRlZmF1bHRMb29wTWVudUNoZWNrYm94IiwiRGVmYXVsdFNwZWVkTWVudVNlY3Rpb24iLCJEZWZhdWx0UXVhbGl0eU1lbnVTZWN0aW9uIiwicmVtb3RlIiwidHJpZ2dlciIsInVzZXJQcmVmZXJzTG9vcENoYW5nZSIsIkRlZmF1bHRBdXRvUXVhbGl0eU1lbnVDaGVja2JveCIsInF1YWxpdGllcyIsIiRhdXRvUXVhbGl0eSIsInJlcXVlc3RBdXRvUXVhbGl0eSIsImNoYW5nZVF1YWxpdHkiLCJzZWxlY3RlZEluZGV4IiwiJGNhblNldFF1YWxpdHkiLCIkcXVhbGl0aWVzIiwiJHF1YWxpdHkiLCJhdXRvVGV4dCIsInNvcnRlZFF1YWxpdGllcyIsImhlaWdodCIsImJpdHJhdGUiLCJiaXRyYXRlVGV4dCIsInRvRml4ZWQiLCJhdCIsIlF1YWxpdHlVcCIsIlF1YWxpdHlEb3duIiwiRGVmYXVsdFF1YWxpdHlTbGlkZXIiLCIkcGxheWJhY2tSYXRlIiwiJGNhblNldFBsYXliYWNrUmF0ZSIsIm5vcm1hbFRleHQiLCJ1c2VTcGVlZE1pbiIsInVzZVNwZWVkTWF4IiwiU3BlZWRVcCIsIlNwZWVkRG93biIsIkRlZmF1bHRTcGVlZFNsaWRlciIsInJhdGVzIiwidXNlU3BlZWRTdGVwIiwiRGVmYXVsdFNldHRpbmdzTWVudSIsInNldHRpbmdzVGV4dCIsIlNldHRpbmdzIiwiRGVmYXVsdFZvbHVtZVBvcHVwIiwib3JpZW50YXRpb24iLCIkcG9pbnRlciIsIiRjYW5TZXRWb2x1bWUiLCJyb290RWwiLCJzZXRSb290RWwiLCJpc1Jvb3RBY3RpdmUiLCJtdXRlQnV0dG9uIiwiRGVmYXVsdFZvbHVtZVNsaWRlciIsIm5vQ2xhbXAiLCJEZWZhdWx0VGltZVNsaWRlciIsImluc3RhbmNlIiwic2V0SW5zdGFuY2UiLCJ3aWR0aCIsInNldFdpZHRoIiwiJFJlbW90aW9uU2xpZGVyVGh1bWJuYWlsIiwib25SZXNpemUiLCJjbGllbnRXaWR0aCIsIm5vU3dpcGVHZXN0dXJlIiwiY3VlcyIsIkRlZmF1bHRUaW1lR3JvdXAiLCIkZHVyYXRpb24iLCJEZWZhdWx0VGltZUluZm8iLCJEZWZhdWx0VGltZUludmVydCIsInRvZ2dsZSIsInJlbWFpbmRlciIsIk1lZGlhTGF5b3V0JDEiLCJBdWRpb0xheW91dCIsIkRlZmF1bHRBdWRpb0xheW91dCIsInNjcnViYmluZyIsInNldFNjcnViYmluZyIsIm9uU3RhcnRTY3J1YmJpbmciLCJoYXNUaW1lU2xpZGVyIiwiSFRNTEVsZW1lbnQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJvblN0b3BTY3J1YmJpbmciLCJ3aW5kb3ciLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwib25Qb2ludGVyRG93bkNhcHR1cmUiLCJEZWZhdWx0QXVkaW9UaXRsZSIsIkRlZmF1bHRBdWRpb01lbnVzIiwiaXNUZXh0T3ZlcmZsb3dpbmciLCJzZXRJc1RleHRPdmVyZmxvd2luZyIsImlzQ29udGludWVkIiwic3RhcnRlZCIsImN1cnJlbnRUaW1lIiwiZW5kZWQiLCJjaGFwdGVyVGl0bGUiLCIkaXNDb250aW51ZWQiLCIkY2hhcHRlclRpdGxlIiwiaXNUcmFuc2l0aW9uQWN0aXZlIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsImZvY3VzIiwiaXNPdmVyZmxvd2luZyIsIkF1ZGlvVGl0bGUiLCJEZWZhdWx0S2V5Ym9hcmREaXNwbGF5IiwidmlzaWJsZSIsInNldFZpc2libGUiLCJzZXRJY29uIiwiY291bnQiLCJzZXRDb3VudCIsIiRsYXN0S2V5Ym9hcmRBY3Rpb24iLCJuIiwiYWN0aW9uRGF0YUF0dHIiLCJhY3Rpb24iLCIkJHRleHQiLCJnZXRUZXh0IiwiJHRleHQiLCJJY29uMiIsImdldEljb24iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZGl2IiwibGFzdEtleWJvYXJkQWN0aW9uIiwiYXVkaW9HYWluIiwibXV0ZWQiLCJnZXRWb2x1bWVUZXh0Iiwidm9sdW1lIiwiZ2FpbiIsInBhdXNlZCIsIlZvbHVtZVVwIiwiVm9sdW1lRG93biIsImZ1bGxzY3JlZW4iLCJFbnRlckZ1bGxzY3JlZW4iLCJFeGl0RnVsbHNjcmVlbiIsInBpY3R1cmVJblBpY3R1cmUiLCJFbnRlclBpUCIsIkV4aXRQaVAiLCJoYXNDYXB0aW9ucyIsInRleHRUcmFjayIsIkNhcHRpb25zT24iLCJDYXB0aW9uc09mZiIsIlNlZWtGb3J3YXJkIiwiU2Vla0JhY2t3YXJkIiwiRGVmYXVsdFRpdGxlIiwiJHN0YXJ0ZWQiLCIkaGFzQ2hhcHRlcnMiLCJNZWRpYUxheW91dCIsIlZpZGVvTGF5b3V0IiwiRGVmYXVsdFZpZGVvTGF5b3V0IiwiRGVmYXVsdFZpZGVvTG9hZExheW91dCIsIkRlZmF1bHRCdWZmZXJpbmdJbmRpY2F0b3IiLCJEZWZhdWx0VmlkZW9TbWFsbExheW91dCIsIkRlZmF1bHRWaWRlb0xhcmdlTGF5b3V0IiwiYmFzZVNsb3RzIiwibGFyZ2VMYXlvdXQiLCJEZWZhdWx0VmlkZW9HZXN0dXJlcyIsIkRlZmF1bHRWaWRlb0tleWJvYXJkRGlzcGxheSIsIkRlZmF1bHRWaWRlb01lbnVzIiwic21hbGxMYXlvdXQiLCJwb2ludGVyRXZlbnRzIiwiRGVmYXVsdFZpZGVvU3RhcnREdXJhdGlvbiIsInNpZGUiLCIkdXNlclByZWZlcnNLZXlib2FyZEFuaW1hdGlvbnMiLCJLZXlib2FyZERpc3BsYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CSU4W5Sm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Cjt-9Nqm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Cjt-9Nqm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioProvider: () => (/* binding */ AudioProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ AudioProvider auto */ \n\n\n\nclass AudioProvider extends _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__.HTMLMediaProvider {\n    constructor(audio, ctx){\n        super(audio, ctx);\n        this.$$PROVIDER_TYPE = \"AUDIO\";\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.scoped)(()=>{\n            this.airPlay = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_1__.HTMLAirPlayAdapter(this.media, ctx);\n        }, this.scope);\n    }\n    get type() {\n        return \"audio\";\n    }\n    setup() {\n        super.setup();\n        if (this.type === \"audio\") this._ctx.delegate._notify(\"provider-setup\", this);\n    }\n    /**\n   * The native HTML `<audio>` element.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement}\n   */ get audio() {\n        return this._media;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQ2p0LTlOcW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OzttRUFFZ0Q7QUFDK0I7QUFDaEU7QUFDVztBQUUxQixNQUFNRyxzQkFBc0JGLG9FQUFpQkE7SUFDM0NHLFlBQVlDLEtBQUssRUFBRUMsR0FBRyxDQUFFO1FBQ3RCLEtBQUssQ0FBQ0QsT0FBT0M7UUFDYixJQUFJLENBQUNDLGVBQWUsR0FBRztRQUN2QlAsNERBQU1BLENBQUM7WUFDTCxJQUFJLENBQUNRLE9BQU8sR0FBRyxJQUFJTixxRUFBa0JBLENBQUMsSUFBSSxDQUFDTyxLQUFLLEVBQUVIO1FBQ3BELEdBQUcsSUFBSSxDQUFDSSxLQUFLO0lBQ2Y7SUFDQSxJQUFJQyxPQUFPO1FBQ1QsT0FBTztJQUNUO0lBQ0FDLFFBQVE7UUFDTixLQUFLLENBQUNBO1FBQ04sSUFBSSxJQUFJLENBQUNELElBQUksS0FBSyxTQUFTLElBQUksQ0FBQ0UsSUFBSSxDQUFDQyxRQUFRLENBQUNDLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSTtJQUM5RTtJQUNBOzs7O0dBSUMsR0FDRCxJQUFJVixRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUNXLE1BQU07SUFDcEI7QUFDRjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Rqcm9wcm9qZXRvMS8uL25vZGVfbW9kdWxlcy9Admlkc3RhY2svcmVhY3QvZGV2L2NodW5rcy92aWRzdGFjay1DanQtOU5xbS5qcz83NjhjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5cbmltcG9ydCB7IHNjb3BlZCB9IGZyb20gJy4vdmlkc3RhY2stM2hzMy04aV8uanMnO1xuaW1wb3J0IHsgSFRNTE1lZGlhUHJvdmlkZXIsIEhUTUxBaXJQbGF5QWRhcHRlciB9IGZyb20gJy4vdmlkc3RhY2stTm05T0p5N3guanMnO1xuaW1wb3J0ICdyZWFjdCc7XG5pbXBvcnQgJ0BmbG9hdGluZy11aS9kb20nO1xuXG5jbGFzcyBBdWRpb1Byb3ZpZGVyIGV4dGVuZHMgSFRNTE1lZGlhUHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcihhdWRpbywgY3R4KSB7XG4gICAgc3VwZXIoYXVkaW8sIGN0eCk7XG4gICAgdGhpcy4kJFBST1ZJREVSX1RZUEUgPSBcIkFVRElPXCI7XG4gICAgc2NvcGVkKCgpID0+IHtcbiAgICAgIHRoaXMuYWlyUGxheSA9IG5ldyBIVE1MQWlyUGxheUFkYXB0ZXIodGhpcy5tZWRpYSwgY3R4KTtcbiAgICB9LCB0aGlzLnNjb3BlKTtcbiAgfVxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJhdWRpb1wiO1xuICB9XG4gIHNldHVwKCkge1xuICAgIHN1cGVyLnNldHVwKCk7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gXCJhdWRpb1wiKSB0aGlzLl9jdHguZGVsZWdhdGUuX25vdGlmeShcInByb3ZpZGVyLXNldHVwXCIsIHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgbmF0aXZlIEhUTUwgYDxhdWRpbz5gIGVsZW1lbnQuXG4gICAqXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQXVkaW9FbGVtZW50fVxuICAgKi9cbiAgZ2V0IGF1ZGlvKCkge1xuICAgIHJldHVybiB0aGlzLl9tZWRpYTtcbiAgfVxufVxuXG5leHBvcnQgeyBBdWRpb1Byb3ZpZGVyIH07XG4iXSwibmFtZXMiOlsic2NvcGVkIiwiSFRNTE1lZGlhUHJvdmlkZXIiLCJIVE1MQWlyUGxheUFkYXB0ZXIiLCJBdWRpb1Byb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJhdWRpbyIsImN0eCIsIiQkUFJPVklERVJfVFlQRSIsImFpclBsYXkiLCJtZWRpYSIsInNjb3BlIiwidHlwZSIsInNldHVwIiwiX2N0eCIsImRlbGVnYXRlIiwiX25vdGlmeSIsIl9tZWRpYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Cjt-9Nqm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D3MJ0cre.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-D3MJ0cre.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMediaRemote: () => (/* binding */ useMediaRemote),\n/* harmony export */   usePlaybackRateOptions: () => (/* binding */ usePlaybackRateOptions),\n/* harmony export */   useVideoQualityOptions: () => (/* binding */ useVideoQualityOptions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-BOkHoBGu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BOkHoBGu.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* __next_internal_client_entry_do_not_use__ useMediaRemote,usePlaybackRateOptions,useVideoQualityOptions auto */ \n\n\n\nfunction useMediaRemote(target) {\n    const media = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_1__.useMediaContext)(), remote = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    if (!remote.current) {\n        remote.current = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.MediaRemoteControl();\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const ref = target && \"current\" in target ? target.current : target, isPlayerRef = ref instanceof _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.MediaPlayerInstance, player = isPlayerRef ? ref : media?.player;\n        remote.current.setPlayer(player ?? null);\n        remote.current.setTarget(ref ?? null);\n    }, [\n        media,\n        target && \"current\" in target ? target.current : target\n    ]);\n    return remote.current;\n}\nfunction useVideoQualityOptions({ auto = true, sort = \"descending\" } = {}) {\n    const media = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_1__.useMediaContext)(), { qualities, quality, autoQuality, canSetQuality } = media.$state, $qualities = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.useSignal)(qualities);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.useSignal)(quality);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.useSignal)(autoQuality);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.useSignal)(canSetQuality);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const sortedQualities = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.sortVideoQualities)($qualities, sort === \"descending\"), options = sortedQualities.map((_quality)=>{\n            return {\n                quality: _quality,\n                label: _quality.height + \"p\",\n                value: getQualityValue(_quality),\n                bitrateText: _quality.bitrate && _quality.bitrate > 0 ? `${(_quality.bitrate / 1e6).toFixed(2)} Mbps` : null,\n                get selected () {\n                    return _quality === quality();\n                },\n                get autoSelected () {\n                    return autoQuality();\n                },\n                select (trigger) {\n                    const index = qualities().indexOf(_quality);\n                    if (index >= 0) media.remote.changeQuality(index, trigger);\n                }\n            };\n        });\n        if (auto) {\n            options.unshift({\n                quality: null,\n                label: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.isString)(auto) ? auto : \"Auto\",\n                value: \"auto\",\n                bitrateText: null,\n                get selected () {\n                    return autoQuality();\n                },\n                get autoSelected () {\n                    return autoQuality();\n                },\n                select (trigger) {\n                    media.remote.requestAutoQuality(trigger);\n                }\n            });\n        }\n        Object.defineProperty(options, \"disabled\", {\n            get () {\n                return !canSetQuality() || $qualities.length <= 1;\n            }\n        });\n        Object.defineProperty(options, \"selectedQuality\", {\n            get () {\n                return quality();\n            }\n        });\n        Object.defineProperty(options, \"selectedValue\", {\n            get () {\n                const $quality = quality();\n                return !autoQuality() && $quality ? getQualityValue($quality) : \"auto\";\n            }\n        });\n        return options;\n    }, [\n        $qualities,\n        sort\n    ]);\n}\nfunction getQualityValue(quality) {\n    return quality.height + \"_\" + quality.bitrate;\n}\nfunction usePlaybackRateOptions({ rates = _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PLAYBACK_RATES, normalLabel = \"Normal\" } = {}) {\n    const media = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_1__.useMediaContext)(), { playbackRate, canSetPlaybackRate } = media.$state;\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.useSignal)(playbackRate);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_3__.useSignal)(canSetPlaybackRate);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const options = rates.map((opt)=>{\n            const label = typeof opt === \"number\" ? opt === 1 && normalLabel ? normalLabel : opt + \"x\" : opt.label, rate = typeof opt === \"number\" ? opt : opt.rate;\n            return {\n                label,\n                value: rate.toString(),\n                rate,\n                get selected () {\n                    return playbackRate() === rate;\n                },\n                select (trigger) {\n                    media.remote.changePlaybackRate(rate, trigger);\n                }\n            };\n        });\n        Object.defineProperty(options, \"disabled\", {\n            get () {\n                return !canSetPlaybackRate() || !options.length;\n            }\n        });\n        Object.defineProperty(options, \"selectedValue\", {\n            get () {\n                return playbackRate().toString();\n            }\n        });\n        return options;\n    }, [\n        rates\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D3MJ0cre.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DcX2JzmB.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-DcX2JzmB.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Captions: () => (/* binding */ Captions),\n/* harmony export */   ChapterTitle: () => (/* binding */ ChapterTitle),\n/* harmony export */   Content: () => (/* binding */ Content),\n/* harmony export */   GoogleCastButton: () => (/* binding */ GoogleCastButton),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   MediaAnnouncer: () => (/* binding */ MediaAnnouncer),\n/* harmony export */   Root: () => (/* binding */ Root$4),\n/* harmony export */   Root$1: () => (/* binding */ Root$2),\n/* harmony export */   Root$2: () => (/* binding */ Root$3),\n/* harmony export */   Root$3: () => (/* binding */ Root$1),\n/* harmony export */   Root$4: () => (/* binding */ Root$5),\n/* harmony export */   Root$5: () => (/* binding */ Root),\n/* harmony export */   Title: () => (/* binding */ Title),\n/* harmony export */   Track: () => (/* binding */ Track),\n/* harmony export */   TrackFill: () => (/* binding */ TrackFill),\n/* harmony export */   Trigger: () => (/* binding */ Trigger),\n/* harmony export */   audioGainSlider: () => (/* binding */ audioGainSlider),\n/* harmony export */   controls: () => (/* binding */ controls),\n/* harmony export */   createComputed: () => (/* binding */ createComputed),\n/* harmony export */   createEffect: () => (/* binding */ createEffect),\n/* harmony export */   createSignal: () => (/* binding */ createSignal),\n/* harmony export */   qualitySlider: () => (/* binding */ qualitySlider),\n/* harmony export */   speedSlider: () => (/* binding */ speedSlider),\n/* harmony export */   spinner: () => (/* binding */ spinner),\n/* harmony export */   tooltip: () => (/* binding */ tooltip),\n/* harmony export */   useActiveTextCues: () => (/* binding */ useActiveTextCues),\n/* harmony export */   useActiveTextTrack: () => (/* binding */ useActiveTextTrack),\n/* harmony export */   useChapterOptions: () => (/* binding */ useChapterOptions),\n/* harmony export */   useChapterTitle: () => (/* binding */ useChapterTitle),\n/* harmony export */   useScoped: () => (/* binding */ useScoped),\n/* harmony export */   useTextCues: () => (/* binding */ useTextCues)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-BOkHoBGu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BOkHoBGu.js\");\n/* __next_internal_client_entry_do_not_use__ Captions,ChapterTitle,Content,GoogleCastButton,Group,MediaAnnouncer,Root,Root$1,Root$2,Root$3,Root$4,Root$5,Title,Track,TrackFill,Trigger,audioGainSlider,controls,createComputed,createEffect,createSignal,qualitySlider,speedSlider,spinner,tooltip,useActiveTextCues,useActiveTextTrack,useChapterOptions,useChapterTitle,useScoped,useTextCues auto */ \n\n\n\nconst MediaAnnouncerBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.MediaAnnouncerInstance, {\n    events: [\n        \"onChange\"\n    ]\n});\nconst MediaAnnouncer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ style, children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaAnnouncerBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2,\n            style: {\n                display: \"contents\",\n                ...style\n            },\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nMediaAnnouncer.displayName = \"MediaAnnouncer\";\nconst ControlsBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ControlsInstance);\nconst Root$5 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlsBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nRoot$5.displayName = \"Controls\";\nconst ControlsGroupBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ControlsGroupInstance);\nconst Group = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlsGroupBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nGroup.displayName = \"ControlsGroup\";\nvar controls = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Group: Group,\n    Root: Root$5\n});\nconst TooltipBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TooltipInstance);\nfunction Root$4({ children, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TooltipBridge, {\n        ...props\n    }, children);\n}\nRoot$4.displayName = \"Tooltip\";\nconst TriggerBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TooltipTriggerInstance);\nconst Trigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TriggerBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nTrigger.displayName = \"TooltipTrigger\";\nconst ContentBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TooltipContentInstance);\nconst Content = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContentBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nContent.displayName = \"TooltipContent\";\nvar tooltip = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Content: Content,\n    Root: Root$4,\n    Trigger: Trigger\n});\nconst GoogleCastButtonBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.GoogleCastButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst GoogleCastButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GoogleCastButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nGoogleCastButton.displayName = \"GoogleCastButton\";\nconst QualitySliderBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.QualitySliderInstance, {\n    events: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$3 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualitySliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$3.displayName = \"QualitySlider\";\nvar qualitySlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Preview,\n    Root: Root$3,\n    Steps: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Steps,\n    Thumb: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Thumb,\n    Track: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Track,\n    TrackFill: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill,\n    Value: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Value\n});\nconst AudioGainSliderBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.AudioGainSliderInstance, {\n    events: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioGainSliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$2.displayName = \"AudioGainSlider\";\nvar audioGainSlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Preview,\n    Root: Root$2,\n    Steps: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Steps,\n    Thumb: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Thumb,\n    Track: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Track,\n    TrackFill: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill,\n    Value: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Value\n});\nconst SpeedSliderBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.SpeedSliderInstance, {\n    events: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpeedSliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$1.displayName = \"SpeedSlider\";\nvar speedSlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Preview,\n    Root: Root$1,\n    Steps: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Steps,\n    Thumb: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Thumb,\n    Track: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Track,\n    TrackFill: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill,\n    Value: _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.Value\n});\nconst Title = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const $title = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.useMediaState)(\"title\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.span, {\n        ...props,\n        ref: forwardRef\n    }, $title, children);\n});\nTitle.displayName = \"Title\";\nfunction useActiveTextCues(track) {\n    const [activeCues, setActiveCues] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!track) {\n            setActiveCues([]);\n            return;\n        }\n        function onCuesChange() {\n            setActiveCues(track.activeCues);\n        }\n        onCuesChange();\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"cue-change\", onCuesChange);\n    }, [\n        track\n    ]);\n    return activeCues;\n}\nfunction useActiveTextTrack(kind) {\n    const media = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), [track, setTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.watchActiveTextTrack)(media.textTracks, kind, setTrack);\n    }, [\n        kind\n    ]);\n    return track;\n}\nfunction useChapterTitle() {\n    const $track = useActiveTextTrack(\"chapters\"), $cues = useActiveTextCues($track);\n    return $cues[0]?.text || \"\";\n}\nconst ChapterTitle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ defaultText = \"\", children, ...props }, forwardRef)=>{\n    const $chapterTitle = useChapterTitle();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.span, {\n        ...props,\n        ref: forwardRef\n    }, $chapterTitle || defaultText, children);\n});\nChapterTitle.displayName = \"ChapterTitle\";\nconst CaptionsBridge = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.CaptionsInstance);\nconst Captions = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CaptionsBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2\n        }, children));\n});\nCaptions.displayName = \"Captions\";\nconst Root = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ size = 96, children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: size,\n        height: size,\n        fill: \"none\",\n        viewBox: \"0 0 120 120\",\n        \"aria-hidden\": \"true\",\n        \"data-part\": \"root\",\n        ...props,\n        ref: forwardRef\n    }, children);\n});\nconst Track = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ width = 8, children, ...props }, ref)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: \"60\",\n        cy: \"60\",\n        r: \"54\",\n        stroke: \"currentColor\",\n        strokeWidth: width,\n        \"data-part\": \"track\",\n        ...props,\n        ref\n    }, children));\nconst TrackFill = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ width = 8, fillPercent = 50, children, ...props }, ref)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: \"60\",\n        cy: \"60\",\n        r: \"54\",\n        stroke: \"currentColor\",\n        pathLength: \"100\",\n        strokeWidth: width,\n        strokeDasharray: 100,\n        strokeDashoffset: 100 - fillPercent,\n        \"data-part\": \"track-fill\",\n        ...props,\n        ref\n    }, children));\nvar spinner = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Root: Root,\n    Track: Track,\n    TrackFill: TrackFill\n});\nfunction createSignal(initialValue, deps = []) {\n    const scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(initialValue), scope), [\n        scope,\n        ...deps\n    ]);\n}\nfunction createComputed(compute, deps = []) {\n    const scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.computed)(compute), scope), [\n        scope,\n        ...deps\n    ]);\n}\nfunction createEffect(compute, deps = []) {\n    const scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(compute), scope), [\n        scope,\n        ...deps\n    ]);\n}\nfunction useScoped(compute) {\n    const scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(compute, scope), [\n        scope\n    ]);\n}\nfunction useTextCues(track) {\n    const [cues, setCues] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!track) return;\n        function onCuesChange(track2) {\n            setCues([\n                ...track2.cues\n            ]);\n        }\n        const disposal = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createDisposalBin)();\n        disposal.add((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"add-cue\", ()=>onCuesChange(track)), (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"remove-cue\", ()=>onCuesChange(track)));\n        onCuesChange(track);\n        return ()=>{\n            disposal.empty();\n            setCues([]);\n        };\n    }, [\n        track\n    ]);\n    return cues;\n}\nfunction useChapterOptions() {\n    const media = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), track = useActiveTextTrack(\"chapters\"), cues = useTextCues(track), $startTime = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(media.$state.clipStartTime), $endTime = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(media.$state.clipEndTime) || Infinity;\n    useActiveTextCues(track);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const options = track ? cues.filter((cue)=>cue.startTime <= $endTime && cue.endTime >= $startTime).map((cue, i)=>{\n            let currentRef = null, stopProgressEffect;\n            return {\n                cue,\n                label: cue.text,\n                value: i.toString(),\n                startTimeText: (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.formatTime)(Math.max(0, cue.startTime - $startTime)),\n                durationText: (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.formatSpokenTime)(Math.min($endTime, cue.endTime) - Math.max($startTime, cue.startTime)),\n                get selected () {\n                    return cue === track.activeCues[0];\n                },\n                setProgressVar (ref) {\n                    if (!ref || cue !== track.activeCues[0]) {\n                        stopProgressEffect?.();\n                        stopProgressEffect = void 0;\n                        ref?.style.setProperty(\"--progress\", \"0%\");\n                        currentRef = null;\n                        return;\n                    }\n                    if (currentRef === ref) return;\n                    currentRef = ref;\n                    stopProgressEffect?.();\n                    stopProgressEffect = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n                        const { realCurrentTime } = media.$state, time = realCurrentTime(), cueStartTime = Math.max($startTime, cue.startTime), duration = Math.min($endTime, cue.endTime) - cueStartTime, progress = Math.max(0, time - cueStartTime) / duration * 100;\n                        ref.style.setProperty(\"--progress\", progress.toFixed(3) + \"%\");\n                    });\n                },\n                select (trigger) {\n                    media.remote.seek(cue.startTime - $startTime, trigger);\n                }\n            };\n        }) : [];\n        Object.defineProperty(options, \"selectedValue\", {\n            get () {\n                const index = options.findIndex((option)=>option.selected);\n                return (index >= 0 ? index : 0).toString();\n            }\n        });\n        return options;\n    }, [\n        cues,\n        $startTime,\n        $endTime\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DcX2JzmB.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dci4Ce5n.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Dci4Ce5n.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HLSProvider: () => (/* binding */ HLSProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ HLSProvider auto */ \n\n\n\nconst toDOMEventType = (type)=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.camelToKebabCase)(type);\nclass HLSController {\n    constructor(_video, _ctx){\n        this._video = _video;\n        this._ctx = _ctx;\n        this._instance = null;\n        this._stopLiveSync = null;\n        this._config = {};\n        this._callbacks = /* @__PURE__ */ new Set();\n    }\n    get instance() {\n        return this._instance;\n    }\n    setup(ctor) {\n        const { streamType } = this._ctx.$state;\n        const isLive = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(streamType).includes(\"live\"), isLiveLowLatency = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(streamType).includes(\"ll-\");\n        this._instance = new ctor({\n            lowLatencyMode: isLiveLowLatency,\n            backBufferLength: isLiveLowLatency ? 4 : isLive ? 8 : void 0,\n            renderTextTracksNatively: false,\n            ...this._config\n        });\n        const dispatcher = this._dispatchHLSEvent.bind(this);\n        for (const event of Object.values(ctor.Events))this._instance.on(event, dispatcher);\n        this._instance.on(ctor.Events.ERROR, this._onError.bind(this));\n        for (const callback of this._callbacks)callback(this._instance);\n        this._ctx.player.dispatch(\"hls-instance\", {\n            detail: this._instance\n        });\n        this._instance.attachMedia(this._video);\n        this._instance.on(ctor.Events.AUDIO_TRACK_SWITCHED, this._onAudioSwitch.bind(this));\n        this._instance.on(ctor.Events.LEVEL_SWITCHED, this._onLevelSwitched.bind(this));\n        this._instance.on(ctor.Events.LEVEL_LOADED, this._onLevelLoaded.bind(this));\n        this._instance.on(ctor.Events.NON_NATIVE_TEXT_TRACKS_FOUND, this._onTracksFound.bind(this));\n        this._instance.on(ctor.Events.CUES_PARSED, this._onCuesParsed.bind(this));\n        this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.QualitySymbol._enableAuto] = this._enableAutoQuality.bind(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.qualities, \"change\", this._onUserQualityChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.audioTracks, \"change\", this._onUserAudioChange.bind(this));\n        this._stopLiveSync = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._liveSync.bind(this));\n    }\n    _createDOMEvent(type, data) {\n        return new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(toDOMEventType(type), {\n            detail: data\n        });\n    }\n    _liveSync() {\n        if (!this._ctx.$state.live()) return;\n        const raf = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.RAFLoop(this._liveSyncPosition.bind(this));\n        raf._start();\n        return raf._stop.bind(raf);\n    }\n    _liveSyncPosition() {\n        this._ctx.$state.liveSyncPosition.set(this._instance?.liveSyncPosition ?? Infinity);\n    }\n    _dispatchHLSEvent(type, data) {\n        this._ctx.player?.dispatch(this._createDOMEvent(type, data));\n    }\n    _onTracksFound(eventType, data) {\n        const event = this._createDOMEvent(eventType, data);\n        let currentTrack = -1;\n        for(let i = 0; i < data.tracks.length; i++){\n            const nonNativeTrack = data.tracks[i], init = nonNativeTrack.subtitleTrack ?? nonNativeTrack.closedCaptions, track = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TextTrack({\n                id: `hls-${nonNativeTrack.kind}-${i}`,\n                src: init?.url,\n                label: nonNativeTrack.label,\n                language: init?.lang,\n                kind: nonNativeTrack.kind,\n                default: nonNativeTrack.default\n            });\n            track[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TextTrackSymbol._readyState] = 2;\n            track[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TextTrackSymbol._onModeChange] = ()=>{\n                if (track.mode === \"showing\") {\n                    this._instance.subtitleTrack = i;\n                    currentTrack = i;\n                } else if (currentTrack === i) {\n                    this._instance.subtitleTrack = -1;\n                    currentTrack = -1;\n                }\n            };\n            this._ctx.textTracks.add(track, event);\n        }\n    }\n    _onCuesParsed(eventType, data) {\n        const index = this._instance?.subtitleTrack, track = this._ctx.textTracks.getById(`hls-${data.type}-${index}`);\n        if (!track) return;\n        const event = this._createDOMEvent(eventType, data);\n        for (const cue of data.cues){\n            cue.positionAlign = \"auto\";\n            track.addCue(cue, event);\n        }\n    }\n    _onAudioSwitch(eventType, data) {\n        const track = this._ctx.audioTracks[data.id];\n        if (track) {\n            const trigger = this._createDOMEvent(eventType, data);\n            this._ctx.audioTracks[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._select](track, true, trigger);\n        }\n    }\n    _onLevelSwitched(eventType, data) {\n        const quality = this._ctx.qualities[data.level];\n        if (quality) {\n            const trigger = this._createDOMEvent(eventType, data);\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._select](quality, true, trigger);\n        }\n    }\n    _onLevelLoaded(eventType, data) {\n        if (this._ctx.$state.canPlay()) return;\n        const { type, live, totalduration: duration, targetduration } = data.details, trigger = this._createDOMEvent(eventType, data);\n        this._ctx.delegate._notify(\"stream-type-change\", live ? type === \"EVENT\" && Number.isFinite(duration) && targetduration >= 10 ? \"live:dvr\" : \"live\" : \"on-demand\", trigger);\n        this._ctx.delegate._notify(\"duration-change\", duration, trigger);\n        const media = this._instance.media;\n        if (this._instance.currentLevel === -1) {\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.QualitySymbol._setAuto](true, trigger);\n        }\n        for (const remoteTrack of this._instance.audioTracks){\n            const localTrack = {\n                id: remoteTrack.id.toString(),\n                label: remoteTrack.name,\n                language: remoteTrack.lang || \"\",\n                kind: \"main\"\n            };\n            this._ctx.audioTracks[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._add](localTrack, trigger);\n        }\n        for (const level of this._instance.levels){\n            const videoQuality = {\n                id: level.id?.toString() ?? level.height + \"p\",\n                width: level.width,\n                height: level.height,\n                codec: level.codecSet,\n                bitrate: level.bitrate\n            };\n            this._ctx.qualities[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._add](videoQuality, trigger);\n        }\n        media.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"canplay\", {\n            trigger\n        }));\n    }\n    _onError(eventType, data) {\n        {\n            this._ctx.logger?.errorGroup(`[vidstack] HLS error \\`${eventType}\\``).labelledLog(\"Media Element\", this._instance?.media).labelledLog(\"HLS Instance\", this._instance).labelledLog(\"Event Type\", eventType).labelledLog(\"Data\", data).labelledLog(\"Src\", (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source)).labelledLog(\"Media Store\", {\n                ...this._ctx.$state\n            }).dispatch();\n        }\n        if (data.fatal) {\n            switch(data.type){\n                case \"mediaError\":\n                    this._instance?.recoverMediaError();\n                    break;\n                default:\n                    this._onFatalError(data.error);\n                    break;\n            }\n        }\n    }\n    _onFatalError(error) {\n        this._ctx.delegate._notify(\"error\", {\n            message: error.message,\n            code: 1,\n            error\n        });\n    }\n    _enableAutoQuality() {\n        if (this._instance) this._instance.currentLevel = -1;\n    }\n    _onUserQualityChange() {\n        const { qualities } = this._ctx;\n        if (!this._instance || qualities.auto) return;\n        this._instance[qualities.switch + \"Level\"] = qualities.selectedIndex;\n        if (_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.IS_CHROME) {\n            this._video.currentTime = this._video.currentTime;\n        }\n    }\n    _onUserAudioChange() {\n        const { audioTracks } = this._ctx;\n        if (this._instance && this._instance.audioTrack !== audioTracks.selectedIndex) {\n            this._instance.audioTrack = audioTracks.selectedIndex;\n        }\n    }\n    _loadSource(src) {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) return;\n        this._instance?.loadSource(src.src);\n    }\n    _destroy() {\n        this._instance?.destroy();\n        this._instance = null;\n        this._stopLiveSync?.();\n        this._stopLiveSync = null;\n        this._ctx?.logger?.info(\"\\uD83C\\uDFD7️ Destroyed HLS instance\");\n    }\n}\nclass HLSLibLoader {\n    constructor(_lib, _ctx, _callback){\n        this._lib = _lib;\n        this._ctx = _ctx;\n        this._callback = _callback;\n        this._startLoading();\n    }\n    async _startLoading() {\n        this._ctx.logger?.info(\"\\uD83C\\uDFD7️ Loading HLS Library\");\n        const callbacks = {\n            onLoadStart: this._onLoadStart.bind(this),\n            onLoaded: this._onLoaded.bind(this),\n            onLoadError: this._onLoadError.bind(this)\n        };\n        let ctor = await loadHLSScript(this._lib, callbacks);\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(ctor) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this._lib)) ctor = await importHLS(this._lib, callbacks);\n        if (!ctor) return null;\n        if (!ctor.isSupported()) {\n            const message = \"[vidstack] `hls.js` is not supported in this environment\";\n            this._ctx.logger?.error(message);\n            this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-unsupported\"));\n            this._ctx.delegate._notify(\"error\", {\n                message,\n                code: 4\n            });\n            return null;\n        }\n        return ctor;\n    }\n    _onLoadStart() {\n        {\n            this._ctx.logger?.infoGroup(\"Starting to load `hls.js`\").labelledLog(\"URL\", this._lib).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-load-start\"));\n    }\n    _onLoaded(ctor) {\n        {\n            this._ctx.logger?.infoGroup(\"Loaded `hls.js`\").labelledLog(\"Library\", this._lib).labelledLog(\"Constructor\", ctor).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-loaded\", {\n            detail: ctor\n        }));\n        this._callback(ctor);\n    }\n    _onLoadError(e) {\n        const error = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.coerceToError)(e);\n        {\n            this._ctx.logger?.errorGroup(\"[vidstack] Failed to load `hls.js`\").labelledLog(\"Library\", this._lib).labelledLog(\"Error\", e).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-load-error\", {\n            detail: error\n        }));\n        this._ctx.delegate._notify(\"error\", {\n            message: error.message,\n            code: 4,\n            error\n        });\n    }\n}\nasync function importHLS(loader, callbacks = {}) {\n    if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(loader)) return void 0;\n    callbacks.onLoadStart?.();\n    if (loader.prototype && loader.prototype !== Function) {\n        callbacks.onLoaded?.(loader);\n        return loader;\n    }\n    try {\n        const ctor = (await loader())?.default;\n        if (ctor && !!ctor.isSupported) {\n            callbacks.onLoaded?.(ctor);\n        } else {\n            throw Error( true ? \"[vidstack] failed importing `hls.js`. Dynamic import returned invalid constructor.\" : 0);\n        }\n        return ctor;\n    } catch (err) {\n        callbacks.onLoadError?.(err);\n    }\n    return void 0;\n}\nasync function loadHLSScript(src, callbacks = {}) {\n    if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) return void 0;\n    callbacks.onLoadStart?.();\n    try {\n        await (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.loadScript)(src);\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(window.Hls)) {\n            throw Error( true ? \"[vidstack] failed loading `hls.js`. Could not find a valid `Hls` constructor on window\" : 0);\n        }\n        const ctor = window.Hls;\n        callbacks.onLoaded?.(ctor);\n        return ctor;\n    } catch (err) {\n        callbacks.onLoadError?.(err);\n    }\n    return void 0;\n}\nconst JS_DELIVR_CDN = \"https://cdn.jsdelivr.net\";\nclass HLSProvider extends _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.VideoProvider {\n    constructor(){\n        super(...arguments);\n        this.$$PROVIDER_TYPE = \"HLS\";\n        this._ctor = null;\n        this._controller = new HLSController(this.video, this._ctx);\n        this._library = `${JS_DELIVR_CDN}/npm/hls.js@^1.5.0/dist/hls${\".js\"}`;\n    }\n    /**\n   * The `hls.js` constructor.\n   */ get ctor() {\n        return this._ctor;\n    }\n    /**\n   * The current `hls.js` instance.\n   */ get instance() {\n        return this._controller.instance;\n    }\n    get type() {\n        return \"hls\";\n    }\n    get canLiveSync() {\n        return true;\n    }\n    /**\n   * The `hls.js` configuration object.\n   *\n   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning}\n   */ get config() {\n        return this._controller._config;\n    }\n    set config(config) {\n        this._controller._config = config;\n    }\n    /**\n   * The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.\n   *\n   * @defaultValue `https://cdn.jsdelivr.net/npm/hls.js@^1.0.0/dist/hls.min.js`\n   */ get library() {\n        return this._library;\n    }\n    set library(library) {\n        this._library = library;\n    }\n    preconnect() {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this._library)) return;\n        (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.preconnect)(this._library);\n    }\n    setup() {\n        super.setup();\n        new HLSLibLoader(this._library, this._ctx, (ctor)=>{\n            this._ctor = ctor;\n            this._controller.setup(ctor);\n            this._ctx.delegate._notify(\"provider-setup\", this);\n            const src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source);\n            if (src) this.loadSource(src);\n        });\n    }\n    async loadSource(src, preload) {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) {\n            this._removeSource();\n            return;\n        }\n        this._media.preload = preload || \"\";\n        this._appendSource(src, \"application/x-mpegurl\");\n        this._controller._loadSource(src);\n        this._currentSrc = src;\n    }\n    /**\n   * The given callback is invoked when a new `hls.js` instance is created and right before it's\n   * attached to media.\n   */ onInstance(callback) {\n        const instance = this._controller.instance;\n        if (instance) callback(instance);\n        this._controller._callbacks.add(callback);\n        return ()=>this._controller._callbacks.delete(callback);\n    }\n    destroy() {\n        this._controller._destroy();\n    }\n}\n/**\n * Whether `hls.js` is supported in this environment.\n */ HLSProvider.supported = (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.isHLSSupported)();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stRGNpNENlNW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztpRUFFa0k7QUFDdUQ7QUFDMUs7QUFDVztBQUUxQixNQUFNbUIsaUJBQWlCLENBQUNDLE9BQVNmLHNFQUFnQkEsQ0FBQ2U7QUFDbEQsTUFBTUM7SUFDSkMsWUFBWUMsTUFBTSxFQUFFQyxJQUFJLENBQUU7UUFDeEIsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxTQUFTLEdBQUc7UUFDakIsSUFBSSxDQUFDQyxhQUFhLEdBQUc7UUFDckIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUNDLFVBQVUsR0FBRyxhQUFhLEdBQUcsSUFBSUM7SUFDeEM7SUFDQSxJQUFJQyxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUNMLFNBQVM7SUFDdkI7SUFDQU0sTUFBTUMsSUFBSSxFQUFFO1FBQ1YsTUFBTSxFQUFFQyxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUNULElBQUksQ0FBQ1UsTUFBTTtRQUN2QyxNQUFNQyxTQUFTbkMsMERBQUlBLENBQUNpQyxZQUFZRyxRQUFRLENBQUMsU0FBU0MsbUJBQW1CckMsMERBQUlBLENBQUNpQyxZQUFZRyxRQUFRLENBQUM7UUFDL0YsSUFBSSxDQUFDWCxTQUFTLEdBQUcsSUFBSU8sS0FBSztZQUN4Qk0sZ0JBQWdCRDtZQUNoQkUsa0JBQWtCRixtQkFBbUIsSUFBSUYsU0FBUyxJQUFJLEtBQUs7WUFDM0RLLDBCQUEwQjtZQUMxQixHQUFHLElBQUksQ0FBQ2IsT0FBTztRQUNqQjtRQUNBLE1BQU1jLGFBQWEsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7UUFDbkQsS0FBSyxNQUFNQyxTQUFTQyxPQUFPQyxNQUFNLENBQUNkLEtBQUtlLE1BQU0sRUFBRyxJQUFJLENBQUN0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d2VicGFjazovL3Rqcm9wcm9qZXRvMS8uL25vZGVfbW9kdWxlcy9Admlkc3RhY2svcmVhY3QvZGV2L2NodW5rcy92aWRzdGFjay1EY2k0Q2U1bi5qcz9iMmQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5cbmltcG9ydCB7IHBlZWssIGxpc3RlbkV2ZW50LCBlZmZlY3QsIERPTUV2ZW50LCBpc1N0cmluZywgY2FtZWxUb0tlYmFiQ2FzZSwgaXNVbmRlZmluZWQsIGlzRnVuY3Rpb24gfSBmcm9tICcuL3ZpZHN0YWNrLTNoczMtOGlfLmpzJztcbmltcG9ydCB7IFF1YWxpdHlTeW1ib2wsIFJBRkxvb3AsIFRleHRUcmFjaywgVGV4dFRyYWNrU3ltYm9sLCBMaXN0U3ltYm9sLCBJU19DSFJPTUUsIGNvZXJjZVRvRXJyb3IsIGxvYWRTY3JpcHQsIFZpZGVvUHJvdmlkZXIsIHByZWNvbm5lY3QsIGlzSExTU3VwcG9ydGVkIH0gZnJvbSAnLi92aWRzdGFjay1ObTlPSnk3eC5qcyc7XG5pbXBvcnQgJ3JlYWN0JztcbmltcG9ydCAnQGZsb2F0aW5nLXVpL2RvbSc7XG5cbmNvbnN0IHRvRE9NRXZlbnRUeXBlID0gKHR5cGUpID0+IGNhbWVsVG9LZWJhYkNhc2UodHlwZSk7XG5jbGFzcyBITFNDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoX3ZpZGVvLCBfY3R4KSB7XG4gICAgdGhpcy5fdmlkZW8gPSBfdmlkZW87XG4gICAgdGhpcy5fY3R4ID0gX2N0eDtcbiAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgdGhpcy5fc3RvcExpdmVTeW5jID0gbnVsbDtcbiAgICB0aGlzLl9jb25maWcgPSB7fTtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICB9XG4gIGdldCBpbnN0YW5jZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gIH1cbiAgc2V0dXAoY3Rvcikge1xuICAgIGNvbnN0IHsgc3RyZWFtVHlwZSB9ID0gdGhpcy5fY3R4LiRzdGF0ZTtcbiAgICBjb25zdCBpc0xpdmUgPSBwZWVrKHN0cmVhbVR5cGUpLmluY2x1ZGVzKFwibGl2ZVwiKSwgaXNMaXZlTG93TGF0ZW5jeSA9IHBlZWsoc3RyZWFtVHlwZSkuaW5jbHVkZXMoXCJsbC1cIik7XG4gICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgY3Rvcih7XG4gICAgICBsb3dMYXRlbmN5TW9kZTogaXNMaXZlTG93TGF0ZW5jeSxcbiAgICAgIGJhY2tCdWZmZXJMZW5ndGg6IGlzTGl2ZUxvd0xhdGVuY3kgPyA0IDogaXNMaXZlID8gOCA6IHZvaWQgMCxcbiAgICAgIHJlbmRlclRleHRUcmFja3NOYXRpdmVseTogZmFsc2UsXG4gICAgICAuLi50aGlzLl9jb25maWdcbiAgICB9KTtcbiAgICBjb25zdCBkaXNwYXRjaGVyID0gdGhpcy5fZGlzcGF0Y2hITFNFdmVudC5iaW5kKHRoaXMpO1xuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgT2JqZWN0LnZhbHVlcyhjdG9yLkV2ZW50cykpIHRoaXMuX2luc3RhbmNlLm9uKGV2ZW50LCBkaXNwYXRjaGVyKTtcbiAgICB0aGlzLl9pbnN0YW5jZS5vbihjdG9yLkV2ZW50cy5FUlJPUiwgdGhpcy5fb25FcnJvci5iaW5kKHRoaXMpKTtcbiAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIHRoaXMuX2NhbGxiYWNrcykgY2FsbGJhY2sodGhpcy5faW5zdGFuY2UpO1xuICAgIHRoaXMuX2N0eC5wbGF5ZXIuZGlzcGF0Y2goXCJobHMtaW5zdGFuY2VcIiwge1xuICAgICAgZGV0YWlsOiB0aGlzLl9pbnN0YW5jZVxuICAgIH0pO1xuICAgIHRoaXMuX2luc3RhbmNlLmF0dGFjaE1lZGlhKHRoaXMuX3ZpZGVvKTtcbiAgICB0aGlzLl9pbnN0YW5jZS5vbihjdG9yLkV2ZW50cy5BVURJT19UUkFDS19TV0lUQ0hFRCwgdGhpcy5fb25BdWRpb1N3aXRjaC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLl9pbnN0YW5jZS5vbihjdG9yLkV2ZW50cy5MRVZFTF9TV0lUQ0hFRCwgdGhpcy5fb25MZXZlbFN3aXRjaGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuX2luc3RhbmNlLm9uKGN0b3IuRXZlbnRzLkxFVkVMX0xPQURFRCwgdGhpcy5fb25MZXZlbExvYWRlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLl9pbnN0YW5jZS5vbihjdG9yLkV2ZW50cy5OT05fTkFUSVZFX1RFWFRfVFJBQ0tTX0ZPVU5ELCB0aGlzLl9vblRyYWNrc0ZvdW5kLmJpbmQodGhpcykpO1xuICAgIHRoaXMuX2luc3RhbmNlLm9uKGN0b3IuRXZlbnRzLkNVRVNfUEFSU0VELCB0aGlzLl9vbkN1ZXNQYXJzZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5fY3R4LnF1YWxpdGllc1tRdWFsaXR5U3ltYm9sLl9lbmFibGVBdXRvXSA9IHRoaXMuX2VuYWJsZUF1dG9RdWFsaXR5LmJpbmQodGhpcyk7XG4gICAgbGlzdGVuRXZlbnQodGhpcy5fY3R4LnF1YWxpdGllcywgXCJjaGFuZ2VcIiwgdGhpcy5fb25Vc2VyUXVhbGl0eUNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICBsaXN0ZW5FdmVudCh0aGlzLl9jdHguYXVkaW9UcmFja3MsIFwiY2hhbmdlXCIsIHRoaXMuX29uVXNlckF1ZGlvQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuX3N0b3BMaXZlU3luYyA9IGVmZmVjdCh0aGlzLl9saXZlU3luYy5iaW5kKHRoaXMpKTtcbiAgfVxuICBfY3JlYXRlRE9NRXZlbnQodHlwZSwgZGF0YSkge1xuICAgIHJldHVybiBuZXcgRE9NRXZlbnQodG9ET01FdmVudFR5cGUodHlwZSksIHsgZGV0YWlsOiBkYXRhIH0pO1xuICB9XG4gIF9saXZlU3luYygpIHtcbiAgICBpZiAoIXRoaXMuX2N0eC4kc3RhdGUubGl2ZSgpKSByZXR1cm47XG4gICAgY29uc3QgcmFmID0gbmV3IFJBRkxvb3AodGhpcy5fbGl2ZVN5bmNQb3NpdGlvbi5iaW5kKHRoaXMpKTtcbiAgICByYWYuX3N0YXJ0KCk7XG4gICAgcmV0dXJuIHJhZi5fc3RvcC5iaW5kKHJhZik7XG4gIH1cbiAgX2xpdmVTeW5jUG9zaXRpb24oKSB7XG4gICAgdGhpcy5fY3R4LiRzdGF0ZS5saXZlU3luY1Bvc2l0aW9uLnNldCh0aGlzLl9pbnN0YW5jZT8ubGl2ZVN5bmNQb3NpdGlvbiA/PyBJbmZpbml0eSk7XG4gIH1cbiAgX2Rpc3BhdGNoSExTRXZlbnQodHlwZSwgZGF0YSkge1xuICAgIHRoaXMuX2N0eC5wbGF5ZXI/LmRpc3BhdGNoKHRoaXMuX2NyZWF0ZURPTUV2ZW50KHR5cGUsIGRhdGEpKTtcbiAgfVxuICBfb25UcmFja3NGb3VuZChldmVudFR5cGUsIGRhdGEpIHtcbiAgICBjb25zdCBldmVudCA9IHRoaXMuX2NyZWF0ZURPTUV2ZW50KGV2ZW50VHlwZSwgZGF0YSk7XG4gICAgbGV0IGN1cnJlbnRUcmFjayA9IC0xO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS50cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5vbk5hdGl2ZVRyYWNrID0gZGF0YS50cmFja3NbaV0sIGluaXQgPSBub25OYXRpdmVUcmFjay5zdWJ0aXRsZVRyYWNrID8/IG5vbk5hdGl2ZVRyYWNrLmNsb3NlZENhcHRpb25zLCB0cmFjayA9IG5ldyBUZXh0VHJhY2soe1xuICAgICAgICBpZDogYGhscy0ke25vbk5hdGl2ZVRyYWNrLmtpbmR9LSR7aX1gLFxuICAgICAgICBzcmM6IGluaXQ/LnVybCxcbiAgICAgICAgbGFiZWw6IG5vbk5hdGl2ZVRyYWNrLmxhYmVsLFxuICAgICAgICBsYW5ndWFnZTogaW5pdD8ubGFuZyxcbiAgICAgICAga2luZDogbm9uTmF0aXZlVHJhY2sua2luZCxcbiAgICAgICAgZGVmYXVsdDogbm9uTmF0aXZlVHJhY2suZGVmYXVsdFxuICAgICAgfSk7XG4gICAgICB0cmFja1tUZXh0VHJhY2tTeW1ib2wuX3JlYWR5U3RhdGVdID0gMjtcbiAgICAgIHRyYWNrW1RleHRUcmFja1N5bWJvbC5fb25Nb2RlQ2hhbmdlXSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRyYWNrLm1vZGUgPT09IFwic2hvd2luZ1wiKSB7XG4gICAgICAgICAgdGhpcy5faW5zdGFuY2Uuc3VidGl0bGVUcmFjayA9IGk7XG4gICAgICAgICAgY3VycmVudFRyYWNrID0gaTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VHJhY2sgPT09IGkpIHtcbiAgICAgICAgICB0aGlzLl9pbnN0YW5jZS5zdWJ0aXRsZVRyYWNrID0gLTE7XG4gICAgICAgICAgY3VycmVudFRyYWNrID0gLTE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLl9jdHgudGV4dFRyYWNrcy5hZGQodHJhY2ssIGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgX29uQ3Vlc1BhcnNlZChldmVudFR5cGUsIGRhdGEpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2luc3RhbmNlPy5zdWJ0aXRsZVRyYWNrLCB0cmFjayA9IHRoaXMuX2N0eC50ZXh0VHJhY2tzLmdldEJ5SWQoYGhscy0ke2RhdGEudHlwZX0tJHtpbmRleH1gKTtcbiAgICBpZiAoIXRyYWNrKSByZXR1cm47XG4gICAgY29uc3QgZXZlbnQgPSB0aGlzLl9jcmVhdGVET01FdmVudChldmVudFR5cGUsIGRhdGEpO1xuICAgIGZvciAoY29uc3QgY3VlIG9mIGRhdGEuY3Vlcykge1xuICAgICAgY3VlLnBvc2l0aW9uQWxpZ24gPSBcImF1dG9cIjtcbiAgICAgIHRyYWNrLmFkZEN1ZShjdWUsIGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgX29uQXVkaW9Td2l0Y2goZXZlbnRUeXBlLCBkYXRhKSB7XG4gICAgY29uc3QgdHJhY2sgPSB0aGlzLl9jdHguYXVkaW9UcmFja3NbZGF0YS5pZF07XG4gICAgaWYgKHRyYWNrKSB7XG4gICAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy5fY3JlYXRlRE9NRXZlbnQoZXZlbnRUeXBlLCBkYXRhKTtcbiAgICAgIHRoaXMuX2N0eC5hdWRpb1RyYWNrc1tMaXN0U3ltYm9sLl9zZWxlY3RdKHRyYWNrLCB0cnVlLCB0cmlnZ2VyKTtcbiAgICB9XG4gIH1cbiAgX29uTGV2ZWxTd2l0Y2hlZChldmVudFR5cGUsIGRhdGEpIHtcbiAgICBjb25zdCBxdWFsaXR5ID0gdGhpcy5fY3R4LnF1YWxpdGllc1tkYXRhLmxldmVsXTtcbiAgICBpZiAocXVhbGl0eSkge1xuICAgICAgY29uc3QgdHJpZ2dlciA9IHRoaXMuX2NyZWF0ZURPTUV2ZW50KGV2ZW50VHlwZSwgZGF0YSk7XG4gICAgICB0aGlzLl9jdHgucXVhbGl0aWVzW0xpc3RTeW1ib2wuX3NlbGVjdF0ocXVhbGl0eSwgdHJ1ZSwgdHJpZ2dlcik7XG4gICAgfVxuICB9XG4gIF9vbkxldmVsTG9hZGVkKGV2ZW50VHlwZSwgZGF0YSkge1xuICAgIGlmICh0aGlzLl9jdHguJHN0YXRlLmNhblBsYXkoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHsgdHlwZSwgbGl2ZSwgdG90YWxkdXJhdGlvbjogZHVyYXRpb24sIHRhcmdldGR1cmF0aW9uIH0gPSBkYXRhLmRldGFpbHMsIHRyaWdnZXIgPSB0aGlzLl9jcmVhdGVET01FdmVudChldmVudFR5cGUsIGRhdGEpO1xuICAgIHRoaXMuX2N0eC5kZWxlZ2F0ZS5fbm90aWZ5KFxuICAgICAgXCJzdHJlYW0tdHlwZS1jaGFuZ2VcIixcbiAgICAgIGxpdmUgPyB0eXBlID09PSBcIkVWRU5UXCIgJiYgTnVtYmVyLmlzRmluaXRlKGR1cmF0aW9uKSAmJiB0YXJnZXRkdXJhdGlvbiA+PSAxMCA/IFwibGl2ZTpkdnJcIiA6IFwibGl2ZVwiIDogXCJvbi1kZW1hbmRcIixcbiAgICAgIHRyaWdnZXJcbiAgICApO1xuICAgIHRoaXMuX2N0eC5kZWxlZ2F0ZS5fbm90aWZ5KFwiZHVyYXRpb24tY2hhbmdlXCIsIGR1cmF0aW9uLCB0cmlnZ2VyKTtcbiAgICBjb25zdCBtZWRpYSA9IHRoaXMuX2luc3RhbmNlLm1lZGlhO1xuICAgIGlmICh0aGlzLl9pbnN0YW5jZS5jdXJyZW50TGV2ZWwgPT09IC0xKSB7XG4gICAgICB0aGlzLl9jdHgucXVhbGl0aWVzW1F1YWxpdHlTeW1ib2wuX3NldEF1dG9dKHRydWUsIHRyaWdnZXIpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHJlbW90ZVRyYWNrIG9mIHRoaXMuX2luc3RhbmNlLmF1ZGlvVHJhY2tzKSB7XG4gICAgICBjb25zdCBsb2NhbFRyYWNrID0ge1xuICAgICAgICBpZDogcmVtb3RlVHJhY2suaWQudG9TdHJpbmcoKSxcbiAgICAgICAgbGFiZWw6IHJlbW90ZVRyYWNrLm5hbWUsXG4gICAgICAgIGxhbmd1YWdlOiByZW1vdGVUcmFjay5sYW5nIHx8IFwiXCIsXG4gICAgICAgIGtpbmQ6IFwibWFpblwiXG4gICAgICB9O1xuICAgICAgdGhpcy5fY3R4LmF1ZGlvVHJhY2tzW0xpc3RTeW1ib2wuX2FkZF0obG9jYWxUcmFjaywgdHJpZ2dlcik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbGV2ZWwgb2YgdGhpcy5faW5zdGFuY2UubGV2ZWxzKSB7XG4gICAgICBjb25zdCB2aWRlb1F1YWxpdHkgPSB7XG4gICAgICAgIGlkOiBsZXZlbC5pZD8udG9TdHJpbmcoKSA/PyBsZXZlbC5oZWlnaHQgKyBcInBcIixcbiAgICAgICAgd2lkdGg6IGxldmVsLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGxldmVsLmhlaWdodCxcbiAgICAgICAgY29kZWM6IGxldmVsLmNvZGVjU2V0LFxuICAgICAgICBiaXRyYXRlOiBsZXZlbC5iaXRyYXRlXG4gICAgICB9O1xuICAgICAgdGhpcy5fY3R4LnF1YWxpdGllc1tMaXN0U3ltYm9sLl9hZGRdKHZpZGVvUXVhbGl0eSwgdHJpZ2dlcik7XG4gICAgfVxuICAgIG1lZGlhLmRpc3BhdGNoRXZlbnQobmV3IERPTUV2ZW50KFwiY2FucGxheVwiLCB7IHRyaWdnZXIgfSkpO1xuICB9XG4gIF9vbkVycm9yKGV2ZW50VHlwZSwgZGF0YSkge1xuICAgIHtcbiAgICAgIHRoaXMuX2N0eC5sb2dnZXI/LmVycm9yR3JvdXAoYFt2aWRzdGFja10gSExTIGVycm9yIFxcYCR7ZXZlbnRUeXBlfVxcYGApLmxhYmVsbGVkTG9nKFwiTWVkaWEgRWxlbWVudFwiLCB0aGlzLl9pbnN0YW5jZT8ubWVkaWEpLmxhYmVsbGVkTG9nKFwiSExTIEluc3RhbmNlXCIsIHRoaXMuX2luc3RhbmNlKS5sYWJlbGxlZExvZyhcIkV2ZW50IFR5cGVcIiwgZXZlbnRUeXBlKS5sYWJlbGxlZExvZyhcIkRhdGFcIiwgZGF0YSkubGFiZWxsZWRMb2coXCJTcmNcIiwgcGVlayh0aGlzLl9jdHguJHN0YXRlLnNvdXJjZSkpLmxhYmVsbGVkTG9nKFwiTWVkaWEgU3RvcmVcIiwgeyAuLi50aGlzLl9jdHguJHN0YXRlIH0pLmRpc3BhdGNoKCk7XG4gICAgfVxuICAgIGlmIChkYXRhLmZhdGFsKSB7XG4gICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICBjYXNlIFwibWVkaWFFcnJvclwiOlxuICAgICAgICAgIHRoaXMuX2luc3RhbmNlPy5yZWNvdmVyTWVkaWFFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMuX29uRmF0YWxFcnJvcihkYXRhLmVycm9yKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX29uRmF0YWxFcnJvcihlcnJvcikge1xuICAgIHRoaXMuX2N0eC5kZWxlZ2F0ZS5fbm90aWZ5KFwiZXJyb3JcIiwge1xuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgIGNvZGU6IDEsXG4gICAgICBlcnJvclxuICAgIH0pO1xuICB9XG4gIF9lbmFibGVBdXRvUXVhbGl0eSgpIHtcbiAgICBpZiAodGhpcy5faW5zdGFuY2UpIHRoaXMuX2luc3RhbmNlLmN1cnJlbnRMZXZlbCA9IC0xO1xuICB9XG4gIF9vblVzZXJRdWFsaXR5Q2hhbmdlKCkge1xuICAgIGNvbnN0IHsgcXVhbGl0aWVzIH0gPSB0aGlzLl9jdHg7XG4gICAgaWYgKCF0aGlzLl9pbnN0YW5jZSB8fCBxdWFsaXRpZXMuYXV0bykgcmV0dXJuO1xuICAgIHRoaXMuX2luc3RhbmNlW3F1YWxpdGllcy5zd2l0Y2ggKyBcIkxldmVsXCJdID0gcXVhbGl0aWVzLnNlbGVjdGVkSW5kZXg7XG4gICAgaWYgKElTX0NIUk9NRSkge1xuICAgICAgdGhpcy5fdmlkZW8uY3VycmVudFRpbWUgPSB0aGlzLl92aWRlby5jdXJyZW50VGltZTtcbiAgICB9XG4gIH1cbiAgX29uVXNlckF1ZGlvQ2hhbmdlKCkge1xuICAgIGNvbnN0IHsgYXVkaW9UcmFja3MgfSA9IHRoaXMuX2N0eDtcbiAgICBpZiAodGhpcy5faW5zdGFuY2UgJiYgdGhpcy5faW5zdGFuY2UuYXVkaW9UcmFjayAhPT0gYXVkaW9UcmFja3Muc2VsZWN0ZWRJbmRleCkge1xuICAgICAgdGhpcy5faW5zdGFuY2UuYXVkaW9UcmFjayA9IGF1ZGlvVHJhY2tzLnNlbGVjdGVkSW5kZXg7XG4gICAgfVxuICB9XG4gIF9sb2FkU291cmNlKHNyYykge1xuICAgIGlmICghaXNTdHJpbmcoc3JjLnNyYykpIHJldHVybjtcbiAgICB0aGlzLl9pbnN0YW5jZT8ubG9hZFNvdXJjZShzcmMuc3JjKTtcbiAgfVxuICBfZGVzdHJveSgpIHtcbiAgICB0aGlzLl9pbnN0YW5jZT8uZGVzdHJveSgpO1xuICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICB0aGlzLl9zdG9wTGl2ZVN5bmM/LigpO1xuICAgIHRoaXMuX3N0b3BMaXZlU3luYyA9IG51bGw7XG4gICAgdGhpcy5fY3R4Py5sb2dnZXI/LmluZm8oXCJcXHV7MUYzRDd9XFx1RkUwRiBEZXN0cm95ZWQgSExTIGluc3RhbmNlXCIpO1xuICB9XG59XG5cbmNsYXNzIEhMU0xpYkxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKF9saWIsIF9jdHgsIF9jYWxsYmFjaykge1xuICAgIHRoaXMuX2xpYiA9IF9saWI7XG4gICAgdGhpcy5fY3R4ID0gX2N0eDtcbiAgICB0aGlzLl9jYWxsYmFjayA9IF9jYWxsYmFjaztcbiAgICB0aGlzLl9zdGFydExvYWRpbmcoKTtcbiAgfVxuICBhc3luYyBfc3RhcnRMb2FkaW5nKCkge1xuICAgIHRoaXMuX2N0eC5sb2dnZXI/LmluZm8oXCJcXHV7MUYzRDd9XFx1RkUwRiBMb2FkaW5nIEhMUyBMaWJyYXJ5XCIpO1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IHtcbiAgICAgIG9uTG9hZFN0YXJ0OiB0aGlzLl9vbkxvYWRTdGFydC5iaW5kKHRoaXMpLFxuICAgICAgb25Mb2FkZWQ6IHRoaXMuX29uTG9hZGVkLmJpbmQodGhpcyksXG4gICAgICBvbkxvYWRFcnJvcjogdGhpcy5fb25Mb2FkRXJyb3IuYmluZCh0aGlzKVxuICAgIH07XG4gICAgbGV0IGN0b3IgPSBhd2FpdCBsb2FkSExTU2NyaXB0KHRoaXMuX2xpYiwgY2FsbGJhY2tzKTtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3RvcikgJiYgIWlzU3RyaW5nKHRoaXMuX2xpYikpIGN0b3IgPSBhd2FpdCBpbXBvcnRITFModGhpcy5fbGliLCBjYWxsYmFja3MpO1xuICAgIGlmICghY3RvcikgcmV0dXJuIG51bGw7XG4gICAgaWYgKCFjdG9yLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBcIlt2aWRzdGFja10gYGhscy5qc2AgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50XCI7XG4gICAgICB0aGlzLl9jdHgubG9nZ2VyPy5lcnJvcihtZXNzYWdlKTtcbiAgICAgIHRoaXMuX2N0eC5wbGF5ZXIuZGlzcGF0Y2gobmV3IERPTUV2ZW50KFwiaGxzLXVuc3VwcG9ydGVkXCIpKTtcbiAgICAgIHRoaXMuX2N0eC5kZWxlZ2F0ZS5fbm90aWZ5KFwiZXJyb3JcIiwgeyBtZXNzYWdlLCBjb2RlOiA0IH0pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjdG9yO1xuICB9XG4gIF9vbkxvYWRTdGFydCgpIHtcbiAgICB7XG4gICAgICB0aGlzLl9jdHgubG9nZ2VyPy5pbmZvR3JvdXAoXCJTdGFydGluZyB0byBsb2FkIGBobHMuanNgXCIpLmxhYmVsbGVkTG9nKFwiVVJMXCIsIHRoaXMuX2xpYikuZGlzcGF0Y2goKTtcbiAgICB9XG4gICAgdGhpcy5fY3R4LnBsYXllci5kaXNwYXRjaChuZXcgRE9NRXZlbnQoXCJobHMtbGliLWxvYWQtc3RhcnRcIikpO1xuICB9XG4gIF9vbkxvYWRlZChjdG9yKSB7XG4gICAge1xuICAgICAgdGhpcy5fY3R4LmxvZ2dlcj8uaW5mb0dyb3VwKFwiTG9hZGVkIGBobHMuanNgXCIpLmxhYmVsbGVkTG9nKFwiTGlicmFyeVwiLCB0aGlzLl9saWIpLmxhYmVsbGVkTG9nKFwiQ29uc3RydWN0b3JcIiwgY3RvcikuZGlzcGF0Y2goKTtcbiAgICB9XG4gICAgdGhpcy5fY3R4LnBsYXllci5kaXNwYXRjaChcbiAgICAgIG5ldyBET01FdmVudChcImhscy1saWItbG9hZGVkXCIsIHtcbiAgICAgICAgZGV0YWlsOiBjdG9yXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5fY2FsbGJhY2soY3Rvcik7XG4gIH1cbiAgX29uTG9hZEVycm9yKGUpIHtcbiAgICBjb25zdCBlcnJvciA9IGNvZXJjZVRvRXJyb3IoZSk7XG4gICAge1xuICAgICAgdGhpcy5fY3R4LmxvZ2dlcj8uZXJyb3JHcm91cChcIlt2aWRzdGFja10gRmFpbGVkIHRvIGxvYWQgYGhscy5qc2BcIikubGFiZWxsZWRMb2coXCJMaWJyYXJ5XCIsIHRoaXMuX2xpYikubGFiZWxsZWRMb2coXCJFcnJvclwiLCBlKS5kaXNwYXRjaCgpO1xuICAgIH1cbiAgICB0aGlzLl9jdHgucGxheWVyLmRpc3BhdGNoKFxuICAgICAgbmV3IERPTUV2ZW50KFwiaGxzLWxpYi1sb2FkLWVycm9yXCIsIHtcbiAgICAgICAgZGV0YWlsOiBlcnJvclxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuX2N0eC5kZWxlZ2F0ZS5fbm90aWZ5KFwiZXJyb3JcIiwge1xuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgIGNvZGU6IDQsXG4gICAgICBlcnJvclxuICAgIH0pO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiBpbXBvcnRITFMobG9hZGVyLCBjYWxsYmFja3MgPSB7fSkge1xuICBpZiAoaXNVbmRlZmluZWQobG9hZGVyKSkgcmV0dXJuIHZvaWQgMDtcbiAgY2FsbGJhY2tzLm9uTG9hZFN0YXJ0Py4oKTtcbiAgaWYgKGxvYWRlci5wcm90b3R5cGUgJiYgbG9hZGVyLnByb3RvdHlwZSAhPT0gRnVuY3Rpb24pIHtcbiAgICBjYWxsYmFja3Mub25Mb2FkZWQ/Lihsb2FkZXIpO1xuICAgIHJldHVybiBsb2FkZXI7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBjdG9yID0gKGF3YWl0IGxvYWRlcigpKT8uZGVmYXVsdDtcbiAgICBpZiAoY3RvciAmJiAhIWN0b3IuaXNTdXBwb3J0ZWQpIHtcbiAgICAgIGNhbGxiYWNrcy5vbkxvYWRlZD8uKGN0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgdHJ1ZSA/IFwiW3ZpZHN0YWNrXSBmYWlsZWQgaW1wb3J0aW5nIGBobHMuanNgLiBEeW5hbWljIGltcG9ydCByZXR1cm5lZCBpbnZhbGlkIGNvbnN0cnVjdG9yLlwiIDogXCJcIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGN0b3I7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNhbGxiYWNrcy5vbkxvYWRFcnJvcj8uKGVycik7XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRITFNTY3JpcHQoc3JjLCBjYWxsYmFja3MgPSB7fSkge1xuICBpZiAoIWlzU3RyaW5nKHNyYykpIHJldHVybiB2b2lkIDA7XG4gIGNhbGxiYWNrcy5vbkxvYWRTdGFydD8uKCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgbG9hZFNjcmlwdChzcmMpO1xuICAgIGlmICghaXNGdW5jdGlvbih3aW5kb3cuSGxzKSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIHRydWUgPyBcIlt2aWRzdGFja10gZmFpbGVkIGxvYWRpbmcgYGhscy5qc2AuIENvdWxkIG5vdCBmaW5kIGEgdmFsaWQgYEhsc2AgY29uc3RydWN0b3Igb24gd2luZG93XCIgOiBcIlwiXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjdG9yID0gd2luZG93LkhscztcbiAgICBjYWxsYmFja3Mub25Mb2FkZWQ/LihjdG9yKTtcbiAgICByZXR1cm4gY3RvcjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY2FsbGJhY2tzLm9uTG9hZEVycm9yPy4oZXJyKTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuXG5jb25zdCBKU19ERUxJVlJfQ0ROID0gXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXRcIjtcbmNsYXNzIEhMU1Byb3ZpZGVyIGV4dGVuZHMgVmlkZW9Qcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy4kJFBST1ZJREVSX1RZUEUgPSBcIkhMU1wiO1xuICAgIHRoaXMuX2N0b3IgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRyb2xsZXIgPSBuZXcgSExTQ29udHJvbGxlcih0aGlzLnZpZGVvLCB0aGlzLl9jdHgpO1xuICAgIHRoaXMuX2xpYnJhcnkgPSBgJHtKU19ERUxJVlJfQ0ROfS9ucG0vaGxzLmpzQF4xLjUuMC9kaXN0L2hscyR7XCIuanNcIiB9YDtcbiAgfVxuICAvKipcbiAgICogVGhlIGBobHMuanNgIGNvbnN0cnVjdG9yLlxuICAgKi9cbiAgZ2V0IGN0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N0b3I7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGBobHMuanNgIGluc3RhbmNlLlxuICAgKi9cbiAgZ2V0IGluc3RhbmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250cm9sbGVyLmluc3RhbmNlO1xuICB9XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcImhsc1wiO1xuICB9XG4gIGdldCBjYW5MaXZlU3luYygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogVGhlIGBobHMuanNgIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9ibG9iL21hc3Rlci9kb2NzL0FQSS5tZCNmaW5lLXR1bmluZ31cbiAgICovXG4gIGdldCBjb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xsZXIuX2NvbmZpZztcbiAgfVxuICBzZXQgY29uZmlnKGNvbmZpZykge1xuICAgIHRoaXMuX2NvbnRyb2xsZXIuX2NvbmZpZyA9IGNvbmZpZztcbiAgfVxuICAvKipcbiAgICogVGhlIGBobHMuanNgIGNvbnN0cnVjdG9yIChzdXBwb3J0cyBkeW5hbWljIGltcG9ydHMpIG9yIGEgVVJMIG9mIHdoZXJlIGl0IGNhbiBiZSBmb3VuZC5cbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSBgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAXjEuMC4wL2Rpc3QvaGxzLm1pbi5qc2BcbiAgICovXG4gIGdldCBsaWJyYXJ5KCkge1xuICAgIHJldHVybiB0aGlzLl9saWJyYXJ5O1xuICB9XG4gIHNldCBsaWJyYXJ5KGxpYnJhcnkpIHtcbiAgICB0aGlzLl9saWJyYXJ5ID0gbGlicmFyeTtcbiAgfVxuICBwcmVjb25uZWN0KCkge1xuICAgIGlmICghaXNTdHJpbmcodGhpcy5fbGlicmFyeSkpIHJldHVybjtcbiAgICBwcmVjb25uZWN0KHRoaXMuX2xpYnJhcnkpO1xuICB9XG4gIHNldHVwKCkge1xuICAgIHN1cGVyLnNldHVwKCk7XG4gICAgbmV3IEhMU0xpYkxvYWRlcih0aGlzLl9saWJyYXJ5LCB0aGlzLl9jdHgsIChjdG9yKSA9PiB7XG4gICAgICB0aGlzLl9jdG9yID0gY3RvcjtcbiAgICAgIHRoaXMuX2NvbnRyb2xsZXIuc2V0dXAoY3Rvcik7XG4gICAgICB0aGlzLl9jdHguZGVsZWdhdGUuX25vdGlmeShcInByb3ZpZGVyLXNldHVwXCIsIHRoaXMpO1xuICAgICAgY29uc3Qgc3JjID0gcGVlayh0aGlzLl9jdHguJHN0YXRlLnNvdXJjZSk7XG4gICAgICBpZiAoc3JjKSB0aGlzLmxvYWRTb3VyY2Uoc3JjKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBsb2FkU291cmNlKHNyYywgcHJlbG9hZCkge1xuICAgIGlmICghaXNTdHJpbmcoc3JjLnNyYykpIHtcbiAgICAgIHRoaXMuX3JlbW92ZVNvdXJjZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9tZWRpYS5wcmVsb2FkID0gcHJlbG9hZCB8fCBcIlwiO1xuICAgIHRoaXMuX2FwcGVuZFNvdXJjZShzcmMsIFwiYXBwbGljYXRpb24veC1tcGVndXJsXCIpO1xuICAgIHRoaXMuX2NvbnRyb2xsZXIuX2xvYWRTb3VyY2Uoc3JjKTtcbiAgICB0aGlzLl9jdXJyZW50U3JjID0gc3JjO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZ2l2ZW4gY2FsbGJhY2sgaXMgaW52b2tlZCB3aGVuIGEgbmV3IGBobHMuanNgIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIHJpZ2h0IGJlZm9yZSBpdCdzXG4gICAqIGF0dGFjaGVkIHRvIG1lZGlhLlxuICAgKi9cbiAgb25JbnN0YW5jZShjYWxsYmFjaykge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5fY29udHJvbGxlci5pbnN0YW5jZTtcbiAgICBpZiAoaW5zdGFuY2UpIGNhbGxiYWNrKGluc3RhbmNlKTtcbiAgICB0aGlzLl9jb250cm9sbGVyLl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gKCkgPT4gdGhpcy5fY29udHJvbGxlci5fY2FsbGJhY2tzLmRlbGV0ZShjYWxsYmFjayk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9jb250cm9sbGVyLl9kZXN0cm95KCk7XG4gIH1cbn1cbi8qKlxuICogV2hldGhlciBgaGxzLmpzYCBpcyBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudC5cbiAqL1xuSExTUHJvdmlkZXIuc3VwcG9ydGVkID0gaXNITFNTdXBwb3J0ZWQoKTtcblxuZXhwb3J0IHsgSExTUHJvdmlkZXIgfTtcbiJdLCJuYW1lcyI6WyJwZWVrIiwibGlzdGVuRXZlbnQiLCJlZmZlY3QiLCJET01FdmVudCIsImlzU3RyaW5nIiwiY2FtZWxUb0tlYmFiQ2FzZSIsImlzVW5kZWZpbmVkIiwiaXNGdW5jdGlvbiIsIlF1YWxpdHlTeW1ib2wiLCJSQUZMb29wIiwiVGV4dFRyYWNrIiwiVGV4dFRyYWNrU3ltYm9sIiwiTGlzdFN5bWJvbCIsIklTX0NIUk9NRSIsImNvZXJjZVRvRXJyb3IiLCJsb2FkU2NyaXB0IiwiVmlkZW9Qcm92aWRlciIsInByZWNvbm5lY3QiLCJpc0hMU1N1cHBvcnRlZCIsInRvRE9NRXZlbnRUeXBlIiwidHlwZSIsIkhMU0NvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsIl92aWRlbyIsIl9jdHgiLCJfaW5zdGFuY2UiLCJfc3RvcExpdmVTeW5jIiwiX2NvbmZpZyIsIl9jYWxsYmFja3MiLCJTZXQiLCJpbnN0YW5jZSIsInNldHVwIiwiY3RvciIsInN0cmVhbVR5cGUiLCIkc3RhdGUiLCJpc0xpdmUiLCJpbmNsdWRlcyIsImlzTGl2ZUxvd0xhdGVuY3kiLCJsb3dMYXRlbmN5TW9kZSIsImJhY2tCdWZmZXJMZW5ndGgiLCJyZW5kZXJUZXh0VHJhY2tzTmF0aXZlbHkiLCJkaXNwYXRjaGVyIiwiX2Rpc3BhdGNoSExTRXZlbnQiLCJiaW5kIiwiZXZlbnQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJFdmVudHMiLCJvbiIsIkVSUk9SIiwiX29uRXJyb3IiLCJjYWxsYmFjayIsInBsYXllciIsImRpc3BhdGNoIiwiZGV0YWlsIiwiYXR0YWNoTWVkaWEiLCJBVURJT19UUkFDS19TV0lUQ0hFRCIsIl9vbkF1ZGlvU3dpdGNoIiwiTEVWRUxfU1dJVENIRUQiLCJfb25MZXZlbFN3aXRjaGVkIiwiTEVWRUxfTE9BREVEIiwiX29uTGV2ZWxMb2FkZWQiLCJOT05fTkFUSVZFX1RFWFRfVFJBQ0tTX0ZPVU5EIiwiX29uVHJhY2tzRm91bmQiLCJDVUVTX1BBUlNFRCIsIl9vbkN1ZXNQYXJzZWQiLCJxdWFsaXRpZXMiLCJfZW5hYmxlQXV0byIsIl9lbmFibGVBdXRvUXVhbGl0eSIsIl9vblVzZXJRdWFsaXR5Q2hhbmdlIiwiYXVkaW9UcmFja3MiLCJfb25Vc2VyQXVkaW9DaGFuZ2UiLCJfbGl2ZVN5bmMiLCJfY3JlYXRlRE9NRXZlbnQiLCJkYXRhIiwibGl2ZSIsInJhZiIsIl9saXZlU3luY1Bvc2l0aW9uIiwiX3N0YXJ0IiwiX3N0b3AiLCJsaXZlU3luY1Bvc2l0aW9uIiwic2V0IiwiSW5maW5pdHkiLCJldmVudFR5cGUiLCJjdXJyZW50VHJhY2siLCJpIiwidHJhY2tzIiwibGVuZ3RoIiwibm9uTmF0aXZlVHJhY2siLCJpbml0Iiwic3VidGl0bGVUcmFjayIsImNsb3NlZENhcHRpb25zIiwidHJhY2siLCJpZCIsImtpbmQiLCJzcmMiLCJ1cmwiLCJsYWJlbCIsImxhbmd1YWdlIiwibGFuZyIsImRlZmF1bHQiLCJfcmVhZHlTdGF0ZSIsIl9vbk1vZGVDaGFuZ2UiLCJtb2RlIiwidGV4dFRyYWNrcyIsImFkZCIsImluZGV4IiwiZ2V0QnlJZCIsImN1ZSIsImN1ZXMiLCJwb3NpdGlvbkFsaWduIiwiYWRkQ3VlIiwidHJpZ2dlciIsIl9zZWxlY3QiLCJxdWFsaXR5IiwibGV2ZWwiLCJjYW5QbGF5IiwidG90YWxkdXJhdGlvbiIsImR1cmF0aW9uIiwidGFyZ2V0ZHVyYXRpb24iLCJkZXRhaWxzIiwiZGVsZWdhdGUiLCJfbm90aWZ5IiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJtZWRpYSIsImN1cnJlbnRMZXZlbCIsIl9zZXRBdXRvIiwicmVtb3RlVHJhY2siLCJsb2NhbFRyYWNrIiwidG9TdHJpbmciLCJuYW1lIiwiX2FkZCIsImxldmVscyIsInZpZGVvUXVhbGl0eSIsImhlaWdodCIsIndpZHRoIiwiY29kZWMiLCJjb2RlY1NldCIsImJpdHJhdGUiLCJkaXNwYXRjaEV2ZW50IiwibG9nZ2VyIiwiZXJyb3JHcm91cCIsImxhYmVsbGVkTG9nIiwic291cmNlIiwiZmF0YWwiLCJyZWNvdmVyTWVkaWFFcnJvciIsIl9vbkZhdGFsRXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiYXV0byIsInN3aXRjaCIsInNlbGVjdGVkSW5kZXgiLCJjdXJyZW50VGltZSIsImF1ZGlvVHJhY2siLCJfbG9hZFNvdXJjZSIsImxvYWRTb3VyY2UiLCJfZGVzdHJveSIsImRlc3Ryb3kiLCJpbmZvIiwiSExTTGliTG9hZGVyIiwiX2xpYiIsIl9jYWxsYmFjayIsIl9zdGFydExvYWRpbmciLCJjYWxsYmFja3MiLCJvbkxvYWRTdGFydCIsIl9vbkxvYWRTdGFydCIsIm9uTG9hZGVkIiwiX29uTG9hZGVkIiwib25Mb2FkRXJyb3IiLCJfb25Mb2FkRXJyb3IiLCJsb2FkSExTU2NyaXB0IiwiaW1wb3J0SExTIiwiaXNTdXBwb3J0ZWQiLCJpbmZvR3JvdXAiLCJlIiwibG9hZGVyIiwicHJvdG90eXBlIiwiRnVuY3Rpb24iLCJFcnJvciIsImVyciIsIndpbmRvdyIsIkhscyIsIkpTX0RFTElWUl9DRE4iLCJITFNQcm92aWRlciIsImFyZ3VtZW50cyIsIiQkUFJPVklERVJfVFlQRSIsIl9jdG9yIiwiX2NvbnRyb2xsZXIiLCJ2aWRlbyIsIl9saWJyYXJ5IiwiY2FuTGl2ZVN5bmMiLCJjb25maWciLCJsaWJyYXJ5IiwicHJlbG9hZCIsIl9yZW1vdmVTb3VyY2UiLCJfbWVkaWEiLCJfYXBwZW5kU291cmNlIiwiX2N1cnJlbnRTcmMiLCJvbkluc3RhbmNlIiwiZGVsZXRlIiwic3VwcG9ydGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dci4Ce5n.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARIAKeyShortcuts: () => (/* binding */ ARIAKeyShortcuts),\n/* harmony export */   AUDIO_EXTENSIONS: () => (/* binding */ AUDIO_EXTENSIONS),\n/* harmony export */   AUDIO_TYPES: () => (/* binding */ AUDIO_TYPES),\n/* harmony export */   AirPlayButtonInstance: () => (/* binding */ AirPlayButtonInstance),\n/* harmony export */   AudioGainSliderInstance: () => (/* binding */ AudioGainSliderInstance),\n/* harmony export */   AudioProviderLoader: () => (/* binding */ AudioProviderLoader),\n/* harmony export */   AudioTrackList: () => (/* binding */ AudioTrackList),\n/* harmony export */   CaptionButtonInstance: () => (/* binding */ CaptionButtonInstance),\n/* harmony export */   CaptionsInstance: () => (/* binding */ CaptionsInstance),\n/* harmony export */   ControlsGroupInstance: () => (/* binding */ ControlsGroupInstance),\n/* harmony export */   ControlsInstance: () => (/* binding */ ControlsInstance),\n/* harmony export */   DASHProviderLoader: () => (/* binding */ DASHProviderLoader),\n/* harmony export */   DASH_VIDEO_EXTENSIONS: () => (/* binding */ DASH_VIDEO_EXTENSIONS),\n/* harmony export */   DASH_VIDEO_TYPES: () => (/* binding */ DASH_VIDEO_TYPES),\n/* harmony export */   DEFAULT_AUDIO_GAINS: () => (/* binding */ DEFAULT_AUDIO_GAINS),\n/* harmony export */   DEFAULT_PLAYBACK_RATES: () => (/* binding */ DEFAULT_PLAYBACK_RATES),\n/* harmony export */   FullscreenButtonInstance: () => (/* binding */ FullscreenButtonInstance),\n/* harmony export */   FullscreenController: () => (/* binding */ FullscreenController),\n/* harmony export */   GestureInstance: () => (/* binding */ GestureInstance),\n/* harmony export */   GoogleCastButtonInstance: () => (/* binding */ GoogleCastButtonInstance),\n/* harmony export */   HLSProviderLoader: () => (/* binding */ HLSProviderLoader),\n/* harmony export */   HLS_VIDEO_EXTENSIONS: () => (/* binding */ HLS_VIDEO_EXTENSIONS),\n/* harmony export */   HLS_VIDEO_TYPES: () => (/* binding */ HLS_VIDEO_TYPES),\n/* harmony export */   HTMLAirPlayAdapter: () => (/* binding */ HTMLAirPlayAdapter),\n/* harmony export */   HTMLMediaProvider: () => (/* binding */ HTMLMediaProvider),\n/* harmony export */   IS_CHROME: () => (/* binding */ IS_CHROME),\n/* harmony export */   IS_IOS: () => (/* binding */ IS_IOS),\n/* harmony export */   IS_SERVER: () => (/* binding */ IS_SERVER),\n/* harmony export */   List: () => (/* binding */ List),\n/* harmony export */   ListSymbol: () => (/* binding */ ListSymbol),\n/* harmony export */   LiveButtonInstance: () => (/* binding */ LiveButtonInstance),\n/* harmony export */   LocalMediaStorage: () => (/* binding */ LocalMediaStorage),\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   MEDIA_KEY_SHORTCUTS: () => (/* binding */ MEDIA_KEY_SHORTCUTS),\n/* harmony export */   MediaAnnouncerInstance: () => (/* binding */ MediaAnnouncerInstance),\n/* harmony export */   MediaControls: () => (/* binding */ MediaControls),\n/* harmony export */   MediaPlayerInstance: () => (/* binding */ MediaPlayerInstance),\n/* harmony export */   MediaProviderInstance: () => (/* binding */ MediaProviderInstance),\n/* harmony export */   MediaRemoteControl: () => (/* binding */ MediaRemoteControl),\n/* harmony export */   MenuButtonInstance: () => (/* binding */ MenuButtonInstance),\n/* harmony export */   MenuInstance: () => (/* binding */ MenuInstance),\n/* harmony export */   MenuItemInstance: () => (/* binding */ MenuItemInstance),\n/* harmony export */   MenuItemsInstance: () => (/* binding */ MenuItemsInstance),\n/* harmony export */   MenuPortalInstance: () => (/* binding */ MenuPortalInstance),\n/* harmony export */   MuteButtonInstance: () => (/* binding */ MuteButtonInstance),\n/* harmony export */   PIPButtonInstance: () => (/* binding */ PIPButtonInstance),\n/* harmony export */   PlayButtonInstance: () => (/* binding */ PlayButtonInstance),\n/* harmony export */   PosterInstance: () => (/* binding */ PosterInstance),\n/* harmony export */   Primitive: () => (/* binding */ Primitive),\n/* harmony export */   QualitySliderInstance: () => (/* binding */ QualitySliderInstance),\n/* harmony export */   QualitySymbol: () => (/* binding */ QualitySymbol),\n/* harmony export */   RAFLoop: () => (/* binding */ RAFLoop),\n/* harmony export */   RadioGroupInstance: () => (/* binding */ RadioGroupInstance),\n/* harmony export */   RadioInstance: () => (/* binding */ RadioInstance),\n/* harmony export */   ScreenOrientationController: () => (/* binding */ ScreenOrientationController),\n/* harmony export */   SeekButtonInstance: () => (/* binding */ SeekButtonInstance),\n/* harmony export */   SliderChaptersInstance: () => (/* binding */ SliderChaptersInstance),\n/* harmony export */   SliderInstance: () => (/* binding */ SliderInstance),\n/* harmony export */   SliderPreviewInstance: () => (/* binding */ SliderPreviewInstance),\n/* harmony export */   SliderThumbnailInstance: () => (/* binding */ SliderThumbnailInstance),\n/* harmony export */   SliderValueInstance: () => (/* binding */ SliderValueInstance),\n/* harmony export */   SliderVideoInstance: () => (/* binding */ SliderVideoInstance),\n/* harmony export */   SpeedSliderInstance: () => (/* binding */ SpeedSliderInstance),\n/* harmony export */   TextRenderers: () => (/* binding */ TextRenderers),\n/* harmony export */   TextTrack: () => (/* binding */ TextTrack),\n/* harmony export */   TextTrackList: () => (/* binding */ TextTrackList),\n/* harmony export */   TextTrackSymbol: () => (/* binding */ TextTrackSymbol),\n/* harmony export */   ThumbnailInstance: () => (/* binding */ ThumbnailInstance),\n/* harmony export */   ThumbnailsLoader: () => (/* binding */ ThumbnailsLoader),\n/* harmony export */   TimeInstance: () => (/* binding */ TimeInstance),\n/* harmony export */   TimeRange: () => (/* binding */ TimeRange),\n/* harmony export */   TimeSliderInstance: () => (/* binding */ TimeSliderInstance),\n/* harmony export */   ToggleButtonInstance: () => (/* binding */ ToggleButtonInstance),\n/* harmony export */   TooltipContentInstance: () => (/* binding */ TooltipContentInstance),\n/* harmony export */   TooltipInstance: () => (/* binding */ TooltipInstance),\n/* harmony export */   TooltipTriggerInstance: () => (/* binding */ TooltipTriggerInstance),\n/* harmony export */   VIDEO_EXTENSIONS: () => (/* binding */ VIDEO_EXTENSIONS),\n/* harmony export */   VIDEO_TYPES: () => (/* binding */ VIDEO_TYPES),\n/* harmony export */   VideoProvider: () => (/* binding */ VideoProvider),\n/* harmony export */   VideoProviderLoader: () => (/* binding */ VideoProviderLoader),\n/* harmony export */   VideoQualityList: () => (/* binding */ VideoQualityList),\n/* harmony export */   VimeoProviderLoader: () => (/* binding */ VimeoProviderLoader),\n/* harmony export */   VolumeSliderInstance: () => (/* binding */ VolumeSliderInstance),\n/* harmony export */   YouTubeProviderLoader: () => (/* binding */ YouTubeProviderLoader),\n/* harmony export */   appendParamsToURL: () => (/* binding */ appendParamsToURL),\n/* harmony export */   canChangeVolume: () => (/* binding */ canChangeVolume),\n/* harmony export */   canFullscreen: () => (/* binding */ canFullscreen),\n/* harmony export */   canGoogleCastSrc: () => (/* binding */ canGoogleCastSrc),\n/* harmony export */   canOrientScreen: () => (/* binding */ canOrientScreen),\n/* harmony export */   canPlayHLSNatively: () => (/* binding */ canPlayHLSNatively),\n/* harmony export */   canRotateScreen: () => (/* binding */ canRotateScreen),\n/* harmony export */   canUsePictureInPicture: () => (/* binding */ canUsePictureInPicture),\n/* harmony export */   canUseVideoPresentation: () => (/* binding */ canUseVideoPresentation),\n/* harmony export */   coerceToError: () => (/* binding */ coerceToError),\n/* harmony export */   findActiveCue: () => (/* binding */ findActiveCue),\n/* harmony export */   formatSpokenTime: () => (/* binding */ formatSpokenTime),\n/* harmony export */   formatTime: () => (/* binding */ formatTime),\n/* harmony export */   getDownloadFile: () => (/* binding */ getDownloadFile),\n/* harmony export */   getTimeRangesEnd: () => (/* binding */ getTimeRangesEnd),\n/* harmony export */   getTimeRangesStart: () => (/* binding */ getTimeRangesStart),\n/* harmony export */   isAudioProvider: () => (/* binding */ isAudioProvider),\n/* harmony export */   isAudioSrc: () => (/* binding */ isAudioSrc),\n/* harmony export */   isCueActive: () => (/* binding */ isCueActive),\n/* harmony export */   isDASHProvider: () => (/* binding */ isDASHProvider),\n/* harmony export */   isDASHSrc: () => (/* binding */ isDASHSrc),\n/* harmony export */   isGoogleCastProvider: () => (/* binding */ isGoogleCastProvider),\n/* harmony export */   isHLSProvider: () => (/* binding */ isHLSProvider),\n/* harmony export */   isHLSSrc: () => (/* binding */ isHLSSrc),\n/* harmony export */   isHLSSupported: () => (/* binding */ isHLSSupported),\n/* harmony export */   isHTMLAudioElement: () => (/* binding */ isHTMLAudioElement),\n/* harmony export */   isHTMLIFrameElement: () => (/* binding */ isHTMLIFrameElement),\n/* harmony export */   isHTMLMediaElement: () => (/* binding */ isHTMLMediaElement),\n/* harmony export */   isHTMLVideoElement: () => (/* binding */ isHTMLVideoElement),\n/* harmony export */   isMediaStream: () => (/* binding */ isMediaStream),\n/* harmony export */   isRemotionProvider: () => (/* binding */ isRemotionProvider),\n/* harmony export */   isRemotionSrc: () => (/* binding */ isRemotionSrc),\n/* harmony export */   isTrackCaptionKind: () => (/* binding */ isTrackCaptionKind),\n/* harmony export */   isVideoProvider: () => (/* binding */ isVideoProvider),\n/* harmony export */   isVideoQualitySrc: () => (/* binding */ isVideoQualitySrc),\n/* harmony export */   isVideoSrc: () => (/* binding */ isVideoSrc),\n/* harmony export */   isVimeoProvider: () => (/* binding */ isVimeoProvider),\n/* harmony export */   isYouTubeProvider: () => (/* binding */ isYouTubeProvider),\n/* harmony export */   listen: () => (/* binding */ listen),\n/* harmony export */   loadScript: () => (/* binding */ loadScript),\n/* harmony export */   mediaContext: () => (/* binding */ mediaContext),\n/* harmony export */   mediaState: () => (/* binding */ mediaState),\n/* harmony export */   normalizeTimeIntervals: () => (/* binding */ normalizeTimeIntervals),\n/* harmony export */   parseJSONCaptionsFile: () => (/* binding */ parseJSONCaptionsFile),\n/* harmony export */   preconnect: () => (/* binding */ preconnect),\n/* harmony export */   sliderState: () => (/* binding */ sliderState),\n/* harmony export */   softResetMediaState: () => (/* binding */ softResetMediaState),\n/* harmony export */   sortVideoQualities: () => (/* binding */ sortVideoQualities),\n/* harmony export */   updateSliderPreviewPlacement: () => (/* binding */ updateSliderPreviewPlacement),\n/* harmony export */   updateTimeIntervals: () => (/* binding */ updateTimeIntervals),\n/* harmony export */   useMediaContext: () => (/* binding */ useMediaContext),\n/* harmony export */   useMediaState: () => (/* binding */ useMediaState),\n/* harmony export */   useMediaStore: () => (/* binding */ useMediaStore),\n/* harmony export */   usePlyrLayoutClasses: () => (/* binding */ usePlyrLayoutClasses),\n/* harmony export */   useSliderState: () => (/* binding */ useSliderState),\n/* harmony export */   useSliderStore: () => (/* binding */ useSliderStore),\n/* harmony export */   watchActiveTextTrack: () => (/* binding */ watchActiveTextTrack),\n/* harmony export */   watchCueTextChange: () => (/* binding */ watchCueTextChange)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* __next_internal_client_entry_do_not_use__ ARIAKeyShortcuts,AUDIO_EXTENSIONS,AUDIO_TYPES,AirPlayButtonInstance,AudioGainSliderInstance,AudioProviderLoader,AudioTrackList,CaptionButtonInstance,CaptionsInstance,ControlsGroupInstance,ControlsInstance,DASHProviderLoader,DASH_VIDEO_EXTENSIONS,DASH_VIDEO_TYPES,DEFAULT_AUDIO_GAINS,DEFAULT_PLAYBACK_RATES,FullscreenButtonInstance,FullscreenController,GestureInstance,GoogleCastButtonInstance,HLSProviderLoader,HLS_VIDEO_EXTENSIONS,HLS_VIDEO_TYPES,HTMLAirPlayAdapter,HTMLMediaProvider,IS_CHROME,IS_IOS,IS_SERVER,List,ListSymbol,LiveButtonInstance,LocalMediaStorage,Logger,MEDIA_KEY_SHORTCUTS,MediaAnnouncerInstance,MediaControls,MediaPlayerInstance,MediaProviderInstance,MediaRemoteControl,MenuButtonInstance,MenuInstance,MenuItemInstance,MenuItemsInstance,MenuPortalInstance,MuteButtonInstance,PIPButtonInstance,PlayButtonInstance,PosterInstance,Primitive,QualitySliderInstance,QualitySymbol,RAFLoop,RadioGroupInstance,RadioInstance,ScreenOrientationController,SeekButtonInstance,SliderChaptersInstance,SliderInstance,SliderPreviewInstance,SliderThumbnailInstance,SliderValueInstance,SliderVideoInstance,SpeedSliderInstance,TextRenderers,TextTrack,TextTrackList,TextTrackSymbol,ThumbnailInstance,ThumbnailsLoader,TimeInstance,TimeRange,TimeSliderInstance,ToggleButtonInstance,TooltipContentInstance,TooltipInstance,TooltipTriggerInstance,VIDEO_EXTENSIONS,VIDEO_TYPES,VideoProvider,VideoProviderLoader,VideoQualityList,VimeoProviderLoader,VolumeSliderInstance,YouTubeProviderLoader,appendParamsToURL,canChangeVolume,canFullscreen,canGoogleCastSrc,canOrientScreen,canPlayHLSNatively,canRotateScreen,canUsePictureInPicture,canUseVideoPresentation,coerceToError,findActiveCue,formatSpokenTime,formatTime,getDownloadFile,getTimeRangesEnd,getTimeRangesStart,isAudioProvider,isAudioSrc,isCueActive,isDASHProvider,isDASHSrc,isGoogleCastProvider,isHLSProvider,isHLSSrc,isHLSSupported,isHTMLAudioElement,isHTMLIFrameElement,isHTMLMediaElement,isHTMLVideoElement,isMediaStream,isRemotionProvider,isRemotionSrc,isTrackCaptionKind,isVideoProvider,isVideoQualitySrc,isVideoSrc,isVimeoProvider,isYouTubeProvider,listen,loadScript,mediaContext,mediaState,normalizeTimeIntervals,parseJSONCaptionsFile,preconnect,sliderState,softResetMediaState,sortVideoQualities,updateSliderPreviewPlacement,updateTimeIntervals,useMediaContext,useMediaState,useMediaStore,usePlyrLayoutClasses,useSliderState,useSliderStore,watchActiveTextTrack,watchCueTextChange auto */ \n\n\nfunction isVideoQualitySrc(src) {\n    return !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && \"width\" in src && \"height\" in src && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(src.width) && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(src.height);\n}\nconst IS_SERVER = typeof document === \"undefined\";\nconst UA = IS_SERVER ? \"\" : navigator?.userAgent.toLowerCase() || \"\";\nconst IS_IOS = !IS_SERVER && /iphone|ipad|ipod|ios|crios|fxios/i.test(UA);\nconst IS_IPHONE = !IS_SERVER && /(iphone|ipod)/gi.test(navigator?.platform || \"\");\nconst IS_CHROME = !IS_SERVER && !!window.chrome;\nconst IS_SAFARI = !IS_SERVER && (!!window.safari || IS_IOS);\nfunction canOrientScreen() {\n    return canRotateScreen() && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(screen.orientation.unlock);\n}\nfunction canRotateScreen() {\n    return !IS_SERVER && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(window.screen.orientation) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(window.screen.orientation.lock);\n}\nfunction canPlayAudioType(audio, type) {\n    if (IS_SERVER) return false;\n    if (!audio) audio = document.createElement(\"audio\");\n    return audio.canPlayType(type).length > 0;\n}\nfunction canPlayVideoType(video, type) {\n    if (IS_SERVER) return false;\n    if (!video) video = document.createElement(\"video\");\n    return video.canPlayType(type).length > 0;\n}\nfunction canPlayHLSNatively(video) {\n    if (IS_SERVER) return false;\n    if (!video) video = document.createElement(\"video\");\n    return video.canPlayType(\"application/vnd.apple.mpegurl\").length > 0;\n}\nfunction canUsePictureInPicture(video) {\n    if (IS_SERVER) return false;\n    return !!document.pictureInPictureEnabled && !video?.disablePictureInPicture;\n}\nfunction canUseVideoPresentation(video) {\n    if (IS_SERVER) return false;\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(video?.webkitSupportsPresentationMode) && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(video?.webkitSetPresentationMode);\n}\nasync function canChangeVolume() {\n    const video = document.createElement(\"video\");\n    video.volume = 0.5;\n    await (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.waitTimeout)(0);\n    return video.volume === 0.5;\n}\nfunction getMediaSource() {\n    return IS_SERVER ? void 0 : window?.ManagedMediaSource ?? window?.MediaSource ?? window?.WebKitMediaSource;\n}\nfunction getSourceBuffer() {\n    return IS_SERVER ? void 0 : window?.SourceBuffer ?? window?.WebKitSourceBuffer;\n}\nfunction isHLSSupported() {\n    if (IS_SERVER) return false;\n    const MediaSource = getMediaSource();\n    if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(MediaSource)) return false;\n    const isTypeSupported = MediaSource && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(MediaSource.isTypeSupported) && MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n    const SourceBuffer = getSourceBuffer();\n    const isSourceBufferValid = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(SourceBuffer) || !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(SourceBuffer.prototype) && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(SourceBuffer.prototype.appendBuffer) && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(SourceBuffer.prototype.remove);\n    return !!isTypeSupported && !!isSourceBufferValid;\n}\nfunction isDASHSupported() {\n    return isHLSSupported();\n}\nclass TimeRange {\n    get length() {\n        return this._ranges.length;\n    }\n    constructor(start, end){\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(start)) {\n            this._ranges = start;\n        } else if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(start) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(end)) {\n            this._ranges = [\n                [\n                    start,\n                    end\n                ]\n            ];\n        } else {\n            this._ranges = [];\n        }\n    }\n    start(index) {\n        throwIfEmpty(this._ranges.length);\n        throwIfOutOfRange(\"start\", index, this._ranges.length - 1);\n        return this._ranges[index][0] ?? Infinity;\n    }\n    end(index) {\n        throwIfEmpty(this._ranges.length);\n        throwIfOutOfRange(\"end\", index, this._ranges.length - 1);\n        return this._ranges[index][1] ?? Infinity;\n    }\n}\nfunction getTimeRangesStart(range) {\n    if (!range.length) return null;\n    let min = range.start(0);\n    for(let i = 1; i < range.length; i++){\n        const value = range.start(i);\n        if (value < min) min = value;\n    }\n    return min;\n}\nfunction getTimeRangesEnd(range) {\n    if (!range.length) return null;\n    let max = range.end(0);\n    for(let i = 1; i < range.length; i++){\n        const value = range.end(i);\n        if (value > max) max = value;\n    }\n    return max;\n}\nfunction throwIfEmpty(length) {\n    if (!length) throw new Error(\"`TimeRanges` object is empty.\");\n}\nfunction throwIfOutOfRange(fnName, index, end) {\n    if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || index < 0 || index > end) {\n        throw new Error(`Failed to execute '${fnName}' on 'TimeRanges': The index provided (${index}) is non-numeric or out of bounds (0-${end}).`);\n    }\n}\nfunction normalizeTimeIntervals(intervals) {\n    if (intervals.length <= 1) {\n        return intervals;\n    }\n    intervals.sort((a, b)=>a[0] - b[0]);\n    let normalized = [], current = intervals[0];\n    for(let i = 1; i < intervals.length; i++){\n        const next = intervals[i];\n        if (current[1] >= next[0] - 1) {\n            current = [\n                current[0],\n                Math.max(current[1], next[1])\n            ];\n        } else {\n            normalized.push(current);\n            current = next;\n        }\n    }\n    normalized.push(current);\n    return normalized;\n}\nfunction updateTimeIntervals(intervals, interval, value) {\n    let start = interval[0], end = interval[1];\n    if (value < start) {\n        return [\n            value,\n            -1\n        ];\n    } else if (value === start) {\n        return interval;\n    } else if (start === -1) {\n        interval[0] = value;\n        return interval;\n    } else if (value > start) {\n        interval[1] = value;\n        if (end === -1) intervals.push(interval);\n    }\n    normalizeTimeIntervals(intervals);\n    return interval;\n}\nconst AUDIO_EXTENSIONS = /\\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx|flac)($|\\?)/i;\nconst AUDIO_TYPES = /* @__PURE__ */ new Set([\n    \"audio/mpeg\",\n    \"audio/ogg\",\n    \"audio/3gp\",\n    \"audio/mp3\",\n    \"audio/webm\",\n    \"audio/flac\"\n]);\nconst VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\\d+]+)?($|\\?)/i;\nconst VIDEO_TYPES = /* @__PURE__ */ new Set([\n    \"video/mp4\",\n    \"video/webm\",\n    \"video/3gp\",\n    \"video/ogg\",\n    \"video/avi\",\n    \"video/mpeg\"\n]);\nconst HLS_VIDEO_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst DASH_VIDEO_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nconst HLS_VIDEO_TYPES = /* @__PURE__ */ new Set([\n    // Apple sanctioned\n    \"application/vnd.apple.mpegurl\",\n    // Apple sanctioned for backwards compatibility\n    \"audio/mpegurl\",\n    // Very common\n    \"audio/x-mpegurl\",\n    // Very common\n    \"application/x-mpegurl\",\n    // Included for completeness\n    \"video/x-mpegurl\",\n    \"video/mpegurl\",\n    \"application/mpegurl\"\n]);\nconst DASH_VIDEO_TYPES = /* @__PURE__ */ new Set([\n    \"application/dash+xml\"\n]);\nfunction isAudioSrc({ src, type }) {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) ? AUDIO_EXTENSIONS.test(src) || AUDIO_TYPES.has(type) || src.startsWith(\"blob:\") && type === \"audio/object\" : type === \"audio/object\";\n}\nfunction isVideoSrc(src) {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) ? VIDEO_EXTENSIONS.test(src.src) || VIDEO_TYPES.has(src.type) || src.src.startsWith(\"blob:\") && src.type === \"video/object\" || isHLSSrc(src) && (IS_SERVER || canPlayHLSNatively()) : src.type === \"video/object\";\n}\nfunction isHLSSrc({ src, type }) {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && HLS_VIDEO_EXTENSIONS.test(src) || HLS_VIDEO_TYPES.has(type);\n}\nfunction isDASHSrc({ src, type }) {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && DASH_VIDEO_EXTENSIONS.test(src) || DASH_VIDEO_TYPES.has(type);\n}\nfunction canGoogleCastSrc(src) {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) && (isAudioSrc(src) || isVideoSrc(src) || isHLSSrc(src));\n}\nfunction isMediaStream(src) {\n    return !IS_SERVER && typeof window.MediaStream !== \"undefined\" && src instanceof window.MediaStream;\n}\nfunction appendParamsToURL(baseUrl, params) {\n    const searchParams = new URLSearchParams();\n    for (const key of Object.keys(params)){\n        searchParams.set(key, params[key] + \"\");\n    }\n    return baseUrl + \"?\" + searchParams.toString();\n}\nfunction preconnect(url, rel = \"preconnect\") {\n    if (IS_SERVER) return false;\n    const exists = document.querySelector(`link[href=\"${url}\"]`);\n    if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(exists)) return true;\n    const link = document.createElement(\"link\");\n    link.rel = rel;\n    link.href = url;\n    link.crossOrigin = \"true\";\n    document.head.append(link);\n    return true;\n}\nconst pendingRequests = {};\nfunction loadScript(src) {\n    if (pendingRequests[src]) return pendingRequests[src].promise;\n    const promise = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.deferredPromise)(), exists = document.querySelector(`script[src=\"${src}\"]`);\n    if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(exists)) {\n        promise.resolve();\n        return promise.promise;\n    }\n    const script = document.createElement(\"script\");\n    script.src = src;\n    script.onload = ()=>{\n        promise.resolve();\n        delete pendingRequests[src];\n    };\n    script.onerror = ()=>{\n        promise.reject();\n        delete pendingRequests[src];\n    };\n    setTimeout(()=>document.head.append(script), 0);\n    return promise.promise;\n}\nfunction getRequestCredentials(crossOrigin) {\n    return crossOrigin === \"use-credentials\" ? \"include\" : (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(crossOrigin) ? \"same-origin\" : void 0;\n}\nfunction getDownloadFile({ title, src, download }) {\n    const url = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isBoolean)(download) || download === \"\" ? src.src : (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(download) ? download : download?.url;\n    if (!isValidFileDownload({\n        url,\n        src,\n        download\n    })) return null;\n    return {\n        url,\n        name: !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isBoolean)(download) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(download) && download?.filename || title.toLowerCase() || \"media\"\n    };\n}\nfunction isValidFileDownload({ url, src, download }) {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(url) && (download && download !== true || isAudioSrc(src) || isVideoSrc(src));\n}\nconst CROSS_ORIGIN = Symbol(\"TEXT_TRACK_CROSS_ORIGIN\"), READY_STATE = Symbol(\"TEXT_TRACK_READY_STATE\"), UPDATE_ACTIVE_CUES = Symbol(\"TEXT_TRACK_UPDATE_ACTIVE_CUES\"), CAN_LOAD = Symbol(\"TEXT_TRACK_CAN_LOAD\"), ON_MODE_CHANGE = Symbol(\"TEXT_TRACK_ON_MODE_CHANGE\"), NATIVE = Symbol(\"TEXT_TRACK_NATIVE\"), NATIVE_HLS = Symbol(\"TEXT_TRACK_NATIVE_HLS\");\nconst TextTrackSymbol = {\n    _crossOrigin: CROSS_ORIGIN,\n    _readyState: READY_STATE,\n    _updateActiveCues: UPDATE_ACTIVE_CUES,\n    _canLoad: CAN_LOAD,\n    _onModeChange: ON_MODE_CHANGE,\n    _native: NATIVE,\n    _nativeHLS: NATIVE_HLS\n};\nfunction findActiveCue(cues, time) {\n    for(let i = 0, len = cues.length; i < len; i++){\n        if (isCueActive(cues[i], time)) return cues[i];\n    }\n    return null;\n}\nfunction isCueActive(cue, time) {\n    return time >= cue.startTime && time < cue.endTime;\n}\nfunction watchActiveTextTrack(tracks, kind, onChange) {\n    let currentTrack = null, scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.getScope)();\n    function onModeChange() {\n        const kinds = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(kind) ? [\n            kind\n        ] : kind, track = tracks.toArray().find((track2)=>kinds.includes(track2.kind) && track2.mode === \"showing\");\n        if (track === currentTrack) return;\n        if (!track) {\n            onChange(null);\n            currentTrack = null;\n            return;\n        }\n        if (track.readyState == 2) {\n            onChange(track);\n        } else {\n            onChange(null);\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>{\n                const off = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"load\", ()=>{\n                    onChange(track);\n                    off();\n                }, {\n                    once: true\n                });\n            }, scope);\n        }\n        currentTrack = track;\n    }\n    onModeChange();\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(tracks, \"mode-change\", onModeChange);\n}\nfunction watchCueTextChange(tracks, kind, callback) {\n    watchActiveTextTrack(tracks, kind, (track)=>{\n        if (!track) {\n            callback(\"\");\n            return;\n        }\n        const onCueChange = ()=>{\n            const activeCue = track?.activeCues[0];\n            callback(activeCue?.text || \"\");\n        };\n        onCueChange();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"cue-change\", onCueChange);\n    });\n}\nvar _a$2, _b, _c;\nclass TextTrack extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.EventsTarget {\n    constructor(init){\n        super();\n        this.id = \"\";\n        this.label = \"\";\n        this.language = \"\";\n        this.default = false;\n        this._canLoad = false;\n        this._currentTime = 0;\n        this._mode = \"disabled\";\n        this._metadata = {};\n        this._regions = [];\n        this._cues = [];\n        this._activeCues = [];\n        /** @internal */ this[_c] = 0;\n        /** @internal */ this[_b] = null;\n        /** @internal */ this[_a$2] = null;\n        for (const prop of Object.keys(init))this[prop] = init[prop];\n        if (!this.type) this.type = \"vtt\";\n        if (!IS_SERVER && init.content) {\n            this._parseContent(init);\n        } else if (!init.src) {\n            this[TextTrackSymbol._readyState] = 2;\n        }\n        if (isTrackCaptionKind(this) && !this.label) {\n            console.warn(`[vidstack] captions text track created without label: \\`${this.src}\\``);\n        }\n    }\n    static createId(track) {\n        return `vds-${track.type}-${track.kind}-${track.src ?? track.label ?? \"?\"}`;\n    }\n    get metadata() {\n        return this._metadata;\n    }\n    get regions() {\n        return this._regions;\n    }\n    get cues() {\n        return this._cues;\n    }\n    get activeCues() {\n        return this._activeCues;\n    }\n    /**\n   * - 0: Not Loading\n   * - 1: Loading\n   * - 2: Ready\n   * - 3: Error\n   */ get readyState() {\n        return this[TextTrackSymbol._readyState];\n    }\n    get mode() {\n        return this._mode;\n    }\n    set mode(mode) {\n        this.setMode(mode);\n    }\n    addCue(cue, trigger) {\n        let i = 0, length = this._cues.length;\n        for(i = 0; i < length; i++)if (cue.endTime <= this._cues[i].startTime) break;\n        if (i === length) this._cues.push(cue);\n        else this._cues.splice(i, 0, cue);\n        if (!(cue instanceof TextTrackCue)) {\n            this[TextTrackSymbol._native]?.track.addCue(cue);\n        }\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"add-cue\", {\n            detail: cue,\n            trigger\n        }));\n        if (isCueActive(cue, this._currentTime)) {\n            this[TextTrackSymbol._updateActiveCues](this._currentTime, trigger);\n        }\n    }\n    removeCue(cue, trigger) {\n        const index = this._cues.indexOf(cue);\n        if (index >= 0) {\n            const isActive = this._activeCues.includes(cue);\n            this._cues.splice(index, 1);\n            this[TextTrackSymbol._native]?.track.removeCue(cue);\n            this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"remove-cue\", {\n                detail: cue,\n                trigger\n            }));\n            if (isActive) {\n                this[TextTrackSymbol._updateActiveCues](this._currentTime, trigger);\n            }\n        }\n    }\n    setMode(mode, trigger) {\n        if (this._mode === mode) return;\n        this._mode = mode;\n        if (mode === \"disabled\") {\n            this._activeCues = [];\n            this._activeCuesChanged();\n        } else if (this.readyState === 2) {\n            this[TextTrackSymbol._updateActiveCues](this._currentTime, trigger);\n        } else {\n            this._load();\n        }\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"mode-change\", {\n            detail: this,\n            trigger\n        }));\n        this[TextTrackSymbol._onModeChange]?.();\n    }\n    /** @internal */ [(_c = TextTrackSymbol._readyState, _b = TextTrackSymbol._onModeChange, _a$2 = TextTrackSymbol._native, TextTrackSymbol._updateActiveCues)](currentTime, trigger) {\n        this._currentTime = currentTime;\n        if (this.mode === \"disabled\" || !this._cues.length) return;\n        const activeCues = [];\n        for(let i = 0, length = this._cues.length; i < length; i++){\n            const cue = this._cues[i];\n            if (isCueActive(cue, currentTime)) activeCues.push(cue);\n        }\n        let changed = activeCues.length !== this._activeCues.length;\n        if (!changed) {\n            for(let i = 0; i < activeCues.length; i++){\n                if (!this._activeCues.includes(activeCues[i])) {\n                    changed = true;\n                    break;\n                }\n            }\n        }\n        this._activeCues = activeCues;\n        if (changed) this._activeCuesChanged(trigger);\n    }\n    /** @internal */ [TextTrackSymbol._canLoad]() {\n        this._canLoad = true;\n        if (this._mode !== \"disabled\") this._load();\n    }\n    _parseContent(init) {\n        __webpack_require__.e(/*! import() */ \"vendor-chunks/media-captions\").then(__webpack_require__.bind(__webpack_require__, /*! media-captions */ \"(ssr)/./node_modules/media-captions/dist/dev.js\")).then(({ parseText, VTTCue, VTTRegion })=>{\n            if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(init.content) || init.type === \"json\") {\n                this._parseJSON(init.content, VTTCue, VTTRegion);\n                if (this.readyState !== 3) this._ready();\n            } else {\n                parseText(init.content, {\n                    type: init.type\n                }).then(({ cues, regions })=>{\n                    this._cues = cues;\n                    this._regions = regions;\n                    this._ready();\n                });\n            }\n        });\n    }\n    async _load() {\n        if (!this._canLoad || this[TextTrackSymbol._readyState] > 0) return;\n        this[TextTrackSymbol._readyState] = 1;\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"load-start\"));\n        if (!this.src) {\n            this._ready();\n            return;\n        }\n        try {\n            const { parseResponse, VTTCue, VTTRegion } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/media-captions\").then(__webpack_require__.bind(__webpack_require__, /*! media-captions */ \"(ssr)/./node_modules/media-captions/dist/dev.js\")), crossOrigin = this[TextTrackSymbol._crossOrigin]?.();\n            const response = fetch(this.src, {\n                headers: this.type === \"json\" ? {\n                    \"Content-Type\": \"application/json\"\n                } : void 0,\n                credentials: getRequestCredentials(crossOrigin)\n            });\n            if (this.type === \"json\") {\n                this._parseJSON(await (await response).text(), VTTCue, VTTRegion);\n            } else {\n                const { errors, metadata, regions, cues } = await parseResponse(response, {\n                    type: this.type,\n                    encoding: this.encoding\n                });\n                if (errors[0]?.code === 0) {\n                    throw errors[0];\n                } else {\n                    this._metadata = metadata;\n                    this._regions = regions;\n                    this._cues = cues;\n                }\n            }\n            this._ready();\n        } catch (error) {\n            this._error(error);\n        }\n    }\n    _ready() {\n        this[TextTrackSymbol._readyState] = 2;\n        if (!this.src || this.type !== \"vtt\") {\n            const native = this[TextTrackSymbol._native];\n            if (native && !native.managed) {\n                for (const cue of this._cues)native.track.addCue(cue);\n            }\n        }\n        const loadEvent = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"load\");\n        this[TextTrackSymbol._updateActiveCues](this._currentTime, loadEvent);\n        this.dispatchEvent(loadEvent);\n    }\n    _error(error) {\n        this[TextTrackSymbol._readyState] = 3;\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"error\", {\n            detail: error\n        }));\n    }\n    _parseJSON(json, VTTCue, VTTRegion) {\n        try {\n            const { regions, cues } = parseJSONCaptionsFile(json, VTTCue, VTTRegion);\n            this._regions = regions;\n            this._cues = cues;\n        } catch (error) {\n            {\n                console.error(`[vidstack] failed to parse JSON captions at: \\`${this.src}\\`\n\n`, error);\n            }\n            this._error(error);\n        }\n    }\n    _activeCuesChanged(trigger) {\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"cue-change\", {\n            trigger\n        }));\n    }\n}\nconst captionRE = /captions|subtitles/;\nfunction isTrackCaptionKind(track) {\n    return captionRE.test(track.kind);\n}\nfunction parseJSONCaptionsFile(json, Cue, Region) {\n    const content = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(json) ? JSON.parse(json) : json;\n    let regions = [], cues = [];\n    if (content.regions && Region) {\n        regions = content.regions.map((region)=>Object.assign(new Region(), region));\n    }\n    if (content.cues || (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(content)) {\n        cues = ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(content) ? content : content.cues).filter((content2)=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(content2.startTime) && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(content2.endTime)).map((cue)=>Object.assign(new Cue(0, 0, \"\"), cue));\n    }\n    return {\n        regions,\n        cues\n    };\n}\nconst mediaState = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    artist: \"\",\n    artwork: null,\n    audioTrack: null,\n    audioTracks: [],\n    autoPlay: false,\n    autoPlayError: null,\n    audioGain: null,\n    buffered: new TimeRange(),\n    canLoad: false,\n    canLoadPoster: false,\n    canFullscreen: false,\n    canOrientScreen: canOrientScreen(),\n    canPictureInPicture: false,\n    canPlay: false,\n    clipStartTime: 0,\n    clipEndTime: 0,\n    controls: false,\n    get iOSControls () {\n        return IS_IPHONE && this.mediaType === \"video\" && (!this.playsInline || !_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.fullscreenEnabled && this.fullscreen);\n    },\n    get nativeControls () {\n        return this.controls || this.iOSControls;\n    },\n    controlsVisible: false,\n    get controlsHidden () {\n        return !this.controlsVisible;\n    },\n    crossOrigin: null,\n    ended: false,\n    error: null,\n    fullscreen: false,\n    get loop () {\n        return this.providedLoop || this.userPrefersLoop;\n    },\n    logLevel: \"warn\",\n    mediaType: \"unknown\",\n    muted: false,\n    paused: true,\n    played: new TimeRange(),\n    playing: false,\n    playsInline: false,\n    pictureInPicture: false,\n    preload: \"metadata\",\n    playbackRate: 1,\n    qualities: [],\n    quality: null,\n    autoQuality: false,\n    canSetQuality: true,\n    canSetPlaybackRate: true,\n    canSetVolume: false,\n    canSetAudioGain: false,\n    seekable: new TimeRange(),\n    seeking: false,\n    source: {\n        src: \"\",\n        type: \"\"\n    },\n    sources: [],\n    started: false,\n    textTracks: [],\n    textTrack: null,\n    get hasCaptions () {\n        return this.textTracks.filter(isTrackCaptionKind).length > 0;\n    },\n    volume: 1,\n    waiting: false,\n    realCurrentTime: 0,\n    get currentTime () {\n        return this.ended ? this.duration : this.clipStartTime > 0 ? Math.max(0, Math.min(this.realCurrentTime - this.clipStartTime, this.duration)) : this.realCurrentTime;\n    },\n    providedDuration: -1,\n    intrinsicDuration: 0,\n    get realDuration () {\n        return this.providedDuration > 0 ? this.providedDuration : this.intrinsicDuration;\n    },\n    get duration () {\n        return this.clipEndTime > 0 ? this.clipEndTime - this.clipStartTime : Math.max(0, this.realDuration - this.clipStartTime);\n    },\n    get title () {\n        return this.providedTitle || this.inferredTitle;\n    },\n    get poster () {\n        return this.providedPoster || this.inferredPoster;\n    },\n    get viewType () {\n        return this.providedViewType !== \"unknown\" ? this.providedViewType : this.inferredViewType;\n    },\n    get streamType () {\n        return this.providedStreamType !== \"unknown\" ? this.providedStreamType : this.inferredStreamType;\n    },\n    get currentSrc () {\n        return this.source;\n    },\n    get bufferedStart () {\n        const start = getTimeRangesStart(this.buffered) ?? 0;\n        return Math.max(0, start - this.clipStartTime);\n    },\n    get bufferedEnd () {\n        const end = getTimeRangesEnd(this.buffered) ?? 0;\n        return Math.min(this.duration, Math.max(0, end - this.clipStartTime));\n    },\n    get seekableStart () {\n        const start = getTimeRangesStart(this.seekable) ?? 0;\n        return Math.max(0, start - this.clipStartTime);\n    },\n    get seekableEnd () {\n        const end = this.canPlay ? getTimeRangesEnd(this.seekable) ?? Infinity : 0;\n        return this.clipEndTime > 0 ? Math.max(this.clipEndTime, Math.max(0, end - this.clipStartTime)) : end;\n    },\n    get seekableWindow () {\n        return Math.max(0, this.seekableEnd - this.seekableStart);\n    },\n    // ~~ remote playback ~~\n    canAirPlay: false,\n    canGoogleCast: false,\n    remotePlaybackState: \"disconnected\",\n    remotePlaybackType: \"none\",\n    remotePlaybackLoader: null,\n    remotePlaybackInfo: null,\n    get isAirPlayConnected () {\n        return this.remotePlaybackType === \"airplay\" && this.remotePlaybackState === \"connected\";\n    },\n    get isGoogleCastConnected () {\n        return this.remotePlaybackType === \"google-cast\" && this.remotePlaybackState === \"connected\";\n    },\n    // ~~ responsive design ~~\n    pointer: \"fine\",\n    orientation: \"landscape\",\n    width: 0,\n    height: 0,\n    mediaWidth: 0,\n    mediaHeight: 0,\n    lastKeyboardAction: null,\n    // ~~ user props ~~\n    userBehindLiveEdge: false,\n    // ~~ live props ~~\n    liveEdgeTolerance: 10,\n    minLiveDVRWindow: 60,\n    get canSeek () {\n        return /unknown|on-demand|:dvr/.test(this.streamType) && Number.isFinite(this.seekableWindow) && (!this.live || /:dvr/.test(this.streamType) && this.seekableWindow >= this.minLiveDVRWindow);\n    },\n    get live () {\n        return this.streamType.includes(\"live\") || !Number.isFinite(this.realDuration);\n    },\n    get liveEdgeStart () {\n        return this.live && Number.isFinite(this.seekableEnd) ? Math.max(0, (this.liveSyncPosition ?? this.seekableEnd) - this.liveEdgeTolerance) : 0;\n    },\n    get liveEdge () {\n        return this.live && (!this.canSeek || !this.userBehindLiveEdge && this.currentTime >= this.liveEdgeStart);\n    },\n    get liveEdgeWindow () {\n        return this.live && Number.isFinite(this.seekableEnd) ? this.seekableEnd - this.liveEdgeStart : 0;\n    },\n    // ~~ internal props ~~\n    autoPlaying: false,\n    providedTitle: \"\",\n    inferredTitle: \"\",\n    providedLoop: false,\n    userPrefersLoop: false,\n    providedPoster: \"\",\n    inferredPoster: \"\",\n    inferredViewType: \"unknown\",\n    providedViewType: \"unknown\",\n    providedStreamType: \"unknown\",\n    inferredStreamType: \"unknown\",\n    liveSyncPosition: null,\n    savedState: null\n});\nconst RESET_ON_SRC_QUALITY_CHANGE = /* @__PURE__ */ new Set([\n    \"autoPlayError\",\n    \"autoPlaying\",\n    \"buffered\",\n    \"canPlay\",\n    \"error\",\n    \"paused\",\n    \"played\",\n    \"playing\",\n    \"seekable\",\n    \"seeking\",\n    \"waiting\"\n]);\nconst RESET_ON_SRC_CHANGE = /* @__PURE__ */ new Set([\n    ...RESET_ON_SRC_QUALITY_CHANGE,\n    \"ended\",\n    \"inferredPoster\",\n    \"inferredStreamType\",\n    \"inferredTitle\",\n    \"intrinsicDuration\",\n    \"liveSyncPosition\",\n    \"realCurrentTime\",\n    \"savedState\",\n    \"started\",\n    \"userBehindLiveEdge\"\n]);\nfunction softResetMediaState($media, isSourceQualityChange = false) {\n    const filter = isSourceQualityChange ? RESET_ON_SRC_QUALITY_CHANGE : RESET_ON_SRC_CHANGE;\n    mediaState.reset($media, (prop)=>filter.has(prop));\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n}\nconst mediaContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nfunction useMediaContext() {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(mediaContext);\n}\nvar _a$1;\nconst GROUPED_LOG = Symbol(\"GROUPED_LOG\");\n_a$1 = GROUPED_LOG;\nconst _GroupedLog = class _GroupedLog {\n    constructor(logger, level, title, root, parent){\n        this.logger = logger;\n        this.level = level;\n        this.title = title;\n        this.root = root;\n        this.parent = parent;\n        this[_a$1] = true;\n        this.logs = [];\n    }\n    log(...data) {\n        this.logs.push({\n            data\n        });\n        return this;\n    }\n    labelledLog(label, ...data) {\n        this.logs.push({\n            label,\n            data\n        });\n        return this;\n    }\n    groupStart(title) {\n        return new _GroupedLog(this.logger, this.level, title, this.root ?? this, this);\n    }\n    groupEnd() {\n        this.parent?.logs.push(this);\n        return this.parent ?? this;\n    }\n    dispatch() {\n        return this.logger.dispatch(this.level, this.root ?? this);\n    }\n};\nlet GroupedLog = _GroupedLog;\nfunction isGroupedLog(data) {\n    return !!data?.[GROUPED_LOG];\n}\nclass Logger {\n    constructor(){\n        this._target = null;\n    }\n    error(...data) {\n        return this.dispatch(\"error\", ...data);\n    }\n    warn(...data) {\n        return this.dispatch(\"warn\", ...data);\n    }\n    info(...data) {\n        return this.dispatch(\"info\", ...data);\n    }\n    debug(...data) {\n        return this.dispatch(\"debug\", ...data);\n    }\n    errorGroup(title) {\n        return new GroupedLog(this, \"error\", title);\n    }\n    warnGroup(title) {\n        return new GroupedLog(this, \"warn\", title);\n    }\n    infoGroup(title) {\n        return new GroupedLog(this, \"info\", title);\n    }\n    debugGroup(title) {\n        return new GroupedLog(this, \"debug\", title);\n    }\n    setTarget(newTarget) {\n        this._target = newTarget;\n    }\n    dispatch(level, ...data) {\n        return this._target?.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"vds-log\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n                level,\n                data\n            }\n        })) || false;\n    }\n}\nclass MediaRemoteControl {\n    constructor(_logger = new Logger()){\n        this._logger = _logger;\n        this._target = null;\n        this._player = null;\n        this._prevTrackIndex = -1;\n    }\n    /**\n   * Set the target from which to dispatch media requests events from. The events should bubble\n   * up from this target to the player element.\n   *\n   * @example\n   * ```ts\n   * const button = document.querySelector('button');\n   * remote.setTarget(button);\n   * ```\n   */ setTarget(target) {\n        this._target = target;\n        this._logger?.setTarget(target);\n    }\n    /**\n   * Returns the current player element. This method will attempt to find the player by\n   * searching up from either the given `target` or default target set via `remote.setTarget`.\n   *\n   * @example\n   * ```ts\n   * const player = remote.getPlayer();\n   * ```\n   */ getPlayer(target) {\n        if (this._player) return this._player;\n        (target ?? this._target)?.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"find-media-player\", {\n            detail: (player)=>void (this._player = player),\n            bubbles: true,\n            composed: true\n        }));\n        return this._player;\n    }\n    /**\n   * Set the current player element so the remote can support toggle methods such as\n   * `togglePaused` as they rely on the current media state.\n   */ setPlayer(player) {\n        this._player = player;\n    }\n    /**\n   * Dispatch a request to start the media loading process. This will only work if the media\n   * player has been initialized with a custom loading strategy `load=\"custom\">`.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/loading#load-strategies}\n   */ startLoading(trigger) {\n        this._dispatchRequest(\"media-start-loading\", trigger);\n    }\n    /**\n   * Dispatch a request to start the poster loading process. This will only work if the media\n   * player has been initialized with a custom poster loading strategy `posterLoad=\"custom\">`.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/loading#load-strategies}\n   */ startLoadingPoster(trigger) {\n        this._dispatchRequest(\"media-poster-start-loading\", trigger);\n    }\n    /**\n   * Dispatch a request to connect to AirPlay.\n   *\n   * @see {@link https://www.apple.com/au/airplay}\n   */ requestAirPlay(trigger) {\n        this._dispatchRequest(\"media-airplay-request\", trigger);\n    }\n    /**\n   * Dispatch a request to connect to Google Cast.\n   *\n   * @see {@link https://developers.google.com/cast/docs/overview}\n   */ requestGoogleCast(trigger) {\n        this._dispatchRequest(\"media-google-cast-request\", trigger);\n    }\n    /**\n   * Dispatch a request to begin/resume media playback.\n   */ play(trigger) {\n        this._dispatchRequest(\"media-play-request\", trigger);\n    }\n    /**\n   * Dispatch a request to pause media playback.\n   */ pause(trigger) {\n        this._dispatchRequest(\"media-pause-request\", trigger);\n    }\n    /**\n   * Dispatch a request to set the media volume to mute (0).\n   */ mute(trigger) {\n        this._dispatchRequest(\"media-mute-request\", trigger);\n    }\n    /**\n   * Dispatch a request to unmute the media volume and set it back to it's previous state.\n   */ unmute(trigger) {\n        this._dispatchRequest(\"media-unmute-request\", trigger);\n    }\n    /**\n   * Dispatch a request to enter fullscreen.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/fullscreen#remote-control}\n   */ enterFullscreen(target, trigger) {\n        this._dispatchRequest(\"media-enter-fullscreen-request\", trigger, target);\n    }\n    /**\n   * Dispatch a request to exit fullscreen.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/fullscreen#remote-control}\n   */ exitFullscreen(target, trigger) {\n        this._dispatchRequest(\"media-exit-fullscreen-request\", trigger, target);\n    }\n    /**\n   * Dispatch a request to lock the screen orientation.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/screen-orientation#remote-control}\n   */ lockScreenOrientation(lockType, trigger) {\n        this._dispatchRequest(\"media-orientation-lock-request\", trigger, lockType);\n    }\n    /**\n   * Dispatch a request to unlock the screen orientation.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/screen-orientation#remote-control}\n   */ unlockScreenOrientation(trigger) {\n        this._dispatchRequest(\"media-orientation-unlock-request\", trigger);\n    }\n    /**\n   * Dispatch a request to enter picture-in-picture mode.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/picture-in-picture#remote-control}\n   */ enterPictureInPicture(trigger) {\n        this._dispatchRequest(\"media-enter-pip-request\", trigger);\n    }\n    /**\n   * Dispatch a request to exit picture-in-picture mode.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/picture-in-picture#remote-control}\n   */ exitPictureInPicture(trigger) {\n        this._dispatchRequest(\"media-exit-pip-request\", trigger);\n    }\n    /**\n   * Notify the media player that a seeking process is happening and to seek to the given `time`.\n   */ seeking(time, trigger) {\n        this._dispatchRequest(\"media-seeking-request\", trigger, time);\n    }\n    /**\n   * Notify the media player that a seeking operation has completed and to seek to the given `time`.\n   * This is generally called after a series of `remote.seeking()` calls.\n   */ seek(time, trigger) {\n        this._dispatchRequest(\"media-seek-request\", trigger, time);\n    }\n    seekToLiveEdge(trigger) {\n        this._dispatchRequest(\"media-live-edge-request\", trigger);\n    }\n    /**\n   * Dispatch a request to update the length of the media in seconds.\n   *\n   * @example\n   * ```ts\n   * remote.changeDuration(100); // 100 seconds\n   * ```\n   */ changeDuration(duration, trigger) {\n        this._dispatchRequest(\"media-duration-change-request\", trigger, duration);\n    }\n    /**\n   * Dispatch a request to update the clip start time. This is the time at which media playback\n   * should start at.\n   *\n   * @example\n   * ```ts\n   * remote.changeClipStart(100); // start at 100 seconds\n   * ```\n   */ changeClipStart(startTime, trigger) {\n        this._dispatchRequest(\"media-clip-start-change-request\", trigger, startTime);\n    }\n    /**\n   * Dispatch a request to update the clip end time. This is the time at which media playback\n   * should end at.\n   *\n   * @example\n   * ```ts\n   * remote.changeClipEnd(100); // end at 100 seconds\n   * ```\n   */ changeClipEnd(endTime, trigger) {\n        this._dispatchRequest(\"media-clip-end-change-request\", trigger, endTime);\n    }\n    /**\n   * Dispatch a request to update the media volume to the given `volume` level which is a value\n   * between 0 and 1.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/audio-gain#remote-control}\n   * @example\n   * ```ts\n   * remote.changeVolume(0); // 0%\n   * remote.changeVolume(0.05); // 5%\n   * remote.changeVolume(0.5); // 50%\n   * remote.changeVolume(0.75); // 70%\n   * remote.changeVolume(1); // 100%\n   * ```\n   */ changeVolume(volume, trigger) {\n        this._dispatchRequest(\"media-volume-change-request\", trigger, Math.max(0, Math.min(1, volume)));\n    }\n    /**\n   * Dispatch a request to change the current audio track.\n   *\n   * @example\n   * ```ts\n   * remote.changeAudioTrack(1); // track at index 1\n   * ```\n   */ changeAudioTrack(index, trigger) {\n        this._dispatchRequest(\"media-audio-track-change-request\", trigger, index);\n    }\n    /**\n   * Dispatch a request to change the video quality. The special value `-1` represents auto quality\n   * selection.\n   *\n   * @example\n   * ```ts\n   * remote.changeQuality(-1); // auto\n   * remote.changeQuality(1); // quality at index 1\n   * ```\n   */ changeQuality(index, trigger) {\n        this._dispatchRequest(\"media-quality-change-request\", trigger, index);\n    }\n    /**\n   * Request auto quality selection.\n   */ requestAutoQuality(trigger) {\n        this.changeQuality(-1, trigger);\n    }\n    /**\n   * Dispatch a request to change the mode of the text track at the given index.\n   *\n   * @example\n   * ```ts\n   * remote.changeTextTrackMode(1, 'showing'); // track at index 1\n   * ```\n   */ changeTextTrackMode(index, mode, trigger) {\n        this._dispatchRequest(\"media-text-track-change-request\", trigger, {\n            index,\n            mode\n        });\n    }\n    /**\n   * Dispatch a request to change the media playback rate.\n   *\n   * @example\n   * ```ts\n   * remote.changePlaybackRate(0.5); // Half the normal speed\n   * remote.changePlaybackRate(1); // Normal speed\n   * remote.changePlaybackRate(1.5); // 50% faster than normal\n   * remote.changePlaybackRate(2); // Double the normal speed\n   * ```\n   */ changePlaybackRate(rate, trigger) {\n        this._dispatchRequest(\"media-rate-change-request\", trigger, rate);\n    }\n    /**\n   * Dispatch a request to change the media audio gain.\n   *\n   * @example\n   * ```ts\n   * remote.changeAudioGain(1); // Disable audio gain\n   * remote.changeAudioGain(1.5); // 50% louder\n   * remote.changeAudioGain(2); // 100% louder\n   * ```\n   */ changeAudioGain(gain, trigger) {\n        this._dispatchRequest(\"media-audio-gain-change-request\", trigger, gain);\n    }\n    /**\n   * Dispatch a request to resume idle tracking on controls.\n   */ resumeControls(trigger) {\n        this._dispatchRequest(\"media-resume-controls-request\", trigger);\n    }\n    /**\n   * Dispatch a request to pause controls idle tracking. Pausing tracking will result in the\n   * controls being visible until `remote.resumeControls()` is called. This method\n   * is generally used when building custom controls and you'd like to prevent the UI from\n   * disappearing.\n   *\n   * @example\n   * ```ts\n   * // Prevent controls hiding while menu is being interacted with.\n   * function onSettingsOpen() {\n   *   remote.pauseControls();\n   * }\n   *\n   * function onSettingsClose() {\n   *   remote.resumeControls();\n   * }\n   * ```\n   */ pauseControls(trigger) {\n        this._dispatchRequest(\"media-pause-controls-request\", trigger);\n    }\n    /**\n   * Dispatch a request to toggle the media playback state.\n   */ togglePaused(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this._noPlayerWarning(this.togglePaused.name);\n            return;\n        }\n        if (player.state.paused) this.play(trigger);\n        else this.pause(trigger);\n    }\n    /**\n   * Dispatch a request to toggle the controls visibility.\n   */ toggleControls(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this._noPlayerWarning(this.toggleControls.name);\n            return;\n        }\n        if (!player.controls.showing) {\n            player.controls.show(0, trigger);\n        } else {\n            player.controls.hide(0, trigger);\n        }\n    }\n    /**\n   * Dispatch a request to toggle the media muted state.\n   */ toggleMuted(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this._noPlayerWarning(this.toggleMuted.name);\n            return;\n        }\n        if (player.state.muted) this.unmute(trigger);\n        else this.mute(trigger);\n    }\n    /**\n   * Dispatch a request to toggle the media fullscreen state.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/fullscreen#remote-control}\n   */ toggleFullscreen(target, trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this._noPlayerWarning(this.toggleFullscreen.name);\n            return;\n        }\n        if (player.state.fullscreen) this.exitFullscreen(target, trigger);\n        else this.enterFullscreen(target, trigger);\n    }\n    /**\n   * Dispatch a request to toggle the media picture-in-picture mode.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/picture-in-picture#remote-control}\n   */ togglePictureInPicture(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this._noPlayerWarning(this.togglePictureInPicture.name);\n            return;\n        }\n        if (player.state.pictureInPicture) this.exitPictureInPicture(trigger);\n        else this.enterPictureInPicture(trigger);\n    }\n    /**\n   * Show captions.\n   */ showCaptions(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this._noPlayerWarning(this.showCaptions.name);\n            return;\n        }\n        let tracks = player.state.textTracks, index = this._prevTrackIndex;\n        if (!tracks[index] || !isTrackCaptionKind(tracks[index])) {\n            index = -1;\n        }\n        if (index === -1) {\n            index = tracks.findIndex((track)=>isTrackCaptionKind(track) && track.default);\n        }\n        if (index === -1) {\n            index = tracks.findIndex((track)=>isTrackCaptionKind(track));\n        }\n        if (index >= 0) this.changeTextTrackMode(index, \"showing\", trigger);\n        this._prevTrackIndex = -1;\n    }\n    /**\n   * Turn captions off.\n   */ disableCaptions(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this._noPlayerWarning(this.disableCaptions.name);\n            return;\n        }\n        const tracks = player.state.textTracks, track = player.state.textTrack;\n        if (track) {\n            const index = tracks.indexOf(track);\n            this.changeTextTrackMode(index, \"disabled\", trigger);\n            this._prevTrackIndex = index;\n        }\n    }\n    /**\n   * Dispatch a request to toggle the current captions mode.\n   */ toggleCaptions(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this._noPlayerWarning(this.toggleCaptions.name);\n            return;\n        }\n        if (player.state.textTrack) {\n            this.disableCaptions();\n        } else {\n            this.showCaptions();\n        }\n    }\n    userPrefersLoopChange(prefersLoop, trigger) {\n        this._dispatchRequest(\"media-user-loop-change-request\", trigger, prefersLoop);\n    }\n    _dispatchRequest(type, trigger, detail) {\n        const request = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(type, {\n            bubbles: true,\n            composed: true,\n            cancelable: true,\n            detail,\n            trigger\n        });\n        let target = trigger?.target || null;\n        if (target && target instanceof _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component) target = target.el;\n        const shouldUsePlayer = !target || target === document || target === window || target === document.body || this._player?.el && target instanceof Node && !this._player.el.contains(target);\n        target = shouldUsePlayer ? this._target ?? this.getPlayer()?.el : target ?? this._target;\n        {\n            this._logger?.debugGroup(`\\u{1F4E8} dispatching \\`${type}\\``).labelledLog(\"Target\", target).labelledLog(\"Player\", this._player).labelledLog(\"Request Event\", request).labelledLog(\"Trigger Event\", trigger).dispatch();\n        }\n        if (this._player) {\n            if (type === \"media-play-request\" && !this._player.state.canLoad) {\n                target?.dispatchEvent(request);\n            } else {\n                this._player.canPlayQueue._enqueue(type, ()=>target?.dispatchEvent(request));\n            }\n        } else {\n            target?.dispatchEvent(request);\n        }\n    }\n    _noPlayerWarning(method) {\n        {\n            console.warn(`[vidstack] attempted to call \\`MediaRemoteControl.${method}\\`() that requires player but failed because remote could not find a parent player element from target`);\n        }\n    }\n}\nclass LocalMediaStorage {\n    constructor(){\n        this.playerId = \"vds-player\";\n        this.mediaId = null;\n        this._data = {\n            volume: null,\n            muted: null,\n            audioGain: null,\n            time: null,\n            lang: null,\n            captions: null,\n            rate: null,\n            quality: null\n        };\n        this.saveTimeThrottled = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this.saveTime.bind(this), 1e3);\n    }\n    async getVolume() {\n        return this._data.volume;\n    }\n    async setVolume(volume) {\n        this._data.volume = volume;\n        this.save();\n    }\n    async getMuted() {\n        return this._data.muted;\n    }\n    async setMuted(muted) {\n        this._data.muted = muted;\n        this.save();\n    }\n    async getTime() {\n        return this._data.time;\n    }\n    async setTime(time, ended) {\n        const shouldClear = time < 0;\n        this._data.time = !shouldClear ? time : null;\n        if (shouldClear || ended) this.saveTime();\n        else this.saveTimeThrottled();\n    }\n    async getLang() {\n        return this._data.lang;\n    }\n    async setLang(lang) {\n        this._data.lang = lang;\n        this.save();\n    }\n    async getCaptions() {\n        return this._data.captions;\n    }\n    async setCaptions(enabled) {\n        this._data.captions = enabled;\n        this.save();\n    }\n    async getPlaybackRate() {\n        return this._data.rate;\n    }\n    async setPlaybackRate(rate) {\n        this._data.rate = rate;\n        this.save();\n    }\n    async getAudioGain() {\n        return this._data.audioGain;\n    }\n    async setAudioGain(gain) {\n        this._data.audioGain = gain;\n        this.save();\n    }\n    async getVideoQuality() {\n        return this._data.quality;\n    }\n    async setVideoQuality(quality) {\n        this._data.quality = quality;\n        this.save();\n    }\n    onChange(src, mediaId, playerId = \"vds-player\") {\n        const savedData = playerId ? localStorage.getItem(playerId) : null, savedTime = mediaId ? localStorage.getItem(mediaId) : null;\n        this.playerId = playerId;\n        this.mediaId = mediaId;\n        this._data = {\n            volume: null,\n            muted: null,\n            audioGain: null,\n            lang: null,\n            captions: null,\n            rate: null,\n            quality: null,\n            ...savedData ? JSON.parse(savedData) : {},\n            time: savedTime ? +savedTime : null\n        };\n    }\n    save() {\n        if (IS_SERVER || !this.playerId) return;\n        const data = JSON.stringify({\n            ...this._data,\n            time: void 0\n        });\n        localStorage.setItem(this.playerId, data);\n    }\n    saveTime() {\n        if (IS_SERVER || !this.mediaId) return;\n        const data = (this._data.time ?? 0).toString();\n        localStorage.setItem(this.mediaId, data);\n    }\n}\nfunction round(num, decimalPlaces = 2) {\n    return Number(num.toFixed(decimalPlaces));\n}\nfunction getNumberOfDecimalPlaces(num) {\n    return String(num).split(\".\")[1]?.length ?? 0;\n}\nfunction clampNumber(min, value, max) {\n    return Math.max(min, Math.min(max, value));\n}\nfunction listen(target, type, handler) {\n    if (!target) return;\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(target, type, handler);\n}\nfunction isEventInside(el, event1) {\n    const target = event1.composedPath()[0];\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isDOMNode)(target) && el.contains(target);\n}\nconst rafJobs = /* @__PURE__ */ new Set();\nif (!IS_SERVER) {\n    let processJobs = function() {\n        for (const job of rafJobs){\n            try {\n                job();\n            } catch (e) {\n                console.error(`[vidstack] failed job:\n\n${e}`);\n            }\n        }\n        window.requestAnimationFrame(processJobs);\n    };\n    processJobs();\n}\nfunction scheduleRafJob(job) {\n    rafJobs.add(job);\n    return ()=>rafJobs.delete(job);\n}\nfunction setAttributeIfEmpty(target, name, value) {\n    if (!target.hasAttribute(name)) target.setAttribute(name, value);\n}\nfunction setARIALabel(target, $label) {\n    if (target.hasAttribute(\"aria-label\") || target.hasAttribute(\"data-no-label\")) return;\n    if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)($label)) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(target, \"aria-label\", $label);\n        return;\n    }\n    function updateAriaDescription() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(target, \"aria-label\", $label());\n    }\n    if (IS_SERVER) updateAriaDescription();\n    else (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(updateAriaDescription);\n}\nfunction isElementVisible(el) {\n    const style = getComputedStyle(el);\n    return style.display !== \"none\" && parseInt(style.opacity) > 0;\n}\nfunction checkVisibility(el) {\n    return !!el && (\"checkVisibility\" in el ? el.checkVisibility({\n        checkOpacity: true,\n        checkVisibilityCSS: true\n    }) : isElementVisible(el));\n}\nfunction observeVisibility(el, callback) {\n    return scheduleRafJob(()=>callback(checkVisibility(el)));\n}\nfunction isElementParent(owner, node, test) {\n    while(node){\n        if (node === owner) {\n            return true;\n        } else if (test?.(node)) {\n            break;\n        } else {\n            node = node.parentElement;\n        }\n    }\n    return false;\n}\nfunction onPress(target, handler) {\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(target, \"pointerup\", (event1)=>{\n        if (event1.button === 0 && !event1.defaultPrevented) handler(event1);\n    });\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(target, \"keydown\", (event1)=>{\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardClick)(event1)) handler(event1);\n    });\n}\nfunction isTouchPinchEvent(event1) {\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isTouchEvent)(event1) && (event1.touches.length > 1 || event1.changedTouches.length > 1);\n}\nfunction requestScopedAnimationFrame(callback) {\n    if (IS_SERVER) return callback();\n    let scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.getScope)(), id = window.requestAnimationFrame(()=>{\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(callback, scope);\n        id = -1;\n    });\n    return ()=>void window.cancelAnimationFrame(id);\n}\nfunction autoPlacement(el, trigger, placement, { offsetVarName, xOffset, yOffset, ...options }) {\n    if (!el) return;\n    const floatingPlacement = placement.replace(\" \", \"-\").replace(\"-center\", \"\");\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(el, \"visibility\", !trigger ? \"hidden\" : null);\n    if (!trigger) return;\n    let isTop = placement.includes(\"top\");\n    const negateX = (x)=>placement.includes(\"left\") ? `calc(-1 * ${x})` : x, negateY = (y)=>isTop ? `calc(-1 * ${y})` : y;\n    return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.autoUpdate)(trigger, el, ()=>{\n        (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.computePosition)(trigger, el, {\n            placement: floatingPlacement,\n            middleware: [\n                ...options.middleware ?? [],\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.flip)({\n                    fallbackAxisSideDirection: \"start\",\n                    crossAxis: false\n                }),\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.shift)()\n            ],\n            ...options\n        }).then(({ x, y, middlewareData })=>{\n            const hasFlipped = !!middlewareData.flip?.index;\n            isTop = placement.includes(hasFlipped ? \"bottom\" : \"top\");\n            el.setAttribute(\"data-placement\", hasFlipped ? placement.startsWith(\"top\") ? placement.replace(\"top\", \"bottom\") : placement.replace(\"bottom\", \"top\") : placement);\n            Object.assign(el.style, {\n                top: `calc(${y + \"px\"} + ${negateY(yOffset ? yOffset + \"px\" : `var(--${offsetVarName}-y-offset, 0px)`)})`,\n                left: `calc(${x + \"px\"} + ${negateX(xOffset ? xOffset + \"px\" : `var(--${offsetVarName}-x-offset, 0px)`)})`\n            });\n        });\n    });\n}\nfunction hasAnimation(el) {\n    const styles = getComputedStyle(el);\n    return styles.animationName !== \"none\";\n}\nfunction isHTMLElement(el) {\n    return el instanceof HTMLElement;\n}\nclass NativeTextRenderer {\n    constructor(){\n        this.priority = 0;\n        this._display = true;\n        this._video = null;\n        this._track = null;\n        this._tracks = /* @__PURE__ */ new Set();\n    }\n    canRender(_, video) {\n        return !!video;\n    }\n    attach(video) {\n        this._video = video;\n        if (video) video.textTracks.onchange = this._onChange.bind(this);\n    }\n    addTrack(track) {\n        this._tracks.add(track);\n        this._attachTrack(track);\n    }\n    removeTrack(track) {\n        track[TextTrackSymbol._native]?.remove?.();\n        track[TextTrackSymbol._native] = null;\n        this._tracks.delete(track);\n    }\n    changeTrack(track) {\n        const current = track?.[TextTrackSymbol._native];\n        if (current && current.track.mode !== \"showing\") {\n            current.track.mode = \"showing\";\n        }\n        this._track = track;\n    }\n    setDisplay(display) {\n        this._display = display;\n        this._onChange();\n    }\n    detach() {\n        if (this._video) this._video.textTracks.onchange = null;\n        for (const track of this._tracks)this.removeTrack(track);\n        this._tracks.clear();\n        this._video = null;\n        this._track = null;\n    }\n    _attachTrack(track) {\n        if (!this._video) return;\n        const el = track[TextTrackSymbol._native] ??= this._createTrackElement(track);\n        if (isHTMLElement(el)) {\n            this._video.append(el);\n            el.track.mode = el.default ? \"showing\" : \"disabled\";\n        }\n    }\n    _createTrackElement(track) {\n        const el = document.createElement(\"track\"), isDefault = track.default || track.mode === \"showing\", isSupported = track.src && track.type === \"vtt\";\n        el.id = track.id;\n        el.src = isSupported ? track.src : \"\";\n        el.label = track.label;\n        el.kind = track.kind;\n        el.default = isDefault;\n        track.language && (el.srclang = track.language);\n        if (isDefault && !isSupported) {\n            this._copyCues(track, el.track);\n        }\n        return el;\n    }\n    _copyCues(track, native) {\n        if (track.src && track.type === \"vtt\" || native.cues?.length) return;\n        for (const cue of track.cues)native.addCue(cue);\n    }\n    _onChange(event1) {\n        for (const track of this._tracks){\n            const native = track[TextTrackSymbol._native];\n            if (!native) continue;\n            if (!this._display) {\n                native.track.mode = native.managed ? \"hidden\" : \"disabled\";\n                continue;\n            }\n            const isShowing = native.track.mode === \"showing\";\n            if (isShowing) this._copyCues(track, native.track);\n            track.setMode(isShowing ? \"showing\" : \"disabled\", event1);\n        }\n    }\n}\nclass TextRenderers {\n    constructor(_media){\n        this._media = _media;\n        this._video = null;\n        this._renderers = [];\n        this._nativeDisplay = false;\n        this._nativeRenderer = null;\n        this._customRenderer = null;\n        const textTracks = _media.textTracks;\n        this._textTracks = textTracks;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchControls.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._detach.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(textTracks, \"add\", this._onAddTrack.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(textTracks, \"remove\", this._onRemoveTrack.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(textTracks, \"mode-change\", this._update.bind(this));\n    }\n    _watchControls() {\n        const { nativeControls } = this._media.$state;\n        this._nativeDisplay = nativeControls();\n        this._update();\n    }\n    add(renderer) {\n        this._renderers.push(renderer);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(this._update.bind(this));\n    }\n    remove(renderer) {\n        renderer.detach();\n        this._renderers.splice(this._renderers.indexOf(renderer), 1);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(this._update.bind(this));\n    }\n    /** @internal */ _attachVideo(video) {\n        requestAnimationFrame(()=>{\n            this._video = video;\n            if (video) {\n                this._nativeRenderer = new NativeTextRenderer();\n                this._nativeRenderer.attach(video);\n                for (const track of this._textTracks)this._addNativeTrack(track);\n            }\n            this._update();\n        });\n    }\n    _addNativeTrack(track) {\n        if (!isTrackCaptionKind(track)) return;\n        this._nativeRenderer?.addTrack(track);\n    }\n    _removeNativeTrack(track) {\n        if (!isTrackCaptionKind(track)) return;\n        this._nativeRenderer?.removeTrack(track);\n    }\n    _onAddTrack(event1) {\n        this._addNativeTrack(event1.detail);\n    }\n    _onRemoveTrack(event1) {\n        this._removeNativeTrack(event1.detail);\n    }\n    _update() {\n        const currentTrack = this._textTracks.selected;\n        if (this._video && (this._nativeDisplay || currentTrack?.[TextTrackSymbol._nativeHLS])) {\n            this._customRenderer?.changeTrack(null);\n            this._nativeRenderer?.setDisplay(true);\n            this._nativeRenderer?.changeTrack(currentTrack);\n            return;\n        }\n        this._nativeRenderer?.setDisplay(false);\n        this._nativeRenderer?.changeTrack(null);\n        if (!currentTrack) {\n            this._customRenderer?.changeTrack(null);\n            return;\n        }\n        const customRenderer = this._renderers.sort((a, b)=>a.priority - b.priority).find((renderer)=>renderer.canRender(currentTrack, this._video));\n        if (this._customRenderer !== customRenderer) {\n            this._customRenderer?.detach();\n            customRenderer?.attach(this._video);\n            this._customRenderer = customRenderer ?? null;\n        }\n        customRenderer?.changeTrack(currentTrack);\n    }\n    _detach() {\n        this._nativeRenderer?.detach();\n        this._nativeRenderer = null;\n        this._customRenderer?.detach();\n        this._customRenderer = null;\n    }\n}\nconst ADD = Symbol(\"LIST_ADD\"), REMOVE = Symbol(\"LIST_REMOVE\"), RESET = Symbol(\"LIST_RESET\"), SELECT = Symbol(\"LIST_SELECT\"), READONLY = Symbol(\"LIST_READONLY\"), SET_READONLY = Symbol(\"LIST_SET_READONLY\"), ON_RESET = Symbol(\"LIST_ON_RESET\"), ON_REMOVE = Symbol(\"LIST_ON_REMOVE\"), ON_USER_SELECT = Symbol(\"LIST_ON_USER_SELECT\");\nconst ListSymbol = {\n    _add: ADD,\n    _remove: REMOVE,\n    _reset: RESET,\n    _select: SELECT,\n    _readonly: READONLY,\n    _setReadonly: SET_READONLY,\n    _onReset: ON_RESET,\n    _onRemove: ON_REMOVE,\n    _onUserSelect: ON_USER_SELECT\n};\nvar _a;\nclass List extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.EventsTarget {\n    constructor(){\n        super(...arguments);\n        this._items = [];\n        /** @internal */ this[_a] = false;\n    }\n    get length() {\n        return this._items.length;\n    }\n    get readonly() {\n        return this[ListSymbol._readonly];\n    }\n    /**\n   * Returns the index of the first occurrence of the given item, or -1 if it is not present.\n   */ indexOf(item) {\n        return this._items.indexOf(item);\n    }\n    /**\n   * Returns an item matching the given `id`, or `null` if not present.\n   */ getById(id) {\n        if (id === \"\") return null;\n        return this._items.find((item)=>item.id === id) ?? null;\n    }\n    /**\n   * Transform list to an array.\n   */ toArray() {\n        return [\n            ...this._items\n        ];\n    }\n    [(_a = ListSymbol._readonly, Symbol.iterator)]() {\n        return this._items.values();\n    }\n    /** @internal */ [ListSymbol._add](item, trigger) {\n        const index = this._items.length;\n        if (!(\"\" + index in this)) {\n            Object.defineProperty(this, index, {\n                get () {\n                    return this._items[index];\n                }\n            });\n        }\n        if (this._items.includes(item)) return;\n        this._items.push(item);\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"add\", {\n            detail: item,\n            trigger\n        }));\n    }\n    /** @internal */ [ListSymbol._remove](item, trigger) {\n        const index = this._items.indexOf(item);\n        if (index >= 0) {\n            this[ListSymbol._onRemove]?.(item, trigger);\n            this._items.splice(index, 1);\n            this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"remove\", {\n                detail: item,\n                trigger\n            }));\n        }\n    }\n    /** @internal */ [ListSymbol._reset](trigger) {\n        for (const item of [\n            ...this._items\n        ])this[ListSymbol._remove](item, trigger);\n        this._items = [];\n        this[ListSymbol._setReadonly](false, trigger);\n        this[ListSymbol._onReset]?.();\n    }\n    /** @internal */ [ListSymbol._setReadonly](readonly, trigger) {\n        if (this[ListSymbol._readonly] === readonly) return;\n        this[ListSymbol._readonly] = readonly;\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"readonly-change\", {\n            detail: readonly,\n            trigger\n        }));\n    }\n}\nclass TextTrackList extends List {\n    constructor(){\n        super();\n        this._canLoad = false;\n        this._defaults = {};\n        this._storage = null;\n        this._preferredLang = null;\n        this._selectTracks = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionDebounce)(async ()=>{\n            if (!this._canLoad) return;\n            if (!this._preferredLang && this._storage) {\n                this._preferredLang = await this._storage.getLang();\n            }\n            const showCaptions = await this._storage?.getCaptions(), kinds = [\n                [\n                    \"captions\",\n                    \"subtitles\"\n                ],\n                \"chapters\",\n                \"descriptions\",\n                \"metadata\"\n            ];\n            for (const kind of kinds){\n                const tracks = this.getByKind(kind);\n                if (tracks.find((t)=>t.mode === \"showing\")) continue;\n                const preferredTrack = this._preferredLang ? tracks.find((track2)=>track2.language === this._preferredLang) : null;\n                const defaultTrack = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(kind) ? this._defaults[kind.find((kind2)=>this._defaults[kind2]) || \"\"] : this._defaults[kind];\n                const track = preferredTrack ?? defaultTrack, isCaptionsKind = track && isTrackCaptionKind(track);\n                if (track && (!isCaptionsKind || showCaptions !== false)) {\n                    track.mode = \"showing\";\n                    if (isCaptionsKind) this._saveCaptionsTrack(track);\n                }\n            }\n        }, 300);\n        this._pendingRemoval = null;\n        this._onTrackModeChangeBind = this._onTrackModeChange.bind(this);\n    }\n    get selected() {\n        const track = this._items.find((t)=>t.mode === \"showing\" && isTrackCaptionKind(t));\n        return track ?? null;\n    }\n    get selectedIndex() {\n        const selected = this.selected;\n        return selected ? this.indexOf(selected) : -1;\n    }\n    get preferredLang() {\n        return this._preferredLang;\n    }\n    set preferredLang(lang) {\n        this._preferredLang = lang;\n        this._saveLang(lang);\n    }\n    add(init, trigger) {\n        const isTrack = init instanceof TextTrack, track = isTrack ? init : new TextTrack(init), kind = init.kind === \"captions\" || init.kind === \"subtitles\" ? \"captions\" : init.kind;\n        if (this._defaults[kind] && init.default) delete init.default;\n        track.addEventListener(\"mode-change\", this._onTrackModeChangeBind);\n        this[ListSymbol._add](track, trigger);\n        track[TextTrackSymbol._crossOrigin] = this[TextTrackSymbol._crossOrigin];\n        if (this._canLoad) track[TextTrackSymbol._canLoad]();\n        if (init.default) this._defaults[kind] = track;\n        this._selectTracks();\n        return this;\n    }\n    remove(track, trigger) {\n        this._pendingRemoval = track;\n        if (!this._items.includes(track)) return;\n        if (track === this._defaults[track.kind]) delete this._defaults[track.kind];\n        track.mode = \"disabled\";\n        track[TextTrackSymbol._onModeChange] = null;\n        track.removeEventListener(\"mode-change\", this._onTrackModeChangeBind);\n        this[ListSymbol._remove](track, trigger);\n        this._pendingRemoval = null;\n        return this;\n    }\n    clear(trigger) {\n        for (const track of [\n            ...this._items\n        ]){\n            this.remove(track, trigger);\n        }\n        return this;\n    }\n    getByKind(kind) {\n        const kinds = Array.isArray(kind) ? kind : [\n            kind\n        ];\n        return this._items.filter((track)=>kinds.includes(track.kind));\n    }\n    /** @internal */ [TextTrackSymbol._canLoad]() {\n        if (this._canLoad) return;\n        for (const track of this._items)track[TextTrackSymbol._canLoad]();\n        this._canLoad = true;\n        this._selectTracks();\n    }\n    _onTrackModeChange(event1) {\n        const track = event1.detail;\n        if (this._storage && isTrackCaptionKind(track) && track !== this._pendingRemoval) {\n            this._saveCaptionsTrack(track);\n        }\n        if (track.mode === \"showing\") {\n            const kinds = isTrackCaptionKind(track) ? [\n                \"captions\",\n                \"subtitles\"\n            ] : [\n                track.kind\n            ];\n            for (const t of this._items){\n                if (t.mode === \"showing\" && t != track && kinds.includes(t.kind)) {\n                    t.mode = \"disabled\";\n                }\n            }\n        }\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"mode-change\", {\n            detail: event1.detail,\n            trigger: event1\n        }));\n    }\n    _saveCaptionsTrack(track) {\n        if (track.mode !== \"disabled\") {\n            this._saveLang(track.language);\n        }\n        this._storage?.setCaptions?.(track.mode === \"showing\");\n    }\n    _saveLang(lang) {\n        this._storage?.setLang?.(this._preferredLang = lang);\n    }\n    setStorage(storage) {\n        this._storage = storage;\n    }\n}\nconst SELECTED = Symbol(\"SELECTED\");\nclass SelectList extends List {\n    get selected() {\n        return this._items.find((item)=>item.selected) ?? null;\n    }\n    get selectedIndex() {\n        return this._items.findIndex((item)=>item.selected);\n    }\n    /** @internal */ [ListSymbol._onRemove](item, trigger) {\n        this[ListSymbol._select](item, false, trigger);\n    }\n    /** @internal */ [ListSymbol._add](item, trigger) {\n        item[SELECTED] = false;\n        Object.defineProperty(item, \"selected\", {\n            get () {\n                return this[SELECTED];\n            },\n            set: (selected)=>{\n                if (this.readonly) return;\n                this[ListSymbol._onUserSelect]?.();\n                this[ListSymbol._select](item, selected);\n            }\n        });\n        super[ListSymbol._add](item, trigger);\n    }\n    /** @internal */ [ListSymbol._select](item, selected, trigger) {\n        if (selected === item?.[SELECTED]) return;\n        const prev = this.selected;\n        if (item) item[SELECTED] = selected;\n        const changed = !selected ? prev === item : prev !== item;\n        if (changed) {\n            if (prev) prev[SELECTED] = false;\n            this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"change\", {\n                detail: {\n                    prev,\n                    current: this.selected\n                },\n                trigger\n            }));\n        }\n    }\n}\nclass AudioTrackList extends SelectList {\n}\nconst SET_AUTO = Symbol(\"SET_AUTO_QUALITY\"), ENABLE_AUTO = Symbol(\"ENABLE_AUTO_QUALITY\");\nconst QualitySymbol = {\n    _setAuto: SET_AUTO,\n    _enableAuto: ENABLE_AUTO\n};\nclass VideoQualityList extends SelectList {\n    constructor(){\n        super(...arguments);\n        this._auto = false;\n        /**\n     * Configures quality switching:\n     *\n     * - `current`: Trigger an immediate quality level switch. This will abort the current fragment\n     * request if any, flush the whole buffer, and fetch fragment matching with current position\n     * and requested quality level.\n     *\n     * - `next`: Trigger a quality level switch for next fragment. This could eventually flush\n     * already buffered next fragment.\n     *\n     * - `load`: Set quality level for next loaded fragment.\n     *\n     * @see {@link https://www.vidstack.io/docs/player/api/video-quality#switch}\n     * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#quality-switch-control-api}\n     */ this.switch = \"current\";\n    }\n    /**\n   * Whether automatic quality selection is enabled.\n   */ get auto() {\n        return this._auto || this.readonly;\n    }\n    /** @internal */ [ListSymbol._onUserSelect]() {\n        this[QualitySymbol._setAuto](false);\n    }\n    /** @internal */ [ListSymbol._onReset](trigger) {\n        this[QualitySymbol._enableAuto] = void 0;\n        this[QualitySymbol._setAuto](false, trigger);\n    }\n    /**\n   * Request automatic quality selection (if supported). This will be a no-op if the list is\n   * `readonly` as that already implies auto-selection.\n   */ autoSelect(trigger) {\n        if (this.readonly || this._auto || !this[QualitySymbol._enableAuto]) return;\n        this[QualitySymbol._enableAuto]?.(trigger);\n        this[QualitySymbol._setAuto](true, trigger);\n    }\n    getBySrc(src) {\n        return this._items.find((quality)=>quality.src === src);\n    }\n    /** @internal */ [QualitySymbol._setAuto](auto, trigger) {\n        if (this._auto === auto) return;\n        this._auto = auto;\n        this.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"auto-change\", {\n            detail: auto,\n            trigger\n        }));\n    }\n}\nfunction sortVideoQualities(qualities, desc) {\n    return [\n        ...qualities\n    ].sort(desc ? compareVideoQualityDesc : compareVideoQualityAsc);\n}\nfunction compareVideoQualityAsc(a, b) {\n    return a.height === b.height ? (a.bitrate ?? 0) - (b.bitrate ?? 0) : a.height - b.height;\n}\nfunction compareVideoQualityDesc(a, b) {\n    return b.height === a.height ? (b.bitrate ?? 0) - (a.bitrate ?? 0) : b.height - a.height;\n}\nfunction isAudioProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"AUDIO\";\n}\nfunction isVideoProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"VIDEO\";\n}\nfunction isHLSProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"HLS\";\n}\nfunction isDASHProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"DASH\";\n}\nfunction isYouTubeProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"YOUTUBE\";\n}\nfunction isVimeoProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"VIMEO\";\n}\nfunction isGoogleCastProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"GOOGLE_CAST\";\n}\nfunction isHTMLAudioElement(element) {\n    return !IS_SERVER && element instanceof HTMLAudioElement;\n}\nfunction isHTMLVideoElement(element) {\n    return !IS_SERVER && element instanceof HTMLVideoElement;\n}\nfunction isHTMLMediaElement(element) {\n    return isHTMLAudioElement(element) || isHTMLVideoElement(element);\n}\nfunction isHTMLIFrameElement(element) {\n    return !IS_SERVER && element instanceof HTMLIFrameElement;\n}\nclass MediaPlayerController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n}\nconst MEDIA_KEY_SHORTCUTS = {\n    togglePaused: \"k Space\",\n    toggleMuted: \"m\",\n    toggleFullscreen: \"f\",\n    togglePictureInPicture: \"i\",\n    toggleCaptions: \"c\",\n    seekBackward: \"j J ArrowLeft\",\n    seekForward: \"l L ArrowRight\",\n    volumeUp: \"ArrowUp\",\n    volumeDown: \"ArrowDown\",\n    speedUp: \">\",\n    slowDown: \"<\"\n};\nconst MODIFIER_KEYS = /* @__PURE__ */ new Set([\n    \"Shift\",\n    \"Alt\",\n    \"Meta\",\n    \"Ctrl\"\n]), BUTTON_SELECTORS = 'button, [role=\"button\"]', IGNORE_SELECTORS = 'input, textarea, select, [contenteditable], [role^=\"menuitem\"], [role=\"timer\"]';\nclass MediaKeyboardController extends MediaPlayerController {\n    constructor(_media){\n        super();\n        this._media = _media;\n        this._timeSlider = null;\n    }\n    onConnect() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onTargetChange.bind(this));\n    }\n    _onTargetChange() {\n        const { keyDisabled, keyTarget } = this.$props;\n        if (keyDisabled()) return;\n        const target = keyTarget() === \"player\" ? this.el : document, $active = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        if (target === this.el) {\n            this.listen(\"focusin\", ()=>$active.set(true));\n            this.listen(\"focusout\", (event1)=>{\n                if (!this.el.contains(event1.target)) $active.set(false);\n            });\n        } else {\n            if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)($active)) $active.set(document.querySelector(\"[data-media-player]\") === this.el);\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"focusin\", (event1)=>{\n                const activePlayer = event1.composedPath().find((el)=>el instanceof Element && el.localName === \"media-player\");\n                if (activePlayer !== void 0) $active.set(this.el === activePlayer);\n            });\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            if (!$active()) return;\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(target, \"keyup\", this._onKeyUp.bind(this));\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(target, \"keydown\", this._onKeyDown.bind(this));\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(target, \"keydown\", this._onPreventVideoKeys.bind(this), {\n                capture: true\n            });\n        });\n    }\n    _onKeyUp(event1) {\n        const focusedEl = document.activeElement;\n        if (!event1.key || !this.$state.canSeek() || focusedEl?.matches(IGNORE_SELECTORS)) {\n            return;\n        }\n        let { method, value } = this._getMatchingMethod(event1);\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {\n            value?.onKeyUp?.({\n                event: event1,\n                player: this._media.player,\n                remote: this._media.remote\n            });\n            value?.callback?.(event1, this._media.remote);\n            return;\n        }\n        if (method?.startsWith(\"seek\")) {\n            event1.preventDefault();\n            event1.stopPropagation();\n            if (this._timeSlider) {\n                this._forwardTimeKeyboardEvent(event1, method === \"seekForward\");\n                this._timeSlider = null;\n            } else {\n                this._media.remote.seek(this._seekTotal, event1);\n                this._seekTotal = void 0;\n            }\n        }\n        if (method?.startsWith(\"volume\")) {\n            const volumeSlider = this.el.querySelector(\"[data-media-volume-slider]\");\n            volumeSlider?.dispatchEvent(new KeyboardEvent(\"keyup\", {\n                key: method === \"volumeUp\" ? \"Up\" : \"Down\",\n                shiftKey: event1.shiftKey,\n                trigger: event1\n            }));\n        }\n    }\n    _onKeyDown(event1) {\n        if (!event1.key || MODIFIER_KEYS.has(event1.key)) return;\n        const focusedEl = document.activeElement;\n        if (focusedEl?.matches(IGNORE_SELECTORS) || (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardClick)(event1) && focusedEl?.matches(BUTTON_SELECTORS)) {\n            return;\n        }\n        let { method, value } = this._getMatchingMethod(event1), isNumberPress = !event1.metaKey && /^[0-9]$/.test(event1.key);\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value) && !isNumberPress) {\n            value?.onKeyDown?.({\n                event: event1,\n                player: this._media.player,\n                remote: this._media.remote\n            });\n            value?.callback?.(event1, this._media.remote);\n            return;\n        }\n        if (!method && isNumberPress) {\n            event1.preventDefault();\n            event1.stopPropagation();\n            this._media.remote.seek(this.$state.duration() / 10 * Number(event1.key), event1);\n            return;\n        }\n        if (!method) return;\n        event1.preventDefault();\n        event1.stopPropagation();\n        switch(method){\n            case \"seekForward\":\n            case \"seekBackward\":\n                this._seeking(event1, method, method === \"seekForward\");\n                break;\n            case \"volumeUp\":\n            case \"volumeDown\":\n                const volumeSlider = this.el.querySelector(\"[data-media-volume-slider]\");\n                if (volumeSlider) {\n                    volumeSlider.dispatchEvent(new KeyboardEvent(\"keydown\", {\n                        key: method === \"volumeUp\" ? \"Up\" : \"Down\",\n                        shiftKey: event1.shiftKey,\n                        trigger: event1\n                    }));\n                } else {\n                    const value2 = event1.shiftKey ? 0.1 : 0.05;\n                    this._media.remote.changeVolume(this.$state.volume() + (method === \"volumeUp\" ? +value2 : -value2), event1);\n                }\n                break;\n            case \"toggleFullscreen\":\n                this._media.remote.toggleFullscreen(\"prefer-media\", event1);\n                break;\n            case \"speedUp\":\n            case \"slowDown\":\n                const playbackRate = this.$state.playbackRate();\n                this._media.remote.changePlaybackRate(Math.max(0.25, Math.min(2, playbackRate + (method === \"speedUp\" ? 0.25 : -0.25))), event1);\n                break;\n            default:\n                this._media.remote[method]?.(event1);\n        }\n        this.$state.lastKeyboardAction.set({\n            action: method,\n            event: event1\n        });\n    }\n    _onPreventVideoKeys(event1) {\n        if (isHTMLMediaElement(event1.target) && this._getMatchingMethod(event1).method) {\n            event1.preventDefault();\n        }\n    }\n    _getMatchingMethod(event1) {\n        const keyShortcuts = {\n            ...this.$props.keyShortcuts(),\n            ...this._media.ariaKeys\n        };\n        const method = Object.keys(keyShortcuts).find((method2)=>{\n            const value = keyShortcuts[method2], keys = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value) ? value.join(\" \") : (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value) ? value : value?.keys;\n            const combinations = ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(keys) ? keys : keys?.split(\" \"))?.map((key)=>replaceSymbolKeys(key).replace(/Control/g, \"Ctrl\").split(\"+\"));\n            return combinations?.some((combo)=>{\n                const modifierKeys = new Set(combo.filter((key)=>MODIFIER_KEYS.has(key)));\n                for (const modKey of MODIFIER_KEYS){\n                    const modKeyProp = modKey.toLowerCase() + \"Key\";\n                    if (!modifierKeys.has(modKey) && event1[modKeyProp]) {\n                        return false;\n                    }\n                }\n                return combo.every((key)=>{\n                    return MODIFIER_KEYS.has(key) ? event1[key.toLowerCase() + \"Key\"] : event1.key === key.replace(\"Space\", \" \");\n                });\n            });\n        });\n        return {\n            method,\n            value: method ? keyShortcuts[method] : null\n        };\n    }\n    _calcSeekAmount(event1, type) {\n        const seekBy = event1.shiftKey ? 10 : 5;\n        return this._seekTotal = Math.max(0, Math.min((this._seekTotal ?? this.$state.currentTime()) + (type === \"seekForward\" ? +seekBy : -seekBy), this.$state.duration()));\n    }\n    _forwardTimeKeyboardEvent(event1, forward) {\n        this._timeSlider?.dispatchEvent(new KeyboardEvent(event1.type, {\n            key: !forward ? \"Left\" : \"Right\",\n            shiftKey: event1.shiftKey,\n            trigger: event1\n        }));\n    }\n    _seeking(event1, type, forward) {\n        if (!this.$state.canSeek()) return;\n        if (!this._timeSlider) {\n            this._timeSlider = this.el.querySelector(\"[data-media-time-slider]\");\n        }\n        if (this._timeSlider) {\n            this._forwardTimeKeyboardEvent(event1, forward);\n        } else {\n            this._media.remote.seeking(this._calcSeekAmount(event1, type), event1);\n        }\n    }\n}\nconst SYMBOL_KEY_MAP = [\n    \"!\",\n    \"@\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"^\",\n    \"&\",\n    \"*\",\n    \"(\",\n    \")\"\n];\nfunction replaceSymbolKeys(key) {\n    return key.replace(/Shift\\+(\\d)/g, (_, num)=>SYMBOL_KEY_MAP[num - 1]);\n}\nclass ARIAKeyShortcuts extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(_shortcut){\n        super();\n        this._shortcut = _shortcut;\n    }\n    onAttach(el) {\n        const { $props, ariaKeys } = useMediaContext(), keys = el.getAttribute(\"aria-keyshortcuts\");\n        if (keys) {\n            ariaKeys[this._shortcut] = keys;\n            if (!IS_SERVER) {\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n                    delete ariaKeys[this._shortcut];\n                });\n            }\n            return;\n        }\n        const shortcuts = $props.keyShortcuts()[this._shortcut];\n        if (shortcuts) {\n            const keys2 = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(shortcuts) ? shortcuts.join(\" \") : (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(shortcuts) ? shortcuts : shortcuts?.keys;\n            el.setAttribute(\"aria-keyshortcuts\", (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(keys2) ? keys2.join(\" \") : keys2);\n        }\n    }\n}\nclass MediaControls extends MediaPlayerController {\n    constructor(){\n        super(...arguments);\n        this._idleTimer = -2;\n        this._pausedTracking = false;\n        this._hideOnMouseLeave = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        this._isMouseOutside = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        this._focusedItem = null;\n        this._canIdle = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true);\n        /**\n     * The default amount of delay in milliseconds while media playback is progressing without user\n     * activity to indicate an idle state (i.e., hide controls).\n     *\n     * @defaultValue 2000\n     */ this.defaultDelay = 2e3;\n    }\n    /**\n   * Whether controls can hide after a delay in user interaction. If this is false, controls will\n   * not hide and be user controlled.\n   */ get canIdle() {\n        return this._canIdle();\n    }\n    set canIdle(canIdle) {\n        this._canIdle.set(canIdle);\n    }\n    /**\n   * Whether controls visibility should be toggled when the mouse enters and leaves the player\n   * container.\n   *\n   * @defaultValue false\n   */ get hideOnMouseLeave() {\n        const { hideControlsOnMouseLeave } = this.$props;\n        return this._hideOnMouseLeave() || hideControlsOnMouseLeave();\n    }\n    set hideOnMouseLeave(hide) {\n        this._hideOnMouseLeave.set(hide);\n    }\n    /**\n   * Whether media controls are currently visible.\n   */ get showing() {\n        return this.$state.controlsVisible();\n    }\n    /**\n   * Show controls.\n   */ show(delay = 0, trigger) {\n        this._clearIdleTimer();\n        if (!this._pausedTracking) {\n            this._changeVisibility(true, delay, trigger);\n        }\n    }\n    /**\n   * Hide controls.\n   */ hide(delay = this.defaultDelay, trigger) {\n        this._clearIdleTimer();\n        if (!this._pausedTracking) {\n            this._changeVisibility(false, delay, trigger);\n        }\n    }\n    /**\n   * Whether all idle tracking on controls should be paused until resumed again.\n   */ pause(trigger) {\n        this._pausedTracking = true;\n        this._clearIdleTimer();\n        this._changeVisibility(true, 0, trigger);\n    }\n    resume(trigger) {\n        this._pausedTracking = false;\n        if (this.$state.paused()) return;\n        this._changeVisibility(false, this.defaultDelay, trigger);\n    }\n    onConnect() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._init.bind(this));\n    }\n    _init() {\n        const { viewType } = this.$state;\n        if (!this._canIdle()) return;\n        if (viewType() === \"audio\") {\n            this.show();\n            return;\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchMouse.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPaused.bind(this));\n        const onPlay = this._onPlay.bind(this), onPause = this._onPause.bind(this);\n        this.listen(\"can-play\", (event1)=>this.show(0, event1));\n        this.listen(\"play\", onPlay);\n        this.listen(\"pause\", onPause);\n        this.listen(\"auto-play-fail\", onPause);\n    }\n    _watchMouse() {\n        const { started, pointer, paused } = this.$state;\n        if (!started() || pointer() !== \"fine\") return;\n        const shouldHideOnMouseLeave = this.hideOnMouseLeave;\n        if (!shouldHideOnMouseLeave || !this._isMouseOutside()) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n                if (!paused()) this.listen(\"pointermove\", this._onStopIdle.bind(this));\n            });\n        }\n        if (shouldHideOnMouseLeave) {\n            this.listen(\"mouseenter\", this._onMouseEnter.bind(this));\n            this.listen(\"mouseleave\", this._onMouseLeave.bind(this));\n        }\n    }\n    _watchPaused() {\n        const { paused, started, autoPlayError } = this.$state;\n        if (paused() || autoPlayError() && !started()) return;\n        const onStopIdle = this._onStopIdle.bind(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const pointer = this.$state.pointer(), isTouch = pointer === \"coarse\", events = [\n                isTouch ? \"touchend\" : \"pointerup\",\n                \"keydown\"\n            ];\n            for (const eventType of events){\n                this.listen(eventType, onStopIdle, {\n                    passive: false\n                });\n            }\n        });\n    }\n    _onPlay(event1) {\n        this.show(0, event1);\n        this.hide(void 0, event1);\n    }\n    _onPause(event1) {\n        this.show(0, event1);\n    }\n    _onMouseEnter(event1) {\n        this._isMouseOutside.set(false);\n        this.show(0, event1);\n        this.hide(void 0, event1);\n    }\n    _onMouseLeave(event1) {\n        this._isMouseOutside.set(true);\n        this.hide(0, event1);\n    }\n    _clearIdleTimer() {\n        window.clearTimeout(this._idleTimer);\n        this._idleTimer = -1;\n    }\n    _onStopIdle(event1) {\n        if (// @ts-expect-error\n        event1.MEDIA_GESTURE || this._pausedTracking || isTouchPinchEvent(event1)) {\n            return;\n        }\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardEvent)(event1)) {\n            if (event1.key === \"Escape\") {\n                this.el?.focus();\n                this._focusedItem = null;\n            } else if (this._focusedItem) {\n                event1.preventDefault();\n                requestAnimationFrame(()=>{\n                    this._focusedItem?.focus();\n                    this._focusedItem = null;\n                });\n            }\n        }\n        this.show(0, event1);\n        this.hide(this.defaultDelay, event1);\n    }\n    _changeVisibility(visible, delay, trigger) {\n        if (delay === 0) {\n            this._onChange(visible, trigger);\n            return;\n        }\n        this._idleTimer = window.setTimeout(()=>{\n            if (!this.scope) return;\n            this._onChange(visible && !this._pausedTracking, trigger);\n        }, delay);\n    }\n    _onChange(visible, trigger) {\n        if (this.$state.controlsVisible() === visible) return;\n        this.$state.controlsVisible.set(visible);\n        if (!visible && document.activeElement && this.el?.contains(document.activeElement)) {\n            this._focusedItem = document.activeElement;\n            requestAnimationFrame(()=>{\n                this.el?.focus({\n                    preventScroll: true\n                });\n            });\n        }\n        this.dispatch(\"controls-change\", {\n            detail: visible,\n            trigger\n        });\n    }\n}\nconst CAN_FULLSCREEN = _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.fullscreenEnabled;\nclass FullscreenController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(){\n        super(...arguments);\n        /**\n     * Tracks whether we're the active fullscreen event listener. Fullscreen events can only be\n     * listened to globally on the document so we need to know if they relate to the current host\n     * element or not.\n     */ this._listening = false;\n        this._active = false;\n    }\n    get active() {\n        return this._active;\n    }\n    get supported() {\n        return CAN_FULLSCREEN;\n    }\n    onConnect() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.fscreen, \"fullscreenchange\", this._onChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.fscreen, \"fullscreenerror\", this._onError.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._onDisconnect.bind(this));\n    }\n    async _onDisconnect() {\n        if (CAN_FULLSCREEN) await this.exit();\n    }\n    _onChange(event1) {\n        const active = isFullscreen(this.el);\n        if (active === this._active) return;\n        if (!active) this._listening = false;\n        this._active = active;\n        this.dispatch(\"fullscreen-change\", {\n            detail: active,\n            trigger: event1\n        });\n    }\n    _onError(event1) {\n        if (!this._listening) return;\n        this.dispatch(\"fullscreen-error\", {\n            detail: null,\n            trigger: event1\n        });\n        this._listening = false;\n    }\n    async enter() {\n        try {\n            this._listening = true;\n            if (!this.el || isFullscreen(this.el)) return;\n            assertFullscreenAPI();\n            return _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.requestFullscreen(this.el);\n        } catch (error) {\n            this._listening = false;\n            throw error;\n        }\n    }\n    async exit() {\n        if (!this.el || !isFullscreen(this.el)) return;\n        assertFullscreenAPI();\n        return _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.exitFullscreen();\n    }\n}\nfunction canFullscreen() {\n    return CAN_FULLSCREEN;\n}\nfunction isFullscreen(host) {\n    if (_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.fullscreenElement === host) return true;\n    try {\n        return host.matches(// @ts-expect-error - `fullscreenPseudoClass` is missing from `@types/fscreen`.\n        _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.fullscreenPseudoClass);\n    } catch (error) {\n        return false;\n    }\n}\nfunction assertFullscreenAPI() {\n    if (CAN_FULLSCREEN) return;\n    throw Error(\"[vidstack] fullscreen API is not enabled or supported in this environment\");\n}\nconst _ScreenOrientationController = class _ScreenOrientationController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(){\n        super(...arguments);\n        this._type = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(this._getScreenOrientation());\n        this._locked = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n    }\n    /**\n   * The current screen orientation type.\n   *\n   * @signal\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}\n   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks\n   */ get type() {\n        return this._type();\n    }\n    /**\n   * Whether the screen orientation is currently locked.\n   *\n   * @signal\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}\n   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks\n   */ get locked() {\n        return this._locked();\n    }\n    /**\n   * Whether the viewport is in a portrait orientation.\n   *\n   * @signal\n   */ get portrait() {\n        return this._type().startsWith(\"portrait\");\n    }\n    /**\n   * Whether the viewport is in a landscape orientation.\n   *\n   * @signal\n   */ get landscape() {\n        return this._type().startsWith(\"landscape\");\n    }\n    /**\n   * Whether the native Screen Orientation API is available.\n   */ get supported() {\n        return _ScreenOrientationController.supported;\n    }\n    onConnect() {\n        if (this.supported) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(screen.orientation, \"change\", this._onOrientationChange.bind(this));\n        } else {\n            const query = window.matchMedia(\"(orientation: landscape)\");\n            query.onchange = this._onOrientationChange.bind(this);\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>query.onchange = null);\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._onDisconnect.bind(this));\n    }\n    async _onDisconnect() {\n        if (this.supported && this._locked()) await this.unlock();\n    }\n    _onOrientationChange(event1) {\n        this._type.set(this._getScreenOrientation());\n        this.dispatch(\"orientation-change\", {\n            detail: {\n                orientation: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._type),\n                lock: this._currentLock\n            },\n            trigger: event1\n        });\n    }\n    /**\n   * Locks the orientation of the screen to the desired orientation type using the\n   * Screen Orientation API.\n   *\n   * @param lockType - The screen lock orientation type.\n   * @throws Error - If screen orientation API is unavailable.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}\n   * @see {@link https://w3c.github.io/screen-orientation}\n   */ async lock(lockType) {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._locked) || this._currentLock === lockType) return;\n        this._assertScreenOrientationAPI();\n        await screen.orientation.lock(lockType);\n        this._locked.set(true);\n        this._currentLock = lockType;\n    }\n    /**\n   * Unlocks the orientation of the screen to it's default state using the Screen Orientation\n   * API. This method will throw an error if the API is unavailable.\n   *\n   * @throws Error - If screen orientation API is unavailable.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}\n   * @see {@link https://w3c.github.io/screen-orientation}\n   */ async unlock() {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._locked)) return;\n        this._assertScreenOrientationAPI();\n        this._currentLock = void 0;\n        await screen.orientation.unlock();\n        this._locked.set(false);\n    }\n    _assertScreenOrientationAPI() {\n        if (this.supported) return;\n        throw Error(\"[vidstack] screen orientation API is not available\");\n    }\n    _getScreenOrientation() {\n        if (IS_SERVER) return \"portrait-primary\";\n        if (this.supported) return window.screen.orientation.type;\n        return window.innerWidth >= window.innerHeight ? \"landscape-primary\" : \"portrait-primary\";\n    }\n};\n/**\n * Whether the native Screen Orientation API is available.\n */ _ScreenOrientationController.supported = canOrientScreen();\nlet ScreenOrientationController = _ScreenOrientationController;\nclass AudioProviderLoader {\n    constructor(){\n        this.name = \"audio\";\n    }\n    canPlay(src) {\n        if (!isAudioSrc(src)) return false;\n        return IS_SERVER || !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) || src.type === \"?\" || canPlayAudioType(this.target, src.type);\n    }\n    mediaType() {\n        return \"audio\";\n    }\n    async load(ctx) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load audio provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<audio>` element was not found - did you forget to include `<media-provider>`?\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-Cjt-9Nqm.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Cjt-9Nqm.js\"))).AudioProvider(this.target, ctx);\n    }\n}\nclass VideoProviderLoader {\n    constructor(){\n        this.name = \"video\";\n    }\n    canPlay(src) {\n        if (!isVideoSrc(src)) return false;\n        return IS_SERVER || !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) || src.type === \"?\" || canPlayVideoType(this.target, src.type);\n    }\n    mediaType() {\n        return \"video\";\n    }\n    async load(ctx) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load video provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<video>` element was not found - did you forget to include media provider?\");\n        }\n        return new (await Promise.resolve().then(function() {\n            return provider$1;\n        })).VideoProvider(this.target, ctx);\n    }\n}\nconst _HLSProviderLoader = class _HLSProviderLoader extends VideoProviderLoader {\n    constructor(){\n        super(...arguments);\n        this.name = \"hls\";\n    }\n    canPlay(src) {\n        return _HLSProviderLoader.supported && isHLSSrc(src);\n    }\n    async load(context) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load hls provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<video>` element was not found - did you forget to include `<media-provider>`?\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-Dci4Ce5n.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dci4Ce5n.js\"))).HLSProvider(this.target, context);\n    }\n};\n_HLSProviderLoader.supported = isHLSSupported();\nlet HLSProviderLoader = _HLSProviderLoader;\nlet audioContext = null, gainNodes = [], elAudioSources = [];\nfunction getOrCreateAudioCtx() {\n    return audioContext ??= new AudioContext();\n}\nfunction createGainNode() {\n    const audioCtx = getOrCreateAudioCtx(), gainNode = audioCtx.createGain();\n    gainNode.connect(audioCtx.destination);\n    gainNodes.push(gainNode);\n    return gainNode;\n}\nfunction createElementSource(el, gainNode) {\n    const audioCtx = getOrCreateAudioCtx(), src = audioCtx.createMediaElementSource(el);\n    if (gainNode) {\n        src.connect(gainNode);\n    }\n    elAudioSources.push(src);\n    return src;\n}\nfunction destroyGainNode(node) {\n    const idx = gainNodes.indexOf(node);\n    if (idx !== -1) {\n        gainNodes.splice(idx, 1);\n        node.disconnect();\n        freeAudioCtxWhenAllResourcesFreed();\n    }\n}\nfunction destroyElementSource(src) {\n    const idx = elAudioSources.indexOf(src);\n    if (idx !== -1) {\n        elAudioSources.splice(idx, 1);\n        src.disconnect();\n        freeAudioCtxWhenAllResourcesFreed();\n    }\n}\nfunction freeAudioCtxWhenAllResourcesFreed() {\n    if (audioContext && gainNodes.length === 0 && elAudioSources.length === 0) {\n        audioContext.close().then(()=>{\n            audioContext = null;\n        });\n    }\n}\nclass AudioGain {\n    constructor(_media, _onChange){\n        this._media = _media;\n        this._onChange = _onChange;\n        this._gainNode = null;\n        this._srcAudioNode = null;\n    }\n    get currentGain() {\n        return this._gainNode?.gain?.value ?? null;\n    }\n    get supported() {\n        return true;\n    }\n    setGain(gain) {\n        const currGain = this.currentGain;\n        if (gain === this.currentGain) {\n            return;\n        }\n        if (gain === 1 && currGain !== 1) {\n            this.removeGain();\n            return;\n        }\n        if (!this._gainNode) {\n            this._gainNode = createGainNode();\n            if (this._srcAudioNode) {\n                this._srcAudioNode.connect(this._gainNode);\n            }\n        }\n        if (!this._srcAudioNode) {\n            this._srcAudioNode = createElementSource(this._media, this._gainNode);\n        }\n        this._gainNode.gain.value = gain;\n        this._onChange(gain);\n    }\n    removeGain() {\n        if (!this._gainNode) return;\n        if (this._srcAudioNode) {\n            this._srcAudioNode.connect(getOrCreateAudioCtx().destination);\n        }\n        this._destroyGainNode();\n        this._onChange(null);\n    }\n    destroy() {\n        this._destroySrcNode();\n        this._destroyGainNode();\n    }\n    _destroySrcNode() {\n        if (!this._srcAudioNode) return;\n        try {\n            destroyElementSource(this._srcAudioNode);\n        } catch (e) {} finally{\n            this._srcAudioNode = null;\n        }\n    }\n    _destroyGainNode() {\n        if (!this._gainNode) return;\n        try {\n            destroyGainNode(this._gainNode);\n        } catch (e) {} finally{\n            this._gainNode = null;\n        }\n    }\n}\nconst PAGE_EVENTS = [\n    \"focus\",\n    \"blur\",\n    \"visibilitychange\",\n    \"pageshow\",\n    \"pagehide\"\n];\nclass PageVisibility {\n    constructor(){\n        this._state = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(determinePageState());\n        this._visibility = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(IS_SERVER ? \"visible\" : document.visibilityState);\n    }\n    connect() {\n        for (const eventType of PAGE_EVENTS){\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(window, eventType, this._handlePageEvent.bind(this));\n        }\n        if (IS_SAFARI) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(window, \"beforeunload\", (event1)=>{\n                this._safariBeforeUnloadTimeout = setTimeout(()=>{\n                    if (!(event1.defaultPrevented || event1.returnValue.length > 0)) {\n                        this._state.set(\"hidden\");\n                        this._visibility.set(\"hidden\");\n                    }\n                }, 0);\n            });\n        }\n    }\n    /**\n   * The current page state. Important to note we only account for a subset of page states, as\n   * the rest aren't valuable to the player at the moment.\n   *\n   * - **active:** A page is in the active state if it is visible and has input focus.\n   * - **passive:** A page is in the passive state if it is visible and does not have input focus.\n   * - **hidden:** A page is in the hidden state if it is not visible.\n   *\n   * @see https://developers.google.com/web/updates/2018/07/page-lifecycle-api#states\n   */ get pageState() {\n        return this._state();\n    }\n    /**\n   * The current document visibility state.\n   *\n   * - **visible:** The page content may be at least partially visible. In practice, this means that\n   * the page is the foreground tab of a non-minimized window.\n   * - **hidden:** The page content is not visible to the user. In practice this means that the\n   * document is either a background tab or part of a minimized window, or the OS screen lock is\n   * active.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState\n   */ get visibility() {\n        return this._visibility();\n    }\n    _handlePageEvent(event1) {\n        if (IS_SAFARI) window.clearTimeout(this._safariBeforeUnloadTimeout);\n        if (event1.type !== \"blur\" || this._state() === \"active\") {\n            this._state.set(determinePageState(event1));\n            this._visibility.set(document.visibilityState == \"hidden\" ? \"hidden\" : \"visible\");\n        }\n    }\n}\nfunction determinePageState(event1) {\n    if (IS_SERVER) return \"hidden\";\n    if (event1?.type === \"blur\" || document.visibilityState === \"hidden\") return \"hidden\";\n    if (document.hasFocus()) return \"active\";\n    return \"passive\";\n}\nclass RAFLoop {\n    constructor(_callback){\n        this._callback = _callback;\n    }\n    _start() {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(this._id)) return;\n        this._loop();\n    }\n    _stop() {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(this._id)) window.cancelAnimationFrame(this._id);\n        this._id = void 0;\n    }\n    _loop() {\n        this._id = window.requestAnimationFrame(()=>{\n            if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(this._id)) return;\n            this._callback();\n            this._loop();\n        });\n    }\n}\nclass HTMLMediaEvents {\n    constructor(_provider, _ctx){\n        this._provider = _provider;\n        this._ctx = _ctx;\n        this._disposal = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useDisposalBin)();\n        this._waiting = false;\n        this._attachedLoadStart = false;\n        this._attachedCanPlay = false;\n        this._timeRAF = new RAFLoop(this._onAnimationFrame.bind(this));\n        this._pageVisibility = new PageVisibility();\n        /**\n     * The `timeupdate` event fires surprisingly infrequently during playback, meaning your progress\n     * bar (or whatever else is synced to the currentTime) moves in a choppy fashion. This helps\n     * resolve that by retrieving time updates in a request animation frame loop.\n     */ this._lastSeenTime = 0;\n        this._seekedTo = -1;\n        this._handlers = /* @__PURE__ */ new Map();\n        this._handleDevEvent = this._onDevEvent.bind(this);\n        this._attachInitialListeners();\n        this._pageVisibility.connect();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._attachTimeUpdate.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._onDispose.bind(this));\n    }\n    get _media() {\n        return this._provider.media;\n    }\n    get _notify() {\n        return this._ctx.delegate._notify;\n    }\n    _onDispose() {\n        this._attachedLoadStart = false;\n        this._attachedCanPlay = false;\n        this._timeRAF._stop();\n        this._disposal.empty();\n    }\n    _onAnimationFrame() {\n        const newTime = this._media.currentTime;\n        const didStutter = IS_SAFARI && newTime - this._seekedTo < 0.35;\n        if (!didStutter && this._lastSeenTime !== newTime) {\n            this._updateCurrentTime(newTime);\n            this._lastSeenTime = newTime;\n        }\n    }\n    _attachInitialListeners() {\n        {\n            this._ctx.logger?.info(\"attaching initial listeners\");\n        }\n        this._attachEventListener(\"loadstart\", this._onLoadStart);\n        this._attachEventListener(\"abort\", this._onAbort);\n        this._attachEventListener(\"emptied\", this._onEmptied);\n        this._attachEventListener(\"error\", this._onError);\n        this._attachEventListener(\"volumechange\", this._onVolumeChange);\n        this._ctx.logger?.debug(\"attached initial media event listeners\");\n    }\n    _attachLoadStartListeners() {\n        if (this._attachedLoadStart) return;\n        {\n            this._ctx.logger?.info(\"attaching load start listeners\");\n        }\n        this._disposal.add(this._attachEventListener(\"loadeddata\", this._onLoadedData), this._attachEventListener(\"loadedmetadata\", this._onLoadedMetadata), this._attachEventListener(\"canplay\", this._onCanPlay), this._attachEventListener(\"canplaythrough\", this._onCanPlayThrough), this._attachEventListener(\"durationchange\", this._onDurationChange), this._attachEventListener(\"play\", this._onPlay), this._attachEventListener(\"progress\", this._onProgress), this._attachEventListener(\"stalled\", this._onStalled), this._attachEventListener(\"suspend\", this._onSuspend), this._attachEventListener(\"ratechange\", this._onRateChange));\n        this._attachedLoadStart = true;\n    }\n    _attachCanPlayListeners() {\n        if (this._attachedCanPlay) return;\n        {\n            this._ctx.logger?.info(\"attaching can play listeners\");\n        }\n        this._disposal.add(this._attachEventListener(\"pause\", this._onPause), this._attachEventListener(\"playing\", this._onPlaying), this._attachEventListener(\"seeked\", this._onSeeked), this._attachEventListener(\"seeking\", this._onSeeking), this._attachEventListener(\"ended\", this._onEnded), this._attachEventListener(\"waiting\", this._onWaiting));\n        this._attachedCanPlay = true;\n    }\n    _attachEventListener(eventType, handler) {\n        this._handlers.set(eventType, handler);\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._media, eventType, this._handleDevEvent);\n    }\n    _onDevEvent(event2) {\n        this._ctx.logger?.debugGroup(`\\u{1F4FA} provider fired \\`${event2.type}\\``).labelledLog(\"Provider\", this._provider).labelledLog(\"Event\", event2).labelledLog(\"Media Store\", {\n            ...this._ctx.$state\n        }).dispatch();\n        this._handlers.get(event2.type)?.call(this, event2);\n    }\n    _updateCurrentTime(time, trigger) {\n        const newTime = Math.min(time, this._ctx.$state.seekableEnd());\n        this._notify(\"time-change\", newTime, trigger);\n    }\n    _onLoadStart(event2) {\n        if (this._media.networkState === 3) {\n            this._onAbort(event2);\n            return;\n        }\n        this._attachLoadStartListeners();\n        this._notify(\"load-start\", void 0, event2);\n    }\n    _onAbort(event2) {\n        this._notify(\"abort\", void 0, event2);\n    }\n    _onEmptied() {\n        this._notify(\"emptied\", void 0, event);\n    }\n    _onLoadedData(event2) {\n        this._notify(\"loaded-data\", void 0, event2);\n    }\n    _onLoadedMetadata(event2) {\n        this._lastSeenTime = 0;\n        this._seekedTo = -1;\n        this._attachCanPlayListeners();\n        this._notify(\"loaded-metadata\", void 0, event2);\n        if (IS_IOS || IS_SAFARI && isHLSSrc(this._ctx.$state.source())) {\n            this._ctx.delegate._ready(this._getCanPlayDetail(), event2);\n        }\n    }\n    _getCanPlayDetail() {\n        return {\n            provider: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$provider),\n            duration: this._media.duration,\n            buffered: this._media.buffered,\n            seekable: this._media.seekable\n        };\n    }\n    _onPlay(event2) {\n        if (!this._ctx.$state.canPlay) return;\n        this._notify(\"play\", void 0, event2);\n    }\n    _onPause(event2) {\n        if (this._media.readyState === 1 && !this._waiting) return;\n        this._waiting = false;\n        this._timeRAF._stop();\n        this._notify(\"pause\", void 0, event2);\n    }\n    _onCanPlay(event2) {\n        this._ctx.delegate._ready(this._getCanPlayDetail(), event2);\n    }\n    _onCanPlayThrough(event2) {\n        if (this._ctx.$state.started()) return;\n        this._notify(\"can-play-through\", this._getCanPlayDetail(), event2);\n    }\n    _onPlaying(event2) {\n        if (this._media.paused) return;\n        this._waiting = false;\n        this._notify(\"playing\", void 0, event2);\n        this._timeRAF._start();\n    }\n    _onStalled(event2) {\n        this._notify(\"stalled\", void 0, event2);\n        if (this._media.readyState < 3) {\n            this._waiting = true;\n            this._notify(\"waiting\", void 0, event2);\n        }\n    }\n    _onWaiting(event2) {\n        if (this._media.readyState < 3) {\n            this._waiting = true;\n            this._notify(\"waiting\", void 0, event2);\n        }\n    }\n    _onEnded(event2) {\n        this._timeRAF._stop();\n        this._updateCurrentTime(this._media.duration, event2);\n        this._notify(\"end\", void 0, event2);\n        if (this._ctx.$state.loop()) {\n            const hasCustomControls = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNil)(this._media.controls);\n            if (hasCustomControls) this._media.controls = false;\n        }\n    }\n    _attachTimeUpdate() {\n        const isPaused = this._ctx.$state.paused(), isPageHidden = this._pageVisibility.visibility === \"hidden\", shouldListenToTimeUpdates = isPaused || isPageHidden;\n        if (shouldListenToTimeUpdates) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._media, \"timeupdate\", this._onTimeUpdate.bind(this));\n        }\n    }\n    _onTimeUpdate(event2) {\n        this._updateCurrentTime(this._media.currentTime, event2);\n    }\n    _onDurationChange(event2) {\n        if (this._ctx.$state.ended()) {\n            this._updateCurrentTime(this._media.duration, event2);\n        }\n        this._notify(\"duration-change\", this._media.duration, event2);\n    }\n    _onVolumeChange(event2) {\n        const detail = {\n            volume: this._media.volume,\n            muted: this._media.muted\n        };\n        this._notify(\"volume-change\", detail, event2);\n    }\n    _onSeeked(event2) {\n        this._seekedTo = this._media.currentTime;\n        this._updateCurrentTime(this._media.currentTime, event2);\n        this._notify(\"seeked\", this._media.currentTime, event2);\n        if (Math.trunc(this._media.currentTime) === Math.trunc(this._media.duration) && getNumberOfDecimalPlaces(this._media.duration) > getNumberOfDecimalPlaces(this._media.currentTime)) {\n            this._updateCurrentTime(this._media.duration, event2);\n            if (!this._media.ended) {\n                this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"media-play-request\", {\n                    trigger: event2\n                }));\n            }\n        }\n    }\n    _onSeeking(event2) {\n        this._notify(\"seeking\", this._media.currentTime, event2);\n    }\n    _onProgress(event2) {\n        const detail = {\n            buffered: this._media.buffered,\n            seekable: this._media.seekable\n        };\n        this._notify(\"progress\", detail, event2);\n    }\n    _onSuspend(event2) {\n        this._notify(\"suspend\", void 0, event2);\n    }\n    _onRateChange(event2) {\n        this._notify(\"rate-change\", this._media.playbackRate, event2);\n    }\n    _onError(event2) {\n        const error = this._media.error;\n        if (!error) return;\n        const detail = {\n            message: error.message,\n            code: error.code,\n            mediaError: error\n        };\n        this._notify(\"error\", detail, event2);\n    }\n}\nclass NativeAudioTracks {\n    constructor(_provider, _ctx){\n        this._provider = _provider;\n        this._ctx = _ctx;\n        this._nativeTracks.onaddtrack = this._onAddNativeTrack.bind(this);\n        this._nativeTracks.onremovetrack = this._onRemoveNativeTrack.bind(this);\n        this._nativeTracks.onchange = this._onChangeNativeTrack.bind(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.audioTracks, \"change\", this._onChangeTrack.bind(this));\n    }\n    get _nativeTracks() {\n        return this._provider.media.audioTracks;\n    }\n    _onAddNativeTrack(event1) {\n        const _track = event1.track;\n        if (_track.label === \"\") return;\n        const id = _track.id.toString() || `native-audio-${this._ctx.audioTracks.length}`, audioTrack = {\n            id,\n            label: _track.label,\n            language: _track.language,\n            kind: _track.kind,\n            selected: false\n        };\n        this._ctx.audioTracks[ListSymbol._add](audioTrack, event1);\n        if (_track.enabled) audioTrack.selected = true;\n    }\n    _onRemoveNativeTrack(event1) {\n        const track = this._ctx.audioTracks.getById(event1.track.id);\n        if (track) this._ctx.audioTracks[ListSymbol._remove](track, event1);\n    }\n    _onChangeNativeTrack(event1) {\n        let enabledTrack = this._getEnabledNativeTrack();\n        if (!enabledTrack) return;\n        const track = this._ctx.audioTracks.getById(enabledTrack.id);\n        if (track) this._ctx.audioTracks[ListSymbol._select](track, true, event1);\n    }\n    _getEnabledNativeTrack() {\n        return Array.from(this._nativeTracks).find((track)=>track.enabled);\n    }\n    _onChangeTrack(event1) {\n        const { current } = event1.detail;\n        if (!current) return;\n        const track = this._nativeTracks.getTrackById(current.id);\n        if (track) {\n            const prev = this._getEnabledNativeTrack();\n            if (prev) prev.enabled = false;\n            track.enabled = true;\n        }\n    }\n}\nclass HTMLMediaProvider {\n    constructor(_media, _ctx){\n        this._media = _media;\n        this._ctx = _ctx;\n        this.scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createScope)();\n        this._currentSrc = null;\n        this.audioGain = new AudioGain(this._media, (gain)=>{\n            this._ctx.delegate._notify(\"audio-gain-change\", gain);\n        });\n    }\n    setup() {\n        new HTMLMediaEvents(this, this._ctx);\n        if (\"audioTracks\" in this.media) new NativeAudioTracks(this, this._ctx);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this.audioGain.destroy();\n            this._media.srcObject = null;\n            this._media.removeAttribute(\"src\");\n            for (const source of this._media.querySelectorAll(\"source\"))source.remove();\n            this._media.load();\n        });\n    }\n    get type() {\n        return \"\";\n    }\n    get media() {\n        return this._media;\n    }\n    get currentSrc() {\n        return this._currentSrc;\n    }\n    setPlaybackRate(rate) {\n        this._media.playbackRate = rate;\n    }\n    async play() {\n        return this._media.play();\n    }\n    async pause() {\n        return this._media.pause();\n    }\n    setMuted(muted) {\n        this._media.muted = muted;\n    }\n    setVolume(volume) {\n        this._media.volume = volume;\n    }\n    setCurrentTime(time) {\n        this._media.currentTime = time;\n    }\n    setPlaysInline(inline) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this._media, \"playsinline\", inline);\n    }\n    async loadSource({ src, type }, preload) {\n        this._media.preload = preload || \"\";\n        if (isMediaStream(src)) {\n            this._removeSource();\n            this._media.srcObject = src;\n        } else {\n            this._media.srcObject = null;\n            if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) {\n                if (type !== \"?\") {\n                    this._appendSource({\n                        src,\n                        type\n                    });\n                } else {\n                    this._removeSource();\n                    this._media.src = this._appendMediaFragment(src);\n                }\n            } else {\n                this._removeSource();\n                this._media.src = window.URL.createObjectURL(src);\n            }\n        }\n        this._media.load();\n        this._currentSrc = {\n            src,\n            type\n        };\n    }\n    /**\n   * Append source so it works when requesting AirPlay since hls.js will remove it.\n   */ _appendSource(src, defaultType) {\n        const prevSource = this._media.querySelector(\"source[data-vds]\"), source = prevSource ?? document.createElement(\"source\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(source, \"src\", this._appendMediaFragment(src.src));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(source, \"type\", src.type !== \"?\" ? src.type : defaultType);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(source, \"data-vds\", \"\");\n        if (!prevSource) this._media.append(source);\n    }\n    _removeSource() {\n        this._media.querySelector(\"source[data-vds]\")?.remove();\n    }\n    _appendMediaFragment(src) {\n        const { clipStartTime, clipEndTime } = this._ctx.$state, startTime = clipStartTime(), endTime = clipEndTime();\n        if (startTime > 0 && endTime > 0) {\n            return `${src}#t=${startTime},${endTime}`;\n        } else if (startTime > 0) {\n            return `${src}#t=${startTime}`;\n        } else if (endTime > 0) {\n            return `${src}#t=0,${endTime}`;\n        }\n        return src;\n    }\n}\nclass HTMLRemotePlaybackAdapter {\n    constructor(_media, _ctx){\n        this._media = _media;\n        this._ctx = _ctx;\n        this._supported = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        this._setup();\n    }\n    get supported() {\n        return this._supported();\n    }\n    _setup() {\n        if (IS_SERVER || !this._media?.remote || !this._canPrompt) return;\n        this._media.remote.watchAvailability((available)=>{\n            this._supported.set(available);\n        }).catch(()=>{\n            this._supported.set(false);\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchSupported.bind(this));\n    }\n    _watchSupported() {\n        if (!this._supported()) return;\n        const events = [\n            \"connecting\",\n            \"connect\",\n            \"disconnect\"\n        ], onStateChange = this._onStateChange.bind(this);\n        onStateChange();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._media, \"playing\", onStateChange);\n        for (const type of events){\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._media.remote, type, onStateChange);\n        }\n    }\n    async prompt() {\n        if (!this.supported) throw Error(\"Not supported on this platform.\");\n        if (this._type === \"airplay\" && this._media.webkitShowPlaybackTargetPicker) {\n            return this._media.webkitShowPlaybackTargetPicker();\n        }\n        return this._media.remote.prompt();\n    }\n    _onStateChange(event1) {\n        const state = this._media.remote.state;\n        if (state === this._state) return;\n        const detail = {\n            type: this._type,\n            state\n        };\n        this._ctx.delegate._notify(\"remote-playback-change\", detail, event1);\n        this._state = state;\n    }\n}\nclass HTMLAirPlayAdapter extends HTMLRemotePlaybackAdapter {\n    constructor(){\n        super(...arguments);\n        this._type = \"airplay\";\n    }\n    get _canPrompt() {\n        return \"WebKitPlaybackTargetAvailabilityEvent\" in window;\n    }\n}\nclass NativeHLSTextTracks {\n    constructor(_video, _ctx){\n        this._video = _video;\n        this._ctx = _ctx;\n        _video.textTracks.onaddtrack = this._onAddTrack.bind(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._onDispose.bind(this));\n    }\n    _onAddTrack(event1) {\n        const nativeTrack = event1.track;\n        if (!nativeTrack || findTextTrackElement(this._video, nativeTrack)) return;\n        const track = new TextTrack({\n            id: nativeTrack.id,\n            kind: nativeTrack.kind,\n            label: nativeTrack.label ?? \"\",\n            language: nativeTrack.language,\n            type: \"vtt\"\n        });\n        track[TextTrackSymbol._native] = {\n            track: nativeTrack\n        };\n        track[TextTrackSymbol._readyState] = 2;\n        track[TextTrackSymbol._nativeHLS] = true;\n        let lastIndex = 0;\n        const onCueChange = (event2)=>{\n            if (!nativeTrack.cues) return;\n            for(let i = lastIndex; i < nativeTrack.cues.length; i++){\n                track.addCue(nativeTrack.cues[i], event2);\n                lastIndex++;\n            }\n        };\n        onCueChange(event1);\n        nativeTrack.oncuechange = onCueChange;\n        this._ctx.textTracks.add(track, event1);\n        track.setMode(nativeTrack.mode, event1);\n    }\n    _onDispose() {\n        this._video.textTracks.onaddtrack = null;\n        for (const track of this._ctx.textTracks){\n            const nativeTrack = track[TextTrackSymbol._native]?.track;\n            if (nativeTrack?.oncuechange) nativeTrack.oncuechange = null;\n        }\n    }\n}\nfunction findTextTrackElement(video, track) {\n    return Array.from(video.children).find((el)=>el.track === track);\n}\nclass VideoPictureInPicture {\n    constructor(_video, _media){\n        this._video = _video;\n        this._media = _media;\n        this._onChange = (active, event1)=>{\n            this._media.delegate._notify(\"picture-in-picture-change\", active, event1);\n        };\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._video, \"enterpictureinpicture\", this._onEnter.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._video, \"leavepictureinpicture\", this._onExit.bind(this));\n    }\n    get active() {\n        return document.pictureInPictureElement === this._video;\n    }\n    get supported() {\n        return canUsePictureInPicture(this._video);\n    }\n    async enter() {\n        return this._video.requestPictureInPicture();\n    }\n    exit() {\n        return document.exitPictureInPicture();\n    }\n    _onEnter(event1) {\n        this._onChange(true, event1);\n    }\n    _onExit(event1) {\n        this._onChange(false, event1);\n    }\n}\nclass VideoPresentation {\n    constructor(_video, _media){\n        this._video = _video;\n        this._media = _media;\n        this._mode = \"inline\";\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._video, \"webkitpresentationmodechanged\", this._onModeChange.bind(this));\n    }\n    get _supported() {\n        return canUseVideoPresentation(this._video);\n    }\n    async _setPresentationMode(mode) {\n        if (this._mode === mode) return;\n        this._video.webkitSetPresentationMode(mode);\n    }\n    _onModeChange(event1) {\n        const prevMode = this._mode;\n        this._mode = this._video.webkitPresentationMode;\n        {\n            this._media.logger?.infoGroup(\"presentation mode change\").labelledLog(\"Mode\", this._mode).labelledLog(\"Event\", event1).dispatch();\n        }\n        this._media.player?.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"video-presentation-change\", {\n            detail: this._mode,\n            trigger: event1\n        }));\n        [\n            \"fullscreen\",\n            \"picture-in-picture\"\n        ].forEach((type)=>{\n            if (this._mode === type || prevMode === type) {\n                this._media.delegate._notify(`${type}-change`, this._mode === type, event1);\n            }\n        });\n    }\n}\nclass FullscreenPresentationAdapter {\n    constructor(_presentation){\n        this._presentation = _presentation;\n    }\n    get active() {\n        return this._presentation._mode === \"fullscreen\";\n    }\n    get supported() {\n        return this._presentation._supported;\n    }\n    async enter() {\n        this._presentation._setPresentationMode(\"fullscreen\");\n    }\n    async exit() {\n        this._presentation._setPresentationMode(\"inline\");\n    }\n}\nclass PIPPresentationAdapter {\n    constructor(_presentation){\n        this._presentation = _presentation;\n    }\n    get active() {\n        return this._presentation._mode === \"picture-in-picture\";\n    }\n    get supported() {\n        return this._presentation._supported;\n    }\n    async enter() {\n        this._presentation._setPresentationMode(\"picture-in-picture\");\n    }\n    async exit() {\n        this._presentation._setPresentationMode(\"inline\");\n    }\n}\nclass VideoProvider extends HTMLMediaProvider {\n    constructor(video, ctx){\n        super(video, ctx);\n        this.$$PROVIDER_TYPE = \"VIDEO\";\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>{\n            this.airPlay = new HTMLAirPlayAdapter(video, ctx);\n            if (canUseVideoPresentation(video)) {\n                const presentation = new VideoPresentation(video, ctx);\n                this.fullscreen = new FullscreenPresentationAdapter(presentation);\n                this.pictureInPicture = new PIPPresentationAdapter(presentation);\n            } else if (canUsePictureInPicture(video)) {\n                this.pictureInPicture = new VideoPictureInPicture(video, ctx);\n            }\n        }, this.scope);\n    }\n    get type() {\n        return \"video\";\n    }\n    setup() {\n        super.setup();\n        if (canPlayHLSNatively(this.video)) {\n            new NativeHLSTextTracks(this.video, this._ctx);\n        }\n        this._ctx.textRenderers._attachVideo(this.video);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this._ctx.textRenderers._attachVideo(null);\n        });\n        if (this.type === \"video\") this._ctx.delegate._notify(\"provider-setup\", this);\n    }\n    /**\n   * The native HTML `<video>` element.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}\n   */ get video() {\n        return this._media;\n    }\n}\nvar provider$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    VideoProvider: VideoProvider\n});\nfunction getLangName(langCode) {\n    try {\n        const displayNames = new Intl.DisplayNames(navigator.languages, {\n            type: \"language\"\n        });\n        const languageName = displayNames.of(langCode);\n        return languageName ?? null;\n    } catch (err) {\n        return null;\n    }\n}\nconst toDOMEventType = (type)=>`dash-${(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.camelToKebabCase)(type)}`;\nclass DASHController {\n    constructor(_video, _ctx){\n        this._video = _video;\n        this._ctx = _ctx;\n        this._instance = null;\n        this._stopLiveSync = null;\n        this._config = {};\n        this._callbacks = /* @__PURE__ */ new Set();\n        this._currentTrack = null;\n        this._cueTracker = {};\n        this._retryLoadingTimer = -1;\n    }\n    get instance() {\n        return this._instance;\n    }\n    setup(ctor) {\n        this._instance = ctor().create();\n        const dispatcher = this._dispatchDASHEvent.bind(this);\n        for (const event1 of Object.values(ctor.events))this._instance.on(event1, dispatcher);\n        this._instance.on(ctor.events.ERROR, this._onError.bind(this));\n        for (const callback of this._callbacks)callback(this._instance);\n        this._ctx.player.dispatch(\"dash-instance\", {\n            detail: this._instance\n        });\n        this._instance.initialize(this._video, void 0, false);\n        this._instance.updateSettings({\n            streaming: {\n                text: {\n                    // Disabling text rendering by dash.\n                    defaultEnabled: false,\n                    dispatchForManualRendering: true\n                },\n                buffer: {\n                    /// Enables buffer replacement when switching bitrates for faster switching.\n                    fastSwitchEnabled: true\n                }\n            },\n            ...this._config\n        });\n        this._instance.on(ctor.events.FRAGMENT_LOADING_STARTED, this._onFragmentLoadStart.bind(this));\n        this._instance.on(ctor.events.FRAGMENT_LOADING_COMPLETED, this._onFragmentLoadComplete.bind(this));\n        this._instance.on(ctor.events.MANIFEST_LOADED, this._onManifestLoaded.bind(this));\n        this._instance.on(ctor.events.QUALITY_CHANGE_RENDERED, this._onQualityChange.bind(this));\n        this._instance.on(ctor.events.TEXT_TRACKS_ADDED, this._onTextTracksAdded.bind(this));\n        this._instance.on(ctor.events.TRACK_CHANGE_RENDERED, this._onTrackChange.bind(this));\n        this._ctx.qualities[QualitySymbol._enableAuto] = this._enableAutoQuality.bind(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.qualities, \"change\", this._onUserQualityChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.audioTracks, \"change\", this._onUserAudioChange.bind(this));\n        this._stopLiveSync = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._liveSync.bind(this));\n    }\n    _createDOMEvent(event1) {\n        return new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(toDOMEventType(event1.type), {\n            detail: event1\n        });\n    }\n    _liveSync() {\n        if (!this._ctx.$state.live()) return;\n        const raf = new RAFLoop(this._liveSyncPosition.bind(this));\n        raf._start();\n        return raf._stop.bind(raf);\n    }\n    _liveSyncPosition() {\n        if (!this._instance) return;\n        const position = this._instance.duration() - this._instance.time();\n        this._ctx.$state.liveSyncPosition.set(!isNaN(position) ? position : Infinity);\n    }\n    _dispatchDASHEvent(event1) {\n        this._ctx.player?.dispatch(this._createDOMEvent(event1));\n    }\n    _onTextFragmentLoaded(event1) {\n        const native = this._currentTrack?.[TextTrackSymbol._native], cues = (native?.track).cues;\n        if (!native || !cues) return;\n        const id = this._currentTrack.id, startIndex = this._cueTracker[id] ?? 0, trigger = this._createDOMEvent(event1);\n        for(let i = startIndex; i < cues.length; i++){\n            const cue = cues[i];\n            if (!cue.positionAlign) cue.positionAlign = \"auto\";\n            this._currentTrack.addCue(cue, trigger);\n        }\n        this._cueTracker[id] = cues.length;\n    }\n    _onTextTracksAdded(event1) {\n        if (!this._instance) return;\n        const data = event1.tracks, nativeTextTracks = [\n            ...this._video.textTracks\n        ].filter((track)=>\"manualMode\" in track), trigger = this._createDOMEvent(event1);\n        for(let i = 0; i < nativeTextTracks.length; i++){\n            const textTrackInfo = data[i], nativeTextTrack = nativeTextTracks[i];\n            const id = `dash-${textTrackInfo.kind}-${i}`, track = new TextTrack({\n                id,\n                label: textTrackInfo?.label ?? textTrackInfo.labels.find((t)=>t.text)?.text ?? (textTrackInfo?.lang && getLangName(textTrackInfo.lang)) ?? textTrackInfo?.lang ?? void 0,\n                language: textTrackInfo.lang ?? void 0,\n                kind: textTrackInfo.kind,\n                default: textTrackInfo.defaultTrack\n            });\n            track[TextTrackSymbol._native] = {\n                managed: true,\n                track: nativeTextTrack\n            };\n            track[TextTrackSymbol._readyState] = 2;\n            track[TextTrackSymbol._onModeChange] = ()=>{\n                if (!this._instance) return;\n                if (track.mode === \"showing\") {\n                    this._instance.setTextTrack(i);\n                    this._currentTrack = track;\n                } else {\n                    this._instance.setTextTrack(-1);\n                    this._currentTrack = null;\n                }\n            };\n            this._ctx.textTracks.add(track, trigger);\n        }\n    }\n    _onTrackChange(event1) {\n        const { mediaType, newMediaInfo } = event1;\n        if (mediaType === \"audio\") {\n            const track = this._ctx.audioTracks.getById(`dash-audio-${newMediaInfo.index}`);\n            if (track) {\n                const trigger = this._createDOMEvent(event1);\n                this._ctx.audioTracks[ListSymbol._select](track, true, trigger);\n            }\n        }\n    }\n    _onQualityChange(event1) {\n        if (event1.mediaType !== \"video\") return;\n        const quality = this._ctx.qualities[event1.newQuality];\n        if (quality) {\n            const trigger = this._createDOMEvent(event1);\n            this._ctx.qualities[ListSymbol._select](quality, true, trigger);\n        }\n    }\n    _onManifestLoaded(event1) {\n        if (this._ctx.$state.canPlay() || !this._instance) return;\n        const { type, mediaPresentationDuration } = event1.data, trigger = this._createDOMEvent(event1);\n        this._ctx.delegate._notify(\"stream-type-change\", type !== \"static\" ? \"live\" : \"on-demand\", trigger);\n        this._ctx.delegate._notify(\"duration-change\", mediaPresentationDuration, trigger);\n        this._ctx.qualities[QualitySymbol._setAuto](true, trigger);\n        const media = this._instance.getVideoElement();\n        const videoQualities = this._instance.getTracksForTypeFromManifest(\"video\", event1.data);\n        const supportedVideoMimeType = [\n            ...new Set(videoQualities.map((e)=>e.mimeType))\n        ].find((type2)=>type2 && canPlayVideoType(media, type2));\n        const videoQuality = videoQualities.filter((track)=>supportedVideoMimeType === track.mimeType)[0];\n        let audioTracks = this._instance.getTracksForTypeFromManifest(\"audio\", event1.data);\n        const supportedAudioMimeType = [\n            ...new Set(audioTracks.map((e)=>e.mimeType))\n        ].find((type2)=>type2 && canPlayAudioType(media, type2));\n        audioTracks = audioTracks.filter((track)=>supportedAudioMimeType === track.mimeType);\n        videoQuality.bitrateList.forEach((bitrate, index)=>{\n            const quality = {\n                id: bitrate.id?.toString() ?? `dash-bitrate-${index}`,\n                width: bitrate.width ?? 0,\n                height: bitrate.height ?? 0,\n                bitrate: bitrate.bandwidth ?? 0,\n                codec: videoQuality.codec,\n                index\n            };\n            this._ctx.qualities[ListSymbol._add](quality, trigger);\n        });\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(videoQuality.index)) {\n            const quality = this._ctx.qualities[videoQuality.index];\n            if (quality) this._ctx.qualities[ListSymbol._select](quality, true, trigger);\n        }\n        audioTracks.forEach((audioTrack, index)=>{\n            const matchingLabel = audioTrack.labels.find((label2)=>{\n                return navigator.languages.some((language)=>{\n                    return label2.lang && language.toLowerCase().startsWith(label2.lang.toLowerCase());\n                });\n            });\n            const label = matchingLabel || audioTrack.labels[0];\n            const localTrack = {\n                id: `dash-audio-${audioTrack?.index}`,\n                label: label?.text ?? (audioTrack.lang && getLangName(audioTrack.lang)) ?? audioTrack.lang ?? \"\",\n                language: audioTrack.lang ?? \"\",\n                kind: \"main\",\n                mimeType: audioTrack.mimeType,\n                codec: audioTrack.codec,\n                index\n            };\n            this._ctx.audioTracks[ListSymbol._add](localTrack, trigger);\n        });\n        media.dispatchEvent(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"canplay\", {\n            trigger\n        }));\n    }\n    _onError(event1) {\n        const { type: eventType, error: data } = event1;\n        {\n            this._ctx.logger?.errorGroup(`[vidstack] DASH error \\`${data.message}\\``).labelledLog(\"Media Element\", this._video).labelledLog(\"DASH Instance\", this._instance).labelledLog(\"Event Type\", eventType).labelledLog(\"Data\", data).labelledLog(\"Src\", (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source)).labelledLog(\"Media Store\", {\n                ...this._ctx.$state\n            }).dispatch();\n        }\n        switch(data.code){\n            case 27:\n                this._onNetworkError(data);\n                break;\n            default:\n                this._onFatalError(data);\n                break;\n        }\n    }\n    _onFragmentLoadStart() {\n        if (this._retryLoadingTimer >= 0) this._clearRetryTimer();\n    }\n    _onFragmentLoadComplete(event1) {\n        const mediaType = event1.mediaType;\n        if (mediaType === \"text\") {\n            requestAnimationFrame(this._onTextFragmentLoaded.bind(this, event1));\n        }\n    }\n    _onNetworkError(error) {\n        this._clearRetryTimer();\n        this._instance?.play();\n        this._retryLoadingTimer = window.setTimeout(()=>{\n            this._retryLoadingTimer = -1;\n            this._onFatalError(error);\n        }, 5e3);\n    }\n    _clearRetryTimer() {\n        clearTimeout(this._retryLoadingTimer);\n        this._retryLoadingTimer = -1;\n    }\n    _onFatalError(error) {\n        this._ctx.delegate._notify(\"error\", {\n            message: error.message ?? \"\",\n            code: 1,\n            error\n        });\n    }\n    _enableAutoQuality() {\n        this._switchAutoBitrate(\"video\", true);\n        const { qualities } = this._ctx;\n        this._instance?.setQualityFor(\"video\", qualities.selectedIndex, true);\n    }\n    _switchAutoBitrate(type, auto) {\n        this._instance?.updateSettings({\n            streaming: {\n                abr: {\n                    autoSwitchBitrate: {\n                        [type]: auto\n                    }\n                }\n            }\n        });\n    }\n    _onUserQualityChange() {\n        const { qualities } = this._ctx;\n        if (!this._instance || qualities.auto || !qualities.selected) return;\n        this._switchAutoBitrate(\"video\", false);\n        this._instance.setQualityFor(\"video\", qualities.selectedIndex, qualities.switch === \"current\");\n        if (IS_CHROME) {\n            this._video.currentTime = this._video.currentTime;\n        }\n    }\n    _onUserAudioChange() {\n        if (!this._instance) return;\n        const { audioTracks } = this._ctx, selectedTrack = this._instance.getTracksFor(\"audio\").find((track)=>audioTracks.selected && audioTracks.selected.id === `dash-audio-${track.index}`);\n        if (selectedTrack) this._instance.setCurrentTrack(selectedTrack);\n    }\n    _reset() {\n        this._clearRetryTimer();\n        this._currentTrack = null;\n        this._cueTracker = {};\n    }\n    loadSource(src) {\n        this._reset();\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) return;\n        this._instance?.attachSource(src.src);\n    }\n    destroy() {\n        this._reset();\n        this._instance?.destroy();\n        this._instance = null;\n        this._stopLiveSync?.();\n        this._stopLiveSync = null;\n        this._ctx?.logger?.info(\"\\uD83C\\uDFD7️ Destroyed DASH instance\");\n    }\n}\nfunction coerceToError(error) {\n    return error instanceof Error ? error : Error(typeof error === \"string\" ? error : JSON.stringify(error));\n}\nfunction assert(condition, message) {\n    if (!condition) {\n        throw Error(message || \"Assertion failed.\");\n    }\n}\nclass DASHLibLoader {\n    constructor(_lib, _ctx, _callback){\n        this._lib = _lib;\n        this._ctx = _ctx;\n        this._callback = _callback;\n        this._startLoading();\n    }\n    async _startLoading() {\n        this._ctx.logger?.info(\"\\uD83C\\uDFD7️ Loading DASH Library\");\n        const callbacks = {\n            onLoadStart: this._onLoadStart.bind(this),\n            onLoaded: this._onLoaded.bind(this),\n            onLoadError: this._onLoadError.bind(this)\n        };\n        let ctor = await loadDASHScript(this._lib, callbacks);\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(ctor) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this._lib)) ctor = await importDASH(this._lib, callbacks);\n        if (!ctor) return null;\n        if (!window.dashjs.supportsMediaSource()) {\n            const message = \"[vidstack] `dash.js` is not supported in this environment\";\n            this._ctx.logger?.error(message);\n            this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dash-unsupported\"));\n            this._ctx.delegate._notify(\"error\", {\n                message,\n                code: 4\n            });\n            return null;\n        }\n        return ctor;\n    }\n    _onLoadStart() {\n        {\n            this._ctx.logger?.infoGroup(\"Starting to load `dash.js`\").labelledLog(\"URL\", this._lib).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dash-lib-load-start\"));\n    }\n    _onLoaded(ctor) {\n        {\n            this._ctx.logger?.infoGroup(\"Loaded `dash.js`\").labelledLog(\"Library\", this._lib).labelledLog(\"Constructor\", ctor).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dash-lib-loaded\", {\n            detail: ctor\n        }));\n        this._callback(ctor);\n    }\n    _onLoadError(e) {\n        const error = coerceToError(e);\n        {\n            this._ctx.logger?.errorGroup(\"[vidstack] Failed to load `dash.js`\").labelledLog(\"Library\", this._lib).labelledLog(\"Error\", e).dispatch();\n        }\n        this._ctx.player.dispatch(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dash-lib-load-error\", {\n            detail: error\n        }));\n        this._ctx.delegate._notify(\"error\", {\n            message: error.message,\n            code: 4,\n            error\n        });\n    }\n}\nasync function importDASH(loader, callbacks = {}) {\n    if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(loader)) return void 0;\n    callbacks.onLoadStart?.();\n    if (isDASHConstructor(loader)) {\n        callbacks.onLoaded?.(loader);\n        return loader;\n    }\n    if (isDASHNamespace(loader)) {\n        const ctor = loader.MediaPlayer;\n        callbacks.onLoaded?.(ctor);\n        return ctor;\n    }\n    try {\n        const ctor = (await loader())?.default;\n        if (isDASHNamespace(ctor)) {\n            callbacks.onLoaded?.(ctor.MediaPlayer);\n            return ctor.MediaPlayer;\n        }\n        if (ctor) {\n            callbacks.onLoaded?.(ctor);\n        } else {\n            throw Error( true ? \"[vidstack] failed importing `dash.js`. Dynamic import returned invalid object.\" : 0);\n        }\n        return ctor;\n    } catch (err) {\n        callbacks.onLoadError?.(err);\n    }\n    return void 0;\n}\nasync function loadDASHScript(src, callbacks = {}) {\n    if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) return void 0;\n    callbacks.onLoadStart?.();\n    try {\n        await loadScript(src);\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(window.dashjs.MediaPlayer)) {\n            throw Error( true ? \"[vidstack] failed loading `dash.js`. Could not find a valid `Dash` constructor on window\" : 0);\n        }\n        const ctor = window.dashjs.MediaPlayer;\n        callbacks.onLoaded?.(ctor);\n        return ctor;\n    } catch (err) {\n        callbacks.onLoadError?.(err);\n    }\n    return void 0;\n}\nfunction isDASHConstructor(value) {\n    return value && value.prototype && value.prototype !== Function;\n}\nfunction isDASHNamespace(value) {\n    return value && \"MediaPlayer\" in value;\n}\nconst JS_DELIVR_CDN = \"https://cdn.jsdelivr.net\";\nclass DASHProvider extends VideoProvider {\n    constructor(){\n        super(...arguments);\n        this.$$PROVIDER_TYPE = \"DASH\";\n        this._ctor = null;\n        this._controller = new DASHController(this.video, this._ctx);\n        this._library = `${JS_DELIVR_CDN}/npm/dashjs@4.7.4/dist/dash${\".all.debug.js\"}`;\n    }\n    /**\n   * The `dash.js` constructor.\n   */ get ctor() {\n        return this._ctor;\n    }\n    /**\n   * The current `dash.js` instance.\n   */ get instance() {\n        return this._controller.instance;\n    }\n    get type() {\n        return \"dash\";\n    }\n    get canLiveSync() {\n        return true;\n    }\n    /**\n   * The `dash.js` configuration object.\n   *\n   * @see {@link https://cdn.dashjs.org/latest/jsdoc/module-Settings.html}\n   */ get config() {\n        return this._controller._config;\n    }\n    set config(config) {\n        this._controller._config = config;\n    }\n    /**\n   * The `dash.js` constructor (supports dynamic imports) or a URL of where it can be found.\n   *\n   * @defaultValue `https://cdn.jsdelivr.net/npm/dashjs@4.7.4/dist/dash.all.min.js`\n   */ get library() {\n        return this._library;\n    }\n    set library(library) {\n        this._library = library;\n    }\n    preconnect() {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this._library)) return;\n        preconnect(this._library);\n    }\n    setup() {\n        super.setup();\n        new DASHLibLoader(this._library, this._ctx, (ctor)=>{\n            this._ctor = ctor;\n            this._controller.setup(ctor);\n            this._ctx.delegate._notify(\"provider-setup\", this);\n            const src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source);\n            if (src) this.loadSource(src);\n        });\n    }\n    async loadSource(src, preload) {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) {\n            this._removeSource();\n            return;\n        }\n        this._media.preload = preload || \"\";\n        this._appendSource(src, \"application/x-mpegurl\");\n        this._controller.loadSource(src);\n        this._currentSrc = src;\n    }\n    /**\n   * The given callback is invoked when a new `dash.js` instance is created and right before it's\n   * attached to media.\n   */ onInstance(callback) {\n        const instance = this._controller.instance;\n        if (instance) callback(instance);\n        this._controller._callbacks.add(callback);\n        return ()=>this._controller._callbacks.delete(callback);\n    }\n    destroy() {\n        this._controller.destroy();\n    }\n}\n/**\n * Whether `dash.js` is supported in this environment.\n */ DASHProvider.supported = isDASHSupported();\nvar provider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    DASHProvider: DASHProvider\n});\nconst _DASHProviderLoader = class _DASHProviderLoader extends VideoProviderLoader {\n    constructor(){\n        super(...arguments);\n        this.name = \"dash\";\n    }\n    canPlay(src) {\n        return _DASHProviderLoader.supported && isDASHSrc(src);\n    }\n    async load(context) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load dash provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<video>` element was not found - did you forget to include `<media-provider>`?\");\n        }\n        return new (await Promise.resolve().then(function() {\n            return provider;\n        })).DASHProvider(this.target, context);\n    }\n};\n_DASHProviderLoader.supported = isDASHSupported();\nlet DASHProviderLoader = _DASHProviderLoader;\nclass VimeoProviderLoader {\n    constructor(){\n        this.name = \"vimeo\";\n    }\n    preconnect() {\n        const connections = [\n            \"https://i.vimeocdn.com\",\n            \"https://f.vimeocdn.com\",\n            \"https://fresnel.vimeocdn.com\"\n        ];\n        for (const url of connections){\n            preconnect(url);\n        }\n    }\n    canPlay(src) {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) && src.type === \"video/vimeo\";\n    }\n    mediaType() {\n        return \"video\";\n    }\n    async load(ctx) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load vimeo provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<iframe>` element was not found - did you forget to include media provider?\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-C4FuHl6d.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-C4FuHl6d.js\"))).VimeoProvider(this.target, ctx);\n    }\n    async loadPoster(src, ctx, abort) {\n        const { resolveVimeoVideoId, getVimeoVideoInfo } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-krOAtKMi.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js\"));\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) return null;\n        const { videoId, hash } = resolveVimeoVideoId(src.src);\n        if (videoId) {\n            return getVimeoVideoInfo(videoId, abort, hash).then((info)=>info ? info.poster : null);\n        }\n        return null;\n    }\n}\nclass YouTubeProviderLoader {\n    constructor(){\n        this.name = \"youtube\";\n    }\n    preconnect() {\n        const connections = [\n            // Botguard script.\n            \"https://www.google.com\",\n            // Posters.\n            \"https://i.ytimg.com\",\n            // Ads.\n            \"https://googleads.g.doubleclick.net\",\n            \"https://static.doubleclick.net\"\n        ];\n        for (const url of connections){\n            preconnect(url);\n        }\n    }\n    canPlay(src) {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) && src.type === \"video/youtube\";\n    }\n    mediaType() {\n        return \"video\";\n    }\n    async load(ctx) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load youtube provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<iframe>` element was not found - did you forget to include media provider?\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-Bby4qdTP.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Bby4qdTP.js\"))).YouTubeProvider(this.target, ctx);\n    }\n    async loadPoster(src, ctx, abort) {\n        const { findYouTubePoster, resolveYouTubeVideoId } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-Zc3I7oOd.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js\"));\n        const videoId = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) && resolveYouTubeVideoId(src.src);\n        if (videoId) return findYouTubePoster(videoId, abort);\n        return null;\n    }\n}\nfunction padNumberWithZeroes(num, expectedLength) {\n    const str = String(num);\n    const actualLength = str.length;\n    const shouldPad = actualLength < expectedLength;\n    if (shouldPad) {\n        const padLength = expectedLength - actualLength;\n        const padding = `0`.repeat(padLength);\n        return `${padding}${num}`;\n    }\n    return str;\n}\nfunction parseTime(duration) {\n    const hours = Math.trunc(duration / 3600);\n    const minutes = Math.trunc(duration % 3600 / 60);\n    const seconds = Math.trunc(duration % 60);\n    const fraction = Number((duration - Math.trunc(duration)).toPrecision(3));\n    return {\n        hours,\n        minutes,\n        seconds,\n        fraction\n    };\n}\nfunction formatTime(duration, { padHrs = null, padMins = null, showHrs = false, showMs = false } = {}) {\n    const { hours, minutes, seconds, fraction } = parseTime(duration), paddedHours = padHrs ? padNumberWithZeroes(hours, 2) : hours, paddedMinutes = padMins || (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(padMins) && duration >= 3600 ? padNumberWithZeroes(minutes, 2) : minutes, paddedSeconds = padNumberWithZeroes(seconds, 2), paddedMs = showMs && fraction > 0 ? `.${String(fraction).replace(/^0?\\./, \"\")}` : \"\", time = `${paddedMinutes}:${paddedSeconds}${paddedMs}`;\n    return hours > 0 || showHrs ? `${paddedHours}:${time}` : time;\n}\nfunction formatSpokenTime(duration) {\n    const spokenParts = [];\n    const { hours, minutes, seconds } = parseTime(duration);\n    if (hours > 0) {\n        spokenParts.push(`${hours} hour`);\n    }\n    if (minutes > 0) {\n        spokenParts.push(`${minutes} min`);\n    }\n    if (seconds > 0 || spokenParts.length === 0) {\n        spokenParts.push(`${seconds} sec`);\n    }\n    return spokenParts.join(\" \");\n}\nconst MEDIA_ATTRIBUTES = Symbol(\"MEDIA_ATTRIBUTES\");\nconst mediaAttributes = [\n    \"autoPlay\",\n    \"canAirPlay\",\n    \"canFullscreen\",\n    \"canGoogleCast\",\n    \"canLoad\",\n    \"canLoadPoster\",\n    \"canPictureInPicture\",\n    \"canPlay\",\n    \"canSeek\",\n    \"ended\",\n    \"fullscreen\",\n    \"isAirPlayConnected\",\n    \"isGoogleCastConnected\",\n    \"live\",\n    \"liveEdge\",\n    \"loop\",\n    \"mediaType\",\n    \"muted\",\n    \"paused\",\n    \"pictureInPicture\",\n    \"playing\",\n    \"playsInline\",\n    \"remotePlaybackState\",\n    \"remotePlaybackType\",\n    \"seeking\",\n    \"started\",\n    \"streamType\",\n    \"viewType\",\n    \"waiting\"\n];\nconst mediaPlayerProps = {\n    artist: \"\",\n    artwork: null,\n    autoplay: false,\n    autoPlay: false,\n    clipStartTime: 0,\n    clipEndTime: 0,\n    controls: false,\n    currentTime: 0,\n    crossorigin: null,\n    crossOrigin: null,\n    duration: -1,\n    fullscreenOrientation: \"landscape\",\n    googleCast: {},\n    load: \"visible\",\n    posterLoad: \"visible\",\n    logLevel: \"warn\",\n    loop: false,\n    muted: false,\n    paused: true,\n    playsinline: false,\n    playsInline: false,\n    playbackRate: 1,\n    poster: \"\",\n    preload: \"metadata\",\n    preferNativeHLS: false,\n    src: \"\",\n    title: \"\",\n    controlsDelay: 2e3,\n    hideControlsOnMouseLeave: false,\n    viewType: \"unknown\",\n    streamType: \"unknown\",\n    volume: 1,\n    liveEdgeTolerance: 10,\n    minLiveDVRWindow: 60,\n    keyDisabled: false,\n    keyTarget: \"player\",\n    keyShortcuts: MEDIA_KEY_SHORTCUTS,\n    storage: null\n};\nconst MEDIA_EVENTS = [\n    \"abort\",\n    \"can-play\",\n    \"can-play-through\",\n    \"duration-change\",\n    \"emptied\",\n    \"ended\",\n    \"error\",\n    \"fullscreen-change\",\n    \"loaded-data\",\n    \"loaded-metadata\",\n    \"load-start\",\n    \"media-type-change\",\n    \"pause\",\n    \"play\",\n    \"playing\",\n    \"progress\",\n    \"seeked\",\n    \"seeking\",\n    \"source-change\",\n    \"sources-change\",\n    \"stalled\",\n    \"started\",\n    \"suspend\",\n    \"stream-type-change\",\n    \"replay\",\n    // time-change,\n    // 'time-update',\n    \"view-type-change\",\n    \"volume-change\",\n    \"waiting\"\n];\nclass MediaEventsLogger extends MediaPlayerController {\n    constructor(_media){\n        super();\n        this._media = _media;\n    }\n    onConnect() {\n        const handler = this._onMediaEvent.bind(this);\n        for (const eventType of MEDIA_EVENTS)this.listen(eventType, handler);\n    }\n    _onMediaEvent(event1) {\n        this._media.logger?.debugGroup(`\\u{1F4E1} dispatching \\`${event1.type}\\``).labelledLog(\"Media Store\", {\n            ...this.$state\n        }).labelledLog(\"Event\", event1).dispatch();\n    }\n}\nclass MediaLoadController extends MediaPlayerController {\n    constructor(_type, _callback){\n        super();\n        this._type = _type;\n        this._callback = _callback;\n    }\n    async onAttach(el) {\n        if (IS_SERVER) return;\n        const load = this.$props[this._type]();\n        if (load === \"eager\") {\n            requestAnimationFrame(this._callback);\n        } else if (load === \"idle\") {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.waitIdlePeriod)(this._callback);\n        } else if (load === \"visible\") {\n            let dispose, observer = new IntersectionObserver((entries)=>{\n                if (!this.scope) return;\n                if (entries[0].isIntersecting) {\n                    dispose?.();\n                    dispose = void 0;\n                    this._callback();\n                }\n            });\n            observer.observe(el);\n            dispose = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>observer.disconnect());\n        }\n    }\n}\nlet seenAutoplayWarning = false;\nclass MediaPlayerDelegate {\n    constructor(_handle, _media){\n        this._handle = _handle;\n        this._media = _media;\n        this._notify = (type, ...init)=>{\n            if (IS_SERVER) return;\n            this._handle(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(type, {\n                detail: init?.[0],\n                trigger: init?.[1]\n            }));\n        };\n    }\n    async _ready(info, trigger) {\n        if (IS_SERVER) return;\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(async ()=>{\n            const { logger } = this._media, { autoPlay, canPlay, started, duration, seekable, buffered, remotePlaybackInfo, playsInline, savedState, source } = this._media.$state;\n            if (canPlay()) return;\n            const detail = {\n                duration: info?.duration ?? duration(),\n                seekable: info?.seekable ?? seekable(),\n                buffered: info?.buffered ?? buffered(),\n                provider: this._media.$provider()\n            };\n            this._notify(\"can-play\", detail, trigger);\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n            {\n                logger?.infoGroup(\"-~-~-~-~-~-~- ✅ MEDIA READY -~-~-~-~-~-~-\").labelledLog(\"Media\", this._media).labelledLog(\"Trigger Event\", trigger).dispatch();\n            }\n            let provider = this._media.$provider(), { storage, qualities } = this._media, { muted, volume, clipStartTime, playbackRate } = this._media.$props;\n            await storage?.onLoad?.(source());\n            const savedPlaybackTime = savedState()?.currentTime, savedPlayingState = savedState()?.paused, storageTime = await storage?.getTime(), startTime = savedPlaybackTime ?? storageTime ?? clipStartTime(), shouldAutoPlay = savedPlayingState || savedPlayingState !== false && !started() && autoPlay();\n            if (provider) {\n                provider.setVolume(await storage?.getVolume() ?? volume());\n                provider.setMuted(muted() || !!await storage?.getMuted());\n                const audioGain = await storage?.getAudioGain() ?? 1;\n                if (audioGain > 1) provider.audioGain?.setGain?.(audioGain);\n                provider.setPlaybackRate?.(await storage?.getPlaybackRate() ?? playbackRate());\n                provider.setPlaysInline?.(playsInline());\n                if (startTime > 0) provider.setCurrentTime(startTime);\n            }\n            const prefQuality = await storage?.getVideoQuality();\n            if (prefQuality && qualities.length) {\n                let currentQuality = null, currentScore = Infinity;\n                for (const quality of qualities){\n                    const score = Math.abs(prefQuality.width - quality.width) + Math.abs(prefQuality.height - quality.height) + (prefQuality.bitrate ? Math.abs(prefQuality.bitrate - (quality.bitrate ?? 0)) : 0);\n                    if (score < currentScore) {\n                        currentQuality = quality;\n                        currentScore = score;\n                    }\n                }\n                if (currentQuality) currentQuality.selected = true;\n            }\n            if (canPlay() && shouldAutoPlay) {\n                await this._attemptAutoplay(trigger);\n            } else if (storageTime && storageTime > 0) {\n                this._notify(\"started\", void 0, trigger);\n            }\n            remotePlaybackInfo.set(null);\n        });\n    }\n    async _attemptAutoplay(trigger) {\n        const { player, $state: { autoPlaying, muted } } = this._media;\n        autoPlaying.set(true);\n        const attemptEvent = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"auto-play-attempt\", {\n            trigger\n        });\n        try {\n            await player.play(attemptEvent);\n        } catch (error) {\n            if (!seenAutoplayWarning) {\n                const muteMsg = !muted() ? \" Attempting with volume muted will most likely resolve the issue.\" : \"\";\n                this._media.logger?.errorGroup(\"[vidstack] auto-play request failed\").labelledLog(\"Message\", `Autoplay was requested but failed most likely due to browser autoplay policies.${muteMsg}`).labelledLog(\"Trigger Event\", trigger).labelledLog(\"Error\", error).labelledLog(\"See\", \"https://developer.chrome.com/blog/autoplay\").dispatch();\n                seenAutoplayWarning = true;\n            }\n        }\n    }\n}\nclass Queue {\n    constructor(){\n        this._queue = /* @__PURE__ */ new Map();\n    }\n    /**\n   * Queue the given `item` under the given `key` to be processed at a later time by calling\n   * `serve(key)`.\n   */ _enqueue(key, item) {\n        this._queue.set(key, item);\n    }\n    /**\n   * Process item in queue for the given `key`.\n   */ _serve(key) {\n        const value = this._peek(key);\n        this._queue.delete(key);\n        return value;\n    }\n    /**\n   * Peek at item in queue for the given `key`.\n   */ _peek(key) {\n        return this._queue.get(key);\n    }\n    /**\n   * Removes queued item under the given `key`.\n   */ _delete(key) {\n        this._queue.delete(key);\n    }\n    /**\n   * Clear all items in the queue.\n   */ _clear() {\n        this._queue.clear();\n    }\n}\nclass RequestQueue {\n    constructor(){\n        this._serving = false;\n        this._pending = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.deferredPromise)();\n        this._queue = /* @__PURE__ */ new Map();\n    }\n    /**\n   * The number of callbacks that are currently in queue.\n   */ get _size() {\n        return this._queue.size;\n    }\n    /**\n   * Whether items in the queue are being served immediately, otherwise they're queued to\n   * be processed later.\n   */ get _isServing() {\n        return this._serving;\n    }\n    /**\n   * Waits for the queue to be flushed (ie: start serving).\n   */ async _waitForFlush() {\n        if (this._serving) return;\n        await this._pending.promise;\n    }\n    /**\n   * Queue the given `callback` to be invoked at a later time by either calling the `serve()` or\n   * `start()` methods. If the queue has started serving (i.e., `start()` was already called),\n   * then the callback will be invoked immediately.\n   *\n   * @param key - Uniquely identifies this callback so duplicates are ignored.\n   * @param callback - The function to call when this item in the queue is being served.\n   */ _enqueue(key, callback) {\n        if (this._serving) {\n            callback();\n            return;\n        }\n        this._queue.delete(key);\n        this._queue.set(key, callback);\n    }\n    /**\n   * Invokes the callback with the given `key` in the queue (if it exists).\n   */ _serve(key) {\n        this._queue.get(key)?.();\n        this._queue.delete(key);\n    }\n    /**\n   * Flush all queued items and start serving future requests immediately until `stop()` is called.\n   */ _start() {\n        this._flush();\n        this._serving = true;\n        if (this._queue.size > 0) this._flush();\n    }\n    /**\n   * Stop serving requests, they'll be queued until you begin processing again by calling `start()`.\n   */ _stop() {\n        this._serving = false;\n    }\n    /**\n   * Stop serving requests, empty the request queue, and release any promises waiting for the\n   * queue to flush.\n   */ _reset() {\n        this._stop();\n        this._queue.clear();\n        this._release();\n    }\n    _flush() {\n        for (const key of this._queue.keys())this._serve(key);\n        this._release();\n    }\n    _release() {\n        this._pending.resolve();\n        this._pending = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.deferredPromise)();\n    }\n}\nclass MediaRequestManager extends MediaPlayerController {\n    constructor(_stateMgr, _request, _media){\n        super();\n        this._stateMgr = _stateMgr;\n        this._request = _request;\n        this._media = _media;\n        this._providerQueue = new RequestQueue();\n        this._wasPIPActive = false;\n        this._$provider = _media.$provider;\n        this._controls = new MediaControls();\n        this._fullscreen = new FullscreenController();\n        this._orientation = new ScreenOrientationController();\n    }\n    onAttach() {\n        this.listen(\"fullscreen-change\", this._onFullscreenChange.bind(this));\n    }\n    onConnect() {\n        const names = Object.getOwnPropertyNames(Object.getPrototypeOf(this)), handle = this._handleRequest.bind(this);\n        for (const name of names){\n            if (name.startsWith(\"media-\")) {\n                this.listen(name, handle);\n            }\n        }\n        this._attachLoadPlayListener();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchProvider.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchControlsDelayChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchAudioGainSupport.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchAirPlaySupport.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchGoogleCastSupport.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchFullscreenSupport.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPiPSupport.bind(this));\n    }\n    onDestroy() {\n        try {\n            const destroyEvent = this.createEvent(\"destroy\"), { pictureInPicture, fullscreen } = this.$state;\n            if (fullscreen()) this._exitFullscreen(\"prefer-media\", destroyEvent);\n            if (pictureInPicture()) this._exitPictureInPicture(destroyEvent);\n        } catch (e) {}\n        this._providerQueue._reset();\n    }\n    _attachLoadPlayListener() {\n        const { load } = this.$props, { canLoad } = this.$state;\n        if (load() !== \"play\" || canLoad()) return;\n        const off = this.listen(\"media-play-request\", (event1)=>{\n            this._handleLoadPlayStrategy(event1);\n            off();\n        });\n    }\n    _watchProvider() {\n        const provider = this._$provider(), canPlay = this.$state.canPlay();\n        if (provider && canPlay) {\n            this._providerQueue._start();\n        }\n        return ()=>{\n            this._providerQueue._stop();\n        };\n    }\n    _handleRequest(event1) {\n        event1.stopPropagation();\n        if (event1.defaultPrevented) return;\n        {\n            this._media.logger?.infoGroup(`\\u{1F4EC} received \\`${event1.type}\\``).labelledLog(\"Request\", event1).dispatch();\n        }\n        if (!this[event1.type]) return;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._$provider)) {\n            this[event1.type](event1);\n        } else {\n            this._providerQueue._enqueue(event1.type, ()=>{\n                if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._$provider)) this[event1.type](event1);\n            });\n        }\n    }\n    async _play(trigger) {\n        if (IS_SERVER) return;\n        const { canPlay, paused, autoPlaying } = this.$state;\n        if (this._handleLoadPlayStrategy(trigger)) return;\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(paused)) return;\n        if (trigger) this._request._queue._enqueue(\"media-play-request\", trigger);\n        const isAutoPlaying = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(autoPlaying);\n        try {\n            const provider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._$provider);\n            throwIfNotReadyForPlayback(provider, (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(canPlay));\n            return await provider.play();\n        } catch (error) {\n            this._logError(\"play request failed\", error, trigger);\n            const errorEvent = this.createEvent(\"play-fail\", {\n                detail: coerceToError(error),\n                trigger\n            });\n            errorEvent.autoPlay = isAutoPlaying;\n            this._stateMgr._handle(errorEvent);\n            throw error;\n        }\n    }\n    _handleLoadPlayStrategy(trigger) {\n        const { load } = this.$props, { canLoad } = this.$state;\n        if (load() === \"play\" && !canLoad()) {\n            const event1 = this.createEvent(\"media-start-loading\", {\n                trigger\n            });\n            this.dispatchEvent(event1);\n            this._providerQueue._enqueue(\"media-play-request\", async ()=>{\n                try {\n                    await this._play(event1);\n                } catch (error) {}\n            });\n            return true;\n        }\n        return false;\n    }\n    async _pause(trigger) {\n        if (IS_SERVER) return;\n        const { canPlay, paused } = this.$state;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(paused)) return;\n        if (trigger) {\n            this._request._queue._enqueue(\"media-pause-request\", trigger);\n        }\n        try {\n            const provider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._$provider);\n            throwIfNotReadyForPlayback(provider, (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(canPlay));\n            return await provider.pause();\n        } catch (error) {\n            this._request._queue._delete(\"media-pause-request\");\n            {\n                this._logError(\"pause request failed\", error, trigger);\n            }\n            throw error;\n        }\n    }\n    _setAudioGain(gain, trigger) {\n        const { audioGain, canSetAudioGain } = this.$state;\n        if (audioGain() === gain) return;\n        const provider = this._$provider();\n        if (!provider?.audioGain || !canSetAudioGain()) {\n            throw Error(\"[vidstack] audio gain api not available\");\n        }\n        if (trigger) {\n            this._request._queue._enqueue(\"media-audio-gain-change-request\", trigger);\n        }\n        provider.audioGain.setGain(gain);\n    }\n    _seekToLiveEdge(trigger) {\n        if (IS_SERVER) return;\n        const { canPlay, live, liveEdge, canSeek, liveSyncPosition, seekableEnd, userBehindLiveEdge } = this.$state;\n        userBehindLiveEdge.set(false);\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>!live() || liveEdge() || !canSeek())) return;\n        const provider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._$provider);\n        throwIfNotReadyForPlayback(provider, (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(canPlay));\n        if (trigger) this._request._queue._enqueue(\"media-seek-request\", trigger);\n        const end = seekableEnd() - 2;\n        provider.setCurrentTime(Math.min(end, liveSyncPosition() ?? end));\n    }\n    async _enterFullscreen(target = \"prefer-media\", trigger) {\n        if (IS_SERVER) return;\n        const adapter = this._getFullscreenAdapter(target);\n        throwIfFullscreenNotSupported(target, adapter);\n        if (adapter.active) return;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.pictureInPicture)) {\n            this._wasPIPActive = true;\n            await this._exitPictureInPicture(trigger);\n        }\n        if (trigger) {\n            this._request._queue._enqueue(\"media-enter-fullscreen-request\", trigger);\n        }\n        return adapter.enter();\n    }\n    async _exitFullscreen(target = \"prefer-media\", trigger) {\n        if (IS_SERVER) return;\n        const adapter = this._getFullscreenAdapter(target);\n        throwIfFullscreenNotSupported(target, adapter);\n        if (!adapter.active) return;\n        if (trigger) {\n            this._request._queue._enqueue(\"media-exit-fullscreen-request\", trigger);\n        }\n        try {\n            const result = await adapter.exit();\n            if (this._wasPIPActive && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.canPictureInPicture)) {\n                await this._enterPictureInPicture();\n            }\n            return result;\n        } finally{\n            this._wasPIPActive = false;\n        }\n    }\n    _getFullscreenAdapter(target) {\n        const provider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._$provider);\n        return target === \"prefer-media\" && this._fullscreen.supported || target === \"media\" ? this._fullscreen : provider?.fullscreen;\n    }\n    async _enterPictureInPicture(trigger) {\n        if (IS_SERVER) return;\n        this._throwIfPIPNotSupported();\n        if (this.$state.pictureInPicture()) return;\n        if (trigger) {\n            this._request._queue._enqueue(\"media-enter-pip-request\", trigger);\n        }\n        return await this._$provider().pictureInPicture.enter();\n    }\n    async _exitPictureInPicture(trigger) {\n        if (IS_SERVER) return;\n        this._throwIfPIPNotSupported();\n        if (!this.$state.pictureInPicture()) return;\n        if (trigger) {\n            this._request._queue._enqueue(\"media-exit-pip-request\", trigger);\n        }\n        return await this._$provider().pictureInPicture.exit();\n    }\n    _throwIfPIPNotSupported() {\n        if (this.$state.canPictureInPicture()) return;\n        throw Error(`[vidstack] picture-in-picture is not currently available`);\n    }\n    _watchControlsDelayChange() {\n        this._controls.defaultDelay = this.$props.controlsDelay();\n    }\n    _watchAudioGainSupport() {\n        const { canSetAudioGain } = this.$state, supported = !!this._$provider()?.audioGain?.supported;\n        canSetAudioGain.set(supported);\n    }\n    _watchAirPlaySupport() {\n        const { canAirPlay } = this.$state, supported = !!this._$provider()?.airPlay?.supported;\n        canAirPlay.set(supported);\n    }\n    _watchGoogleCastSupport() {\n        const { canGoogleCast, source } = this.$state, supported = IS_CHROME && !IS_IOS && canGoogleCastSrc(source());\n        canGoogleCast.set(supported);\n    }\n    _watchFullscreenSupport() {\n        const { canFullscreen } = this.$state, supported = this._fullscreen.supported || !!this._$provider()?.fullscreen?.supported;\n        canFullscreen.set(supported);\n    }\n    _watchPiPSupport() {\n        const { canPictureInPicture } = this.$state, supported = !!this._$provider()?.pictureInPicture?.supported;\n        canPictureInPicture.set(supported);\n    }\n    async [\"media-airplay-request\"](event1) {\n        try {\n            await this._requestAirPlay(event1);\n        } catch (error) {}\n    }\n    async _requestAirPlay(trigger) {\n        try {\n            const adapter = this._$provider()?.airPlay;\n            if (!adapter?.supported) {\n                throw Error( true ? \"AirPlay adapter not available on provider.\" : 0);\n            }\n            if (trigger) {\n                this._request._queue._enqueue(\"media-airplay-request\", trigger);\n            }\n            return await adapter.prompt();\n        } catch (error) {\n            this._request._queue._delete(\"media-airplay-request\");\n            {\n                this._logError(\"airplay request failed\", error, trigger);\n            }\n            throw error;\n        }\n    }\n    async [\"media-google-cast-request\"](event1) {\n        try {\n            await this._requestGoogleCast(event1);\n        } catch (error) {}\n    }\n    async _requestGoogleCast(trigger) {\n        try {\n            const { canGoogleCast } = this.$state;\n            if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(canGoogleCast)) {\n                const error = Error( true ? \"Google Cast not available on this platform.\" : 0);\n                error.code = \"CAST_NOT_AVAILABLE\";\n                throw error;\n            }\n            preconnect(\"https://www.gstatic.com\");\n            if (!this._googleCastLoader) {\n                const $module = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-VGbd3Q_b.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js\")).then(function(n) {\n                    return n.loader;\n                });\n                this._googleCastLoader = new $module.GoogleCastLoader();\n            }\n            await this._googleCastLoader.prompt(this._media);\n            if (trigger) {\n                this._request._queue._enqueue(\"media-google-cast-request\", trigger);\n            }\n            const isConnecting = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.remotePlaybackState) !== \"disconnected\";\n            if (isConnecting) {\n                this.$state.savedState.set({\n                    paused: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.paused),\n                    currentTime: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.currentTime)\n                });\n            }\n            this.$state.remotePlaybackLoader.set(isConnecting ? this._googleCastLoader : null);\n        } catch (error) {\n            this._request._queue._delete(\"media-google-cast-request\");\n            {\n                this._logError(\"google cast request failed\", error, trigger);\n            }\n            throw error;\n        }\n    }\n    [\"media-clip-start-change-request\"](event1) {\n        const { clipStartTime } = this.$state;\n        clipStartTime.set(event1.detail);\n    }\n    [\"media-clip-end-change-request\"](event1) {\n        const { clipEndTime } = this.$state;\n        clipEndTime.set(event1.detail);\n        this.dispatch(\"duration-change\", {\n            detail: event1.detail,\n            trigger: event1\n        });\n    }\n    [\"media-duration-change-request\"](event1) {\n        const { providedDuration, clipEndTime } = this.$state;\n        providedDuration.set(event1.detail);\n        if (clipEndTime() <= 0) {\n            this.dispatch(\"duration-change\", {\n                detail: event1.detail,\n                trigger: event1\n            });\n        }\n    }\n    [\"media-audio-track-change-request\"](event1) {\n        const { logger, audioTracks } = this._media;\n        if (audioTracks.readonly) {\n            {\n                logger?.warnGroup(`[vidstack] attempted to change audio track but it is currently read-only`).labelledLog(\"Request Event\", event1).dispatch();\n            }\n            return;\n        }\n        const index = event1.detail, track = audioTracks[index];\n        if (track) {\n            const key = event1.type;\n            this._request._queue._enqueue(key, event1);\n            track.selected = true;\n        } else {\n            logger?.warnGroup(\"[vidstack] failed audio track change request (invalid index)\").labelledLog(\"Audio Tracks\", audioTracks.toArray()).labelledLog(\"Index\", index).labelledLog(\"Request Event\", event1).dispatch();\n        }\n    }\n    async [\"media-enter-fullscreen-request\"](event1) {\n        try {\n            await this._enterFullscreen(event1.detail, event1);\n        } catch (error) {\n            this._onFullscreenError(error, event1);\n        }\n    }\n    async [\"media-exit-fullscreen-request\"](event1) {\n        try {\n            await this._exitFullscreen(event1.detail, event1);\n        } catch (error) {\n            this._onFullscreenError(error, event1);\n        }\n    }\n    async _onFullscreenChange(event1) {\n        const lockType = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$props.fullscreenOrientation), isFullscreen = event1.detail;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(lockType) || lockType === \"none\" || !this._orientation.supported) return;\n        if (isFullscreen) {\n            if (this._orientation.locked) return;\n            this.dispatch(\"media-orientation-lock-request\", {\n                detail: lockType,\n                trigger: event1\n            });\n        } else if (this._orientation.locked) {\n            this.dispatch(\"media-orientation-unlock-request\", {\n                trigger: event1\n            });\n        }\n    }\n    _onFullscreenError(error, request) {\n        {\n            this._logError(\"fullscreen request failed\", error, request);\n        }\n        this._stateMgr._handle(this.createEvent(\"fullscreen-error\", {\n            detail: coerceToError(error)\n        }));\n    }\n    async [\"media-orientation-lock-request\"](event1) {\n        const key = event1.type;\n        try {\n            this._request._queue._enqueue(key, event1);\n            await this._orientation.lock(event1.detail);\n        } catch (error) {\n            this._request._queue._delete(key);\n            {\n                this._logError(\"failed to lock screen orientation\", error, event1);\n            }\n        }\n    }\n    async [\"media-orientation-unlock-request\"](event1) {\n        const key = event1.type;\n        try {\n            this._request._queue._enqueue(key, event1);\n            await this._orientation.unlock();\n        } catch (error) {\n            this._request._queue._delete(key);\n            {\n                this._logError(\"failed to unlock screen orientation\", error, event1);\n            }\n        }\n    }\n    async [\"media-enter-pip-request\"](event1) {\n        try {\n            await this._enterPictureInPicture(event1);\n        } catch (error) {\n            this._onPictureInPictureError(error, event1);\n        }\n    }\n    async [\"media-exit-pip-request\"](event1) {\n        try {\n            await this._exitPictureInPicture(event1);\n        } catch (error) {\n            this._onPictureInPictureError(error, event1);\n        }\n    }\n    _onPictureInPictureError(error, request) {\n        {\n            this._logError(\"pip request failed\", error, request);\n        }\n        this._stateMgr._handle(this.createEvent(\"picture-in-picture-error\", {\n            detail: coerceToError(error)\n        }));\n    }\n    [\"media-live-edge-request\"](event1) {\n        const { live, liveEdge, canSeek } = this.$state;\n        if (!live() || liveEdge() || !canSeek()) return;\n        this._request._queue._enqueue(\"media-seek-request\", event1);\n        try {\n            this._seekToLiveEdge();\n        } catch (error) {\n            this._request._queue._delete(\"media-seek-request\");\n            {\n                this._logError(\"seek to live edge fail\", error, event1);\n            }\n        }\n    }\n    async [\"media-loop-request\"](event1) {\n        try {\n            this._request._looping = true;\n            this._request._replaying = true;\n            await this._play(event1);\n        } catch (error) {\n            this._request._looping = false;\n        }\n    }\n    [\"media-user-loop-change-request\"](event1) {\n        this.$state.userPrefersLoop.set(event1.detail);\n    }\n    async [\"media-pause-request\"](event1) {\n        if (this.$state.paused()) return;\n        try {\n            await this._pause(event1);\n        } catch (error) {}\n    }\n    async [\"media-play-request\"](event1) {\n        if (!this.$state.paused()) return;\n        try {\n            await this._play(event1);\n        } catch (e) {}\n    }\n    [\"media-rate-change-request\"](event1) {\n        const { playbackRate, canSetPlaybackRate } = this.$state;\n        if (playbackRate() === event1.detail || !canSetPlaybackRate()) return;\n        const provider = this._$provider();\n        if (!provider?.setPlaybackRate) return;\n        this._request._queue._enqueue(\"media-rate-change-request\", event1);\n        provider.setPlaybackRate(event1.detail);\n    }\n    [\"media-audio-gain-change-request\"](event1) {\n        try {\n            this._setAudioGain(event1.detail, event1);\n        } catch (e) {}\n    }\n    [\"media-quality-change-request\"](event1) {\n        const { qualities, storage, logger } = this._media;\n        if (qualities.readonly) {\n            {\n                logger?.warnGroup(`[vidstack] attempted to change video quality but it is currently read-only`).labelledLog(\"Request Event\", event1).dispatch();\n            }\n            return;\n        }\n        this._request._queue._enqueue(\"media-quality-change-request\", event1);\n        const index = event1.detail;\n        if (index < 0) {\n            qualities.autoSelect(event1);\n            if (event1.isOriginTrusted) storage?.setVideoQuality?.(null);\n        } else {\n            const quality = qualities[index];\n            if (quality) {\n                quality.selected = true;\n                if (event1.isOriginTrusted) {\n                    storage?.setVideoQuality?.({\n                        id: quality.id,\n                        width: quality.width,\n                        height: quality.height,\n                        bitrate: quality.bitrate\n                    });\n                }\n            } else {\n                logger?.warnGroup(\"[vidstack] failed quality change request (invalid index)\").labelledLog(\"Qualities\", qualities.toArray()).labelledLog(\"Index\", index).labelledLog(\"Request Event\", event1).dispatch();\n            }\n        }\n    }\n    [\"media-pause-controls-request\"](event1) {\n        const key = event1.type;\n        this._request._queue._enqueue(key, event1);\n        this._controls.pause(event1);\n    }\n    [\"media-resume-controls-request\"](event1) {\n        const key = event1.type;\n        this._request._queue._enqueue(key, event1);\n        this._controls.resume(event1);\n    }\n    [\"media-seek-request\"](event1) {\n        const { seekableStart, seekableEnd, ended, canSeek, live, userBehindLiveEdge, clipStartTime } = this.$state, seekTime = event1.detail;\n        if (ended()) this._request._replaying = true;\n        const key = event1.type;\n        this._request._seeking = false;\n        this._request._queue._delete(key);\n        const clippedTime = seekTime + clipStartTime(), isEnd = Math.floor(clippedTime) === Math.floor(seekableEnd()), boundTime = isEnd ? seekableEnd() : Math.min(Math.max(seekableStart() + 0.1, clippedTime), seekableEnd() - 0.1);\n        if (!Number.isFinite(boundTime) || !canSeek()) return;\n        this._request._queue._enqueue(key, event1);\n        this._$provider().setCurrentTime(boundTime);\n        if (live() && event1.isOriginTrusted && Math.abs(seekableEnd() - boundTime) >= 2) {\n            userBehindLiveEdge.set(true);\n        }\n    }\n    [\"media-seeking-request\"](event1) {\n        const key = event1.type;\n        this._request._queue._enqueue(key, event1);\n        this.$state.seeking.set(true);\n        this._request._seeking = true;\n    }\n    [\"media-start-loading\"](event1) {\n        if (this.$state.canLoad()) return;\n        const key = event1.type;\n        this._request._queue._enqueue(key, event1);\n        this._stateMgr._handle(this.createEvent(\"can-load\"));\n    }\n    [\"media-poster-start-loading\"](event1) {\n        if (this.$state.canLoadPoster()) return;\n        const key = event1.type;\n        this._request._queue._enqueue(key, event1);\n        this._stateMgr._handle(this.createEvent(\"can-load-poster\"));\n    }\n    [\"media-text-track-change-request\"](event1) {\n        const { index, mode } = event1.detail, track = this._media.textTracks[index];\n        if (track) {\n            const key = event1.type;\n            this._request._queue._enqueue(key, event1);\n            track.setMode(mode, event1);\n        } else {\n            this._media.logger?.warnGroup(\"[vidstack] failed text track change request (invalid index)\").labelledLog(\"Text Tracks\", this._media.textTracks.toArray()).labelledLog(\"Index\", index).labelledLog(\"Request Event\", event1).dispatch();\n        }\n    }\n    [\"media-mute-request\"](event1) {\n        if (this.$state.muted()) return;\n        const key = event1.type;\n        this._request._queue._enqueue(key, event1);\n        this._$provider().setMuted(true);\n    }\n    [\"media-unmute-request\"](event1) {\n        const { muted, volume } = this.$state;\n        if (!muted()) return;\n        const key = event1.type;\n        this._request._queue._enqueue(key, event1);\n        this._media.$provider().setMuted(false);\n        if (volume() === 0) {\n            this._request._queue._enqueue(key, event1);\n            this._$provider().setVolume(0.25);\n        }\n    }\n    [\"media-volume-change-request\"](event1) {\n        const { muted, volume } = this.$state;\n        const newVolume = event1.detail;\n        if (volume() === newVolume) return;\n        const key = event1.type;\n        this._request._queue._enqueue(key, event1);\n        this._$provider().setVolume(newVolume);\n        if (newVolume > 0 && muted()) {\n            this._request._queue._enqueue(key, event1);\n            this._$provider().setMuted(false);\n        }\n    }\n    _logError(title, error, request) {\n        this._media.logger?.errorGroup(`[vidstack] ${title}`).labelledLog(\"Error\", error).labelledLog(\"Media Context\", {\n            ...this._media\n        }).labelledLog(\"Trigger Event\", request).dispatch();\n    }\n}\nfunction throwIfNotReadyForPlayback(provider, canPlay) {\n    if (provider && canPlay) return;\n    throw Error(`[vidstack] media is not ready - wait for \\`can-play\\` event.`);\n}\nfunction throwIfFullscreenNotSupported(target, fullscreen) {\n    if (fullscreen?.supported) return;\n    throw Error(`[vidstack] fullscreen is not currently available on target \\`${target}\\``);\n}\nclass MediaRequestContext {\n    constructor(){\n        this._seeking = false;\n        this._looping = false;\n        this._replaying = false;\n        this._queue = new Queue();\n    }\n}\nconst TRACKED_EVENT = /* @__PURE__ */ new Set([\n    \"auto-play\",\n    \"auto-play-fail\",\n    \"can-load\",\n    \"sources-change\",\n    \"source-change\",\n    \"load-start\",\n    \"abort\",\n    \"error\",\n    \"loaded-metadata\",\n    \"loaded-data\",\n    \"can-play\",\n    \"play\",\n    \"play-fail\",\n    \"pause\",\n    \"playing\",\n    \"seeking\",\n    \"seeked\",\n    \"waiting\"\n]);\nclass MediaStateManager extends MediaPlayerController {\n    constructor(_request, _media){\n        super();\n        this._request = _request;\n        this._media = _media;\n        this._trackedEvents = /* @__PURE__ */ new Map();\n        this._clipEnded = false;\n        this._playedIntervals = [];\n        this._playedInterval = [\n            -1,\n            -1\n        ];\n        this._firingWaiting = false;\n        this._isPlayingOnDisconnect = false;\n        this._stopQualityResizeEffect = null;\n        this[\"seeking\"] = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)((event1)=>{\n            const { seeking, realCurrentTime, paused } = this.$state;\n            seeking.set(true);\n            realCurrentTime.set(event1.detail);\n            this._satisfyRequest(\"media-seeking-request\", event1);\n            if (paused()) {\n                this._waitingTrigger = event1;\n                this._fireWaiting();\n            }\n            this._playedInterval = [\n                -1,\n                -1\n            ];\n        }, 150, {\n            leading: true\n        });\n        this._fireWaiting = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionDebounce)(()=>{\n            if (!this._waitingTrigger) return;\n            this._firingWaiting = true;\n            const { waiting, playing } = this.$state;\n            waiting.set(true);\n            playing.set(false);\n            const event1 = this.createEvent(\"waiting\", {\n                trigger: this._waitingTrigger\n            });\n            this._trackedEvents.set(\"waiting\", event1);\n            this.dispatch(event1);\n            this._waitingTrigger = void 0;\n            this._firingWaiting = false;\n        }, 300);\n    }\n    onAttach(el) {\n        el.setAttribute(\"aria-busy\", \"true\");\n        this.listen(\"fullscreen-change\", this[\"fullscreen-change\"].bind(this));\n        this.listen(\"fullscreen-error\", this[\"fullscreen-error\"].bind(this));\n        this.listen(\"orientation-change\", this[\"orientation-change\"].bind(this));\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCanSetVolume.bind(this));\n        this._addTextTrackListeners();\n        this._addQualityListeners();\n        this._addAudioTrackListeners();\n        this._resumePlaybackOnConnect();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._pausePlaybackOnDisconnect.bind(this));\n    }\n    onDestroy() {\n        const { audioTracks, qualities, textTracks } = this._media;\n        audioTracks[ListSymbol._reset]();\n        qualities[ListSymbol._reset]();\n        textTracks[ListSymbol._reset]();\n        this._stopWatchingQualityResize();\n    }\n    _handle(event1) {\n        if (!this.scope) return;\n        const type = event1.type;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(()=>this[event1.type]?.(event1));\n        if (!IS_SERVER) {\n            if (TRACKED_EVENT.has(type)) this._trackedEvents.set(type, event1);\n            this.dispatch(event1);\n        }\n    }\n    _resumePlaybackOnConnect() {\n        if (!this._isPlayingOnDisconnect) return;\n        requestAnimationFrame(()=>{\n            if (!this.scope) return;\n            this._media.remote.play(new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dom-connect\"));\n        });\n        this._isPlayingOnDisconnect = false;\n    }\n    _pausePlaybackOnDisconnect() {\n        if (this._isPlayingOnDisconnect) return;\n        this._isPlayingOnDisconnect = !this.$state.paused();\n        this._media.$provider()?.pause();\n    }\n    _resetTracking() {\n        this._stopWaiting();\n        this._clipEnded = false;\n        this._request._replaying = false;\n        this._request._looping = false;\n        this._firingWaiting = false;\n        this._waitingTrigger = void 0;\n        this._trackedEvents.clear();\n    }\n    _satisfyRequest(request, event1) {\n        const requestEvent = this._request._queue._serve(request);\n        if (!requestEvent) return;\n        event1.request = requestEvent;\n        event1.triggers.add(requestEvent);\n    }\n    _addTextTrackListeners() {\n        this._onTextTracksChange();\n        this._onTextTrackModeChange();\n        const textTracks = this._media.textTracks;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(textTracks, \"add\", this._onTextTracksChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(textTracks, \"remove\", this._onTextTracksChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(textTracks, \"mode-change\", this._onTextTrackModeChange.bind(this));\n    }\n    _addQualityListeners() {\n        const qualities = this._media.qualities;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(qualities, \"add\", this._onQualitiesChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(qualities, \"remove\", this._onQualitiesChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(qualities, \"change\", this._onQualityChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(qualities, \"auto-change\", this._onAutoQualityChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(qualities, \"readonly-change\", this._onCanSetQualityChange.bind(this));\n    }\n    _addAudioTrackListeners() {\n        const audioTracks = this._media.audioTracks;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(audioTracks, \"add\", this._onAudioTracksChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(audioTracks, \"remove\", this._onAudioTracksChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(audioTracks, \"change\", this._onAudioTrackChange.bind(this));\n    }\n    _onTextTracksChange(event1) {\n        const { textTracks } = this.$state;\n        textTracks.set(this._media.textTracks.toArray());\n        this.dispatch(\"text-tracks-change\", {\n            detail: textTracks(),\n            trigger: event1\n        });\n    }\n    _onTextTrackModeChange(event1) {\n        if (event1) this._satisfyRequest(\"media-text-track-change-request\", event1);\n        const current = this._media.textTracks.selected, { textTrack } = this.$state;\n        if (textTrack() !== current) {\n            textTrack.set(current);\n            this.dispatch(\"text-track-change\", {\n                detail: current,\n                trigger: event1\n            });\n        }\n    }\n    _onAudioTracksChange(event1) {\n        const { audioTracks } = this.$state;\n        audioTracks.set(this._media.audioTracks.toArray());\n        this.dispatch(\"audio-tracks-change\", {\n            detail: audioTracks(),\n            trigger: event1\n        });\n    }\n    _onAudioTrackChange(event1) {\n        const { audioTrack } = this.$state;\n        audioTrack.set(this._media.audioTracks.selected);\n        if (event1) this._satisfyRequest(\"media-audio-track-change-request\", event1);\n        this.dispatch(\"audio-track-change\", {\n            detail: audioTrack(),\n            trigger: event1\n        });\n    }\n    _onQualitiesChange(event1) {\n        const { qualities } = this.$state;\n        qualities.set(this._media.qualities.toArray());\n        this.dispatch(\"qualities-change\", {\n            detail: qualities(),\n            trigger: event1\n        });\n    }\n    _onQualityChange(event1) {\n        const { quality } = this.$state;\n        quality.set(this._media.qualities.selected);\n        if (event1) this._satisfyRequest(\"media-quality-change-request\", event1);\n        this.dispatch(\"quality-change\", {\n            detail: quality(),\n            trigger: event1\n        });\n    }\n    _onAutoQualityChange() {\n        const { qualities } = this._media, isAuto = qualities.auto;\n        this.$state.autoQuality.set(isAuto);\n        if (!isAuto) this._stopWatchingQualityResize();\n    }\n    _watchQualityResize() {\n        this._stopWatchingQualityResize();\n        this._stopQualityResizeEffect = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const { qualities } = this._media, { mediaWidth, mediaHeight } = this.$state, w = mediaWidth(), h = mediaHeight();\n            if (w === 0 || h === 0) return;\n            let selectedQuality = null, minScore = Infinity;\n            for (const quality of qualities){\n                const score = Math.abs(quality.width - w) + Math.abs(quality.height - h);\n                if (score < minScore) {\n                    minScore = score;\n                    selectedQuality = quality;\n                }\n            }\n            if (selectedQuality) {\n                qualities[ListSymbol._select](selectedQuality, true, new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"resize\", {\n                    detail: {\n                        width: w,\n                        height: h\n                    }\n                }));\n            }\n        });\n    }\n    _stopWatchingQualityResize() {\n        this._stopQualityResizeEffect?.();\n        this._stopQualityResizeEffect = null;\n    }\n    _onCanSetQualityChange() {\n        this.$state.canSetQuality.set(!this._media.qualities.readonly);\n    }\n    _watchCanSetVolume() {\n        const { canSetVolume, isGoogleCastConnected } = this.$state;\n        if (isGoogleCastConnected()) {\n            canSetVolume.set(false);\n            return;\n        }\n        canChangeVolume().then(canSetVolume.set);\n    }\n    [\"provider-change\"](event1) {\n        const prevProvider = this._media.$provider(), newProvider = event1.detail;\n        if (prevProvider?.type === newProvider?.type) return;\n        prevProvider?.destroy?.();\n        prevProvider?.scope?.dispose();\n        this._media.$provider.set(event1.detail);\n        if (prevProvider && event1.detail === null) {\n            this._resetMediaState(event1);\n        }\n    }\n    [\"provider-loader-change\"](event1) {\n        {\n            this._media.logger?.infoGroup(`Loader change \\`${event1.detail?.constructor.name}\\``).labelledLog(\"Event\", event1).dispatch();\n        }\n    }\n    [\"auto-play\"](event1) {\n        this.$state.autoPlayError.set(null);\n    }\n    [\"auto-play-fail\"](event1) {\n        this.$state.autoPlayError.set(event1.detail);\n        this._resetTracking();\n    }\n    [\"can-load\"](event1) {\n        this.$state.canLoad.set(true);\n        this._trackedEvents.set(\"can-load\", event1);\n        this._media.textTracks[TextTrackSymbol._canLoad]();\n        this._satisfyRequest(\"media-start-loading\", event1);\n    }\n    [\"can-load-poster\"](event1) {\n        this.$state.canLoadPoster.set(true);\n        this._trackedEvents.set(\"can-load-poster\", event1);\n        this._satisfyRequest(\"media-poster-start-loading\", event1);\n    }\n    [\"media-type-change\"](event1) {\n        const sourceChangeEvent = this._trackedEvents.get(\"source-change\");\n        if (sourceChangeEvent) event1.triggers.add(sourceChangeEvent);\n        const viewType = this.$state.viewType();\n        this.$state.mediaType.set(event1.detail);\n        const providedViewType = this.$state.providedViewType(), currentViewType = providedViewType === \"unknown\" ? event1.detail : providedViewType;\n        if (viewType !== currentViewType) {\n            if (IS_SERVER) {\n                this.$state.inferredViewType.set(currentViewType);\n            } else {\n                setTimeout(()=>{\n                    requestAnimationFrame(()=>{\n                        if (!this.scope) return;\n                        this.$state.inferredViewType.set(event1.detail);\n                        this.dispatch(\"view-type-change\", {\n                            detail: currentViewType,\n                            trigger: event1\n                        });\n                    });\n                }, 0);\n            }\n        }\n    }\n    [\"stream-type-change\"](event1) {\n        const sourceChangeEvent = this._trackedEvents.get(\"source-change\");\n        if (sourceChangeEvent) event1.triggers.add(sourceChangeEvent);\n        const { streamType, inferredStreamType } = this.$state;\n        inferredStreamType.set(event1.detail);\n        event1.detail = streamType();\n    }\n    [\"rate-change\"](event1) {\n        const { storage } = this._media, { canPlay } = this.$state;\n        this.$state.playbackRate.set(event1.detail);\n        this._satisfyRequest(\"media-rate-change-request\", event1);\n        if (canPlay()) {\n            storage?.setPlaybackRate?.(event1.detail);\n        }\n    }\n    [\"remote-playback-change\"](event1) {\n        const { remotePlaybackState, remotePlaybackType } = this.$state, { type, state } = event1.detail, isConnected = state === \"connected\";\n        remotePlaybackType.set(type);\n        remotePlaybackState.set(state);\n        const key = type === \"airplay\" ? \"media-airplay-request\" : \"media-google-cast-request\";\n        if (isConnected) {\n            this._satisfyRequest(key, event1);\n        } else {\n            const requestEvent = this._request._queue._peek(key);\n            if (requestEvent) {\n                event1.request = requestEvent;\n                event1.triggers.add(requestEvent);\n            }\n        }\n    }\n    [\"sources-change\"](event1) {\n        const prevSources = this.$state.sources(), newSources = event1.detail;\n        this.$state.sources.set(newSources);\n        this._onSourceQualitiesChange(prevSources, newSources, event1);\n    }\n    _onSourceQualitiesChange(prevSources, newSources, trigger) {\n        let { qualities } = this._media, added = false, removed = false;\n        for (const prevSrc of prevSources){\n            if (!isVideoQualitySrc(prevSrc)) continue;\n            const exists = newSources.some((s)=>s.src === prevSrc.src);\n            if (!exists) {\n                const quality = qualities.getBySrc(prevSrc.src);\n                if (quality) {\n                    qualities[ListSymbol._remove](quality, trigger);\n                    removed = true;\n                }\n            }\n        }\n        if (removed && !qualities.length) {\n            this.$state.savedState.set(null);\n            qualities[ListSymbol._reset](trigger);\n        }\n        for (const src of newSources){\n            if (!isVideoQualitySrc(src) || qualities.getBySrc(src.src)) continue;\n            const quality = {\n                id: src.id ?? src.height + \"p\",\n                bitrate: null,\n                codec: null,\n                ...src,\n                selected: false\n            };\n            qualities[ListSymbol._add](quality, trigger);\n            added = true;\n        }\n        if (added && !qualities[QualitySymbol._enableAuto]) {\n            this._watchQualityResize();\n            qualities[QualitySymbol._enableAuto] = this._watchQualityResize.bind(this);\n            qualities[QualitySymbol._setAuto](true, trigger);\n        }\n    }\n    [\"source-change\"](event1) {\n        event1.isQualityChange = event1.originEvent?.type === \"quality-change\";\n        const source = event1.detail;\n        this._resetMediaState(event1, event1.isQualityChange);\n        this._trackedEvents.set(event1.type, event1);\n        this.$state.source.set(source);\n        this.el?.setAttribute(\"aria-busy\", \"true\");\n        {\n            this._media.logger?.infoGroup(\"\\uD83D\\uDCFC Media source change\").labelledLog(\"Source\", source).dispatch();\n        }\n    }\n    _resetMediaState(event1, isSourceQualityChange = false) {\n        const { audioTracks, qualities } = this._media;\n        if (!isSourceQualityChange) {\n            this._playedIntervals = [];\n            this._playedInterval = [\n                -1,\n                -1\n            ];\n            audioTracks[ListSymbol._reset](event1);\n            qualities[ListSymbol._reset](event1);\n            softResetMediaState(this.$state, isSourceQualityChange);\n            this._resetTracking();\n            return;\n        }\n        softResetMediaState(this.$state, isSourceQualityChange);\n        this._resetTracking();\n    }\n    [\"abort\"](event1) {\n        const sourceChangeEvent = this._trackedEvents.get(\"source-change\");\n        if (sourceChangeEvent) event1.triggers.add(sourceChangeEvent);\n        const canLoadEvent = this._trackedEvents.get(\"can-load\");\n        if (canLoadEvent && !event1.triggers.hasType(\"can-load\")) {\n            event1.triggers.add(canLoadEvent);\n        }\n    }\n    [\"load-start\"](event1) {\n        const sourceChangeEvent = this._trackedEvents.get(\"source-change\");\n        if (sourceChangeEvent) event1.triggers.add(sourceChangeEvent);\n    }\n    [\"error\"](event1) {\n        this.$state.error.set(event1.detail);\n        const abortEvent = this._trackedEvents.get(\"abort\");\n        if (abortEvent) event1.triggers.add(abortEvent);\n        {\n            this._media.logger?.errorGroup(\"Media Error\").labelledLog(\"Error\", event1.detail).labelledLog(\"Event\", event1).labelledLog(\"Context\", this._media).dispatch();\n        }\n    }\n    [\"loaded-metadata\"](event1) {\n        const loadStartEvent = this._trackedEvents.get(\"load-start\");\n        if (loadStartEvent) event1.triggers.add(loadStartEvent);\n    }\n    [\"loaded-data\"](event1) {\n        const loadStartEvent = this._trackedEvents.get(\"load-start\");\n        if (loadStartEvent) event1.triggers.add(loadStartEvent);\n    }\n    [\"can-play\"](event1) {\n        const loadedMetadata = this._trackedEvents.get(\"loaded-metadata\");\n        if (loadedMetadata) event1.triggers.add(loadedMetadata);\n        this._onCanPlayDetail(event1.detail);\n        this.el?.setAttribute(\"aria-busy\", \"false\");\n    }\n    [\"can-play-through\"](event1) {\n        this._onCanPlayDetail(event1.detail);\n        const canPlay = this._trackedEvents.get(\"can-play\");\n        if (canPlay) event1.triggers.add(canPlay);\n    }\n    _onCanPlayDetail(detail) {\n        const { seekable, buffered, intrinsicDuration, canPlay } = this.$state;\n        canPlay.set(true);\n        buffered.set(detail.buffered);\n        seekable.set(detail.seekable);\n        const seekableEnd = getTimeRangesEnd(detail.seekable) ?? Infinity;\n        intrinsicDuration.set(seekableEnd);\n    }\n    [\"duration-change\"](event1) {\n        const { live, intrinsicDuration, providedDuration, clipEndTime, ended } = this.$state, time = event1.detail;\n        if (!live()) {\n            const duration = !Number.isNaN(time) ? time : 0;\n            intrinsicDuration.set(duration);\n            if (ended()) this._onEndPrecisionChange(event1);\n        }\n        if (providedDuration() > 0 || clipEndTime() > 0) {\n            event1.stopImmediatePropagation();\n        }\n    }\n    [\"progress\"](event1) {\n        const { buffered, bufferedEnd, seekable, seekableEnd, live, intrinsicDuration } = this.$state, { buffered: newBuffered, seekable: newSeekable } = event1.detail, newBufferedEnd = getTimeRangesEnd(newBuffered) ?? Infinity, hasBufferedLengthChanged = newBuffered.length !== buffered().length, hasBufferedEndChanged = newBufferedEnd > bufferedEnd(), newSeekableEnd = getTimeRangesEnd(newSeekable) ?? Infinity, hasSeekableLengthChanged = newSeekable.length !== seekable().length, hasSeekableEndChanged = newSeekableEnd > seekableEnd();\n        if (hasBufferedLengthChanged || hasBufferedEndChanged) {\n            buffered.set(newBuffered);\n        }\n        if (hasSeekableLengthChanged || hasSeekableEndChanged) {\n            seekable.set(newSeekable);\n        }\n        if (live()) {\n            intrinsicDuration.set(newSeekableEnd);\n            this.dispatch(\"duration-change\", {\n                detail: newSeekableEnd,\n                trigger: event1\n            });\n        }\n    }\n    [\"play\"](event1) {\n        const { paused, autoPlayError, ended, autoPlaying, playsInline, pointer, muted, viewType, live, userBehindLiveEdge } = this.$state;\n        this._resetPlaybackIfNeeded();\n        if (!paused()) {\n            event1.stopImmediatePropagation();\n            return;\n        }\n        event1.autoPlay = autoPlaying();\n        const waitingEvent = this._trackedEvents.get(\"waiting\");\n        if (waitingEvent) event1.triggers.add(waitingEvent);\n        this._satisfyRequest(\"media-play-request\", event1);\n        this._trackedEvents.set(\"play\", event1);\n        paused.set(false);\n        autoPlayError.set(null);\n        if (event1.autoPlay) {\n            this._handle(this.createEvent(\"auto-play\", {\n                detail: {\n                    muted: muted()\n                },\n                trigger: event1\n            }));\n            autoPlaying.set(false);\n        }\n        if (ended() || this._request._replaying) {\n            this._request._replaying = false;\n            ended.set(false);\n            this._handle(this.createEvent(\"replay\", {\n                trigger: event1\n            }));\n        }\n        if (!playsInline() && viewType() === \"video\" && pointer() === \"coarse\") {\n            this._media.remote.enterFullscreen(\"prefer-media\", event1);\n        }\n        if (live() && !userBehindLiveEdge()) {\n            this._media.remote.seekToLiveEdge(event1);\n        }\n    }\n    _resetPlaybackIfNeeded(trigger) {\n        const provider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._media.$provider);\n        if (!provider) return;\n        const { ended, seekableStart, clipStartTime, clipEndTime, realCurrentTime, duration } = this.$state;\n        const shouldReset = realCurrentTime() < clipStartTime() || clipEndTime() > 0 && realCurrentTime() >= clipEndTime() || Math.abs(realCurrentTime() - duration()) < 0.1 || ended();\n        if (shouldReset) {\n            this.dispatch(\"media-seek-request\", {\n                detail: (clipStartTime() > 0 ? 0 : seekableStart()) + 0.1,\n                trigger\n            });\n        }\n        return shouldReset;\n    }\n    [\"play-fail\"](event1) {\n        const { muted, autoPlaying } = this.$state;\n        const playEvent = this._trackedEvents.get(\"play\");\n        if (playEvent) event1.triggers.add(playEvent);\n        this._satisfyRequest(\"media-play-request\", event1);\n        const { paused, playing } = this.$state;\n        paused.set(true);\n        playing.set(false);\n        this._resetTracking();\n        this._trackedEvents.set(\"play-fail\", event1);\n        if (event1.autoPlay) {\n            this._handle(this.createEvent(\"auto-play-fail\", {\n                detail: {\n                    muted: muted(),\n                    error: event1.detail\n                },\n                trigger: event1\n            }));\n            autoPlaying.set(false);\n        }\n    }\n    [\"playing\"](event1) {\n        const playEvent = this._trackedEvents.get(\"play\"), seekedEvent = this._trackedEvents.get(\"seeked\");\n        if (playEvent) event1.triggers.add(playEvent);\n        else if (seekedEvent) event1.triggers.add(seekedEvent);\n        setTimeout(()=>this._resetTracking(), 0);\n        const { paused, playing, live, liveSyncPosition, seekableEnd, started, currentTime, seeking, ended } = this.$state;\n        paused.set(false);\n        playing.set(true);\n        seeking.set(false);\n        ended.set(false);\n        if (this._request._looping) {\n            this._request._looping = false;\n            return;\n        }\n        if (live() && !started() && currentTime() === 0) {\n            const end = liveSyncPosition() ?? seekableEnd() - 2;\n            if (Number.isFinite(end)) this._media.$provider().setCurrentTime(end);\n        }\n        this[\"started\"](event1);\n    }\n    [\"started\"](event1) {\n        const { started } = this.$state;\n        if (!started()) {\n            started.set(true);\n            this._handle(this.createEvent(\"started\", {\n                trigger: event1\n            }));\n        }\n    }\n    [\"pause\"](event1) {\n        if (!this.el?.isConnected) {\n            this._isPlayingOnDisconnect = true;\n        }\n        this._satisfyRequest(\"media-pause-request\", event1);\n        const seekedEvent = this._trackedEvents.get(\"seeked\");\n        if (seekedEvent) event1.triggers.add(seekedEvent);\n        const { paused, playing } = this.$state;\n        paused.set(true);\n        playing.set(false);\n        if (this._clipEnded) {\n            setTimeout(()=>{\n                this._handle(this.createEvent(\"end\", {\n                    trigger: event1\n                }));\n                this._clipEnded = false;\n            }, 0);\n        }\n        this._resetTracking();\n    }\n    [\"time-change\"](event1) {\n        if (this._request._looping) {\n            event1.stopImmediatePropagation();\n            return;\n        }\n        let { waiting, played, clipEndTime, realCurrentTime, currentTime } = this.$state, newTime = event1.detail, endTime = clipEndTime();\n        realCurrentTime.set(newTime);\n        this._updatePlayed();\n        waiting.set(false);\n        for (const track of this._media.textTracks){\n            track[TextTrackSymbol._updateActiveCues](newTime, event1);\n        }\n        if (endTime > 0 && newTime >= endTime) {\n            this._clipEnded = true;\n            this.dispatch(\"media-pause-request\", {\n                trigger: event1\n            });\n        }\n        this._saveTime();\n        this.dispatch(\"time-update\", {\n            detail: {\n                currentTime: currentTime(),\n                played: played()\n            },\n            trigger: event1\n        });\n    }\n    _updatePlayed() {\n        const { currentTime, played, paused } = this.$state;\n        if (paused()) return;\n        this._playedInterval = updateTimeIntervals(this._playedIntervals, this._playedInterval, currentTime());\n        played.set(new TimeRange(this._playedIntervals));\n    }\n    // Called to update time again incase duration precision has changed.\n    _onEndPrecisionChange(trigger) {\n        const { clipStartTime, clipEndTime, duration } = this.$state, isClipped = clipStartTime() > 0 || clipEndTime() > 0;\n        if (isClipped) return;\n        this._handle(this.createEvent(\"time-change\", {\n            detail: duration(),\n            trigger\n        }));\n    }\n    _saveTime() {\n        const { storage } = this._media, { canPlay, realCurrentTime } = this.$state;\n        if (canPlay()) {\n            storage?.setTime?.(realCurrentTime());\n        }\n    }\n    [\"audio-gain-change\"](event1) {\n        const { storage } = this._media, { canPlay, audioGain } = this.$state;\n        audioGain.set(event1.detail);\n        this._satisfyRequest(\"media-audio-gain-change-request\", event1);\n        if (canPlay()) storage?.setAudioGain?.(audioGain());\n    }\n    [\"volume-change\"](event1) {\n        const { storage } = this._media, { volume, muted, canPlay } = this.$state, detail = event1.detail;\n        volume.set(detail.volume);\n        muted.set(detail.muted || detail.volume === 0);\n        this._satisfyRequest(\"media-volume-change-request\", event1);\n        this._satisfyRequest(detail.muted ? \"media-mute-request\" : \"media-unmute-request\", event1);\n        if (canPlay()) {\n            storage?.setVolume?.(volume());\n            storage?.setMuted?.(muted());\n        }\n    }\n    [\"seeked\"](event1) {\n        const { seeking, currentTime, realCurrentTime, paused, seekableEnd, ended } = this.$state;\n        if (this._request._seeking) {\n            seeking.set(true);\n            event1.stopImmediatePropagation();\n        } else if (seeking()) {\n            const waitingEvent = this._trackedEvents.get(\"waiting\");\n            if (waitingEvent) event1.triggers.add(waitingEvent);\n            const seekingEvent = this._trackedEvents.get(\"seeking\");\n            if (seekingEvent && !event1.triggers.has(seekingEvent)) {\n                event1.triggers.add(seekingEvent);\n            }\n            if (paused()) this._stopWaiting();\n            seeking.set(false);\n            realCurrentTime.set(event1.detail);\n            this._satisfyRequest(\"media-seek-request\", event1);\n            const origin = event1?.originEvent;\n            if (origin?.isTrusted && !/seek/.test(origin.type)) {\n                this[\"started\"](event1);\n            }\n        }\n        if (Math.floor(currentTime()) !== Math.floor(seekableEnd())) {\n            ended.set(false);\n        } else {\n            this.end(event1);\n        }\n    }\n    [\"waiting\"](event1) {\n        if (this._firingWaiting || this._request._seeking) return;\n        event1.stopImmediatePropagation();\n        this._waitingTrigger = event1;\n        this._fireWaiting();\n    }\n    [\"end\"](event1) {\n        const { loop, ended } = this.$state;\n        if (!loop() && ended()) return;\n        if (loop()) {\n            setTimeout(()=>{\n                requestAnimationFrame(()=>{\n                    this._resetPlaybackIfNeeded(event1);\n                    this.dispatch(\"media-loop-request\", {\n                        trigger: event1\n                    });\n                });\n            }, 10);\n            return;\n        }\n        setTimeout(()=>this._onEnded(event1), 0);\n    }\n    _onEnded(event1) {\n        const { storage } = this._media, { paused, seeking, ended, duration } = this.$state;\n        this._onEndPrecisionChange(event1);\n        if (!paused()) {\n            this.dispatch(\"pause\", {\n                trigger: event1\n            });\n        }\n        if (seeking()) {\n            this.dispatch(\"seeked\", {\n                detail: duration(),\n                trigger: event1\n            });\n        }\n        ended.set(true);\n        this._resetTracking();\n        storage?.setTime?.(duration(), true);\n        this.dispatch(\"ended\", {\n            trigger: event1\n        });\n    }\n    _stopWaiting() {\n        this._fireWaiting.cancel();\n        this.$state.waiting.set(false);\n    }\n    [\"fullscreen-change\"](event1) {\n        const isFullscreen = event1.detail;\n        this.$state.fullscreen.set(isFullscreen);\n        this._satisfyRequest(isFullscreen ? \"media-enter-fullscreen-request\" : \"media-exit-fullscreen-request\", event1);\n    }\n    [\"fullscreen-error\"](event1) {\n        this._satisfyRequest(\"media-enter-fullscreen-request\", event1);\n        this._satisfyRequest(\"media-exit-fullscreen-request\", event1);\n    }\n    [\"orientation-change\"](event1) {\n        const isLocked = event1.detail.lock;\n        this._satisfyRequest(isLocked ? \"media-orientation-lock-request\" : \"media-orientation-unlock-request\", event1);\n    }\n    [\"picture-in-picture-change\"](event1) {\n        const isPiP = event1.detail;\n        this.$state.pictureInPicture.set(isPiP);\n        this._satisfyRequest(isPiP ? \"media-enter-pip-request\" : \"media-exit-pip-request\", event1);\n    }\n    [\"picture-in-picture-error\"](event1) {\n        this._satisfyRequest(\"media-enter-pip-request\", event1);\n        this._satisfyRequest(\"media-exit-pip-request\", event1);\n    }\n    [\"title-change\"](event1) {\n        if (!event1.trigger) return;\n        event1.stopImmediatePropagation();\n        this.$state.inferredTitle.set(event1.detail);\n    }\n    [\"poster-change\"](event1) {\n        if (!event1.trigger) return;\n        event1.stopImmediatePropagation();\n        this.$state.inferredPoster.set(event1.detail);\n    }\n}\nclass MediaStateSync extends MediaPlayerController {\n    onSetup() {\n        this._init();\n        if (IS_SERVER) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchLogLevel.bind(this));\n        const effects = [\n            this._watchMetadata,\n            this._watchAutoplay,\n            this._watchClipStartTime,\n            this._watchClipEndTime,\n            this._watchControls,\n            this._watchCrossOrigin,\n            this._watchDuration,\n            this._watchLive,\n            this._watchLiveEdge,\n            this._watchLiveTolerance,\n            this._watchLoop,\n            this._watchPlaysInline,\n            this._watchPoster,\n            this._watchProvidedTypes,\n            this._watchTitle\n        ];\n        for (const callback of effects){\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(callback.bind(this));\n        }\n    }\n    _init() {\n        const providedProps = {\n            duration: \"providedDuration\",\n            loop: \"providedLoop\",\n            poster: \"providedPoster\",\n            streamType: \"providedStreamType\",\n            title: \"providedTitle\",\n            viewType: \"providedViewType\"\n        };\n        const skip = /* @__PURE__ */ new Set([\n            \"currentTime\",\n            \"paused\",\n            \"playbackRate\",\n            \"volume\"\n        ]);\n        for (const prop of Object.keys(this.$props)){\n            if (skip.has(prop)) continue;\n            this.$state[providedProps[prop] ?? prop]?.set(this.$props[prop]());\n        }\n        this.$state.muted.set(this.$props.muted() || this.$props.volume() === 0);\n    }\n    // Sync \"provided\" props with internal state. Provided props are used to differentiate from\n    // provider inferred values.\n    _watchProvidedTypes() {\n        const { viewType, streamType, title, poster, loop } = this.$props, $state = this.$state;\n        $state.providedPoster.set(poster());\n        $state.providedStreamType.set(streamType());\n        $state.providedViewType.set(viewType());\n        $state.providedTitle.set(title());\n        $state.providedLoop.set(loop());\n    }\n    _watchLogLevel() {\n        this.$state.logLevel.set(this.$props.logLevel());\n    }\n    _watchMetadata() {\n        const { artist, artwork } = this.$props;\n        this.$state.artist.set(artist());\n        this.$state.artwork.set(artwork());\n    }\n    _watchTitle() {\n        const { title } = this.$state;\n        this.dispatch(\"title-change\", {\n            detail: title()\n        });\n    }\n    _watchAutoplay() {\n        const autoPlay = this.$props.autoPlay() || this.$props.autoplay();\n        this.$state.autoPlay.set(autoPlay);\n        this.dispatch(\"auto-play-change\", {\n            detail: autoPlay\n        });\n    }\n    _watchLoop() {\n        const loop = this.$state.loop();\n        this.dispatch(\"loop-change\", {\n            detail: loop\n        });\n    }\n    _watchControls() {\n        const controls = this.$props.controls();\n        this.$state.controls.set(controls);\n    }\n    _watchPoster() {\n        const { poster } = this.$state;\n        this.dispatch(\"poster-change\", {\n            detail: poster()\n        });\n    }\n    _watchCrossOrigin() {\n        const _crossOrigin = this.$props.crossOrigin() ?? this.$props.crossorigin(), value = _crossOrigin === true ? \"\" : _crossOrigin;\n        this.$state.crossOrigin.set(value);\n    }\n    _watchDuration() {\n        const { duration } = this.$props;\n        this.dispatch(\"media-duration-change-request\", {\n            detail: duration()\n        });\n    }\n    _watchPlaysInline() {\n        const inline = this.$props.playsInline() || this.$props.playsinline();\n        this.$state.playsInline.set(inline);\n        this.dispatch(\"plays-inline-change\", {\n            detail: inline\n        });\n    }\n    _watchClipStartTime() {\n        const { clipStartTime } = this.$props;\n        this.dispatch(\"media-clip-start-change-request\", {\n            detail: clipStartTime()\n        });\n    }\n    _watchClipEndTime() {\n        const { clipEndTime } = this.$props;\n        this.dispatch(\"media-clip-end-change-request\", {\n            detail: clipEndTime()\n        });\n    }\n    _watchLive() {\n        this.dispatch(\"live-change\", {\n            detail: this.$state.live()\n        });\n    }\n    _watchLiveTolerance() {\n        this.$state.liveEdgeTolerance.set(this.$props.liveEdgeTolerance());\n        this.$state.minLiveDVRWindow.set(this.$props.minLiveDVRWindow());\n    }\n    _watchLiveEdge() {\n        this.dispatch(\"live-edge-change\", {\n            detail: this.$state.liveEdge()\n        });\n    }\n}\nconst _NavigatorMediaSession = class _NavigatorMediaSession extends MediaPlayerController {\n    constructor(){\n        super();\n    }\n    onConnect() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onMetadataChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onPlaybackStateChange.bind(this));\n        const handleAction = this._handleAction.bind(this);\n        for (const action of _NavigatorMediaSession._actions){\n            navigator.mediaSession.setActionHandler(action, handleAction);\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._onDisconnect.bind(this));\n    }\n    _onDisconnect() {\n        for (const action of _NavigatorMediaSession._actions){\n            navigator.mediaSession.setActionHandler(action, null);\n        }\n    }\n    _onMetadataChange() {\n        const { title, artist, artwork, poster } = this.$state;\n        navigator.mediaSession.metadata = new MediaMetadata({\n            title: title(),\n            artist: artist(),\n            artwork: artwork() ?? [\n                {\n                    src: poster()\n                }\n            ]\n        });\n    }\n    _onPlaybackStateChange() {\n        const { canPlay, paused } = this.$state;\n        navigator.mediaSession.playbackState = !canPlay() ? \"none\" : paused() ? \"paused\" : \"playing\";\n    }\n    _handleAction(details) {\n        const trigger = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(`media-session-action`, {\n            detail: details\n        });\n        switch(details.action){\n            case \"play\":\n                this.dispatch(\"media-play-request\", {\n                    trigger\n                });\n                break;\n            case \"pause\":\n                this.dispatch(\"media-pause-request\", {\n                    trigger\n                });\n                break;\n            case \"seekto\":\n            case \"seekforward\":\n            case \"seekbackward\":\n                this.dispatch(\"media-seek-request\", {\n                    detail: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(details.seekTime) ? details.seekTime : this.$state.currentTime() + (details.seekOffset ?? 10),\n                    trigger\n                });\n                break;\n        }\n    }\n};\n_NavigatorMediaSession._actions = [\n    \"play\",\n    \"pause\",\n    \"seekforward\",\n    \"seekbackward\",\n    \"seekto\"\n];\nlet NavigatorMediaSession = _NavigatorMediaSession;\nconst LOCAL_STORAGE_KEY = \"@vidstack/log-colors\";\nconst savedColors = init();\nfunction getLogColor(key) {\n    return savedColors.get(key);\n}\nfunction saveLogColor(key, { color = generateColor(), overwrite = false } = {}) {\n    if (!savedColors.has(key) || overwrite) {\n        savedColors.set(key, color);\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(Object.entries(savedColors)));\n    }\n}\nfunction generateColor() {\n    return `hsl(${Math.random() * 360}, 55%, 70%)`;\n}\nfunction init() {\n    let colors;\n    try {\n        colors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    } catch  {}\n    return new Map(Object.entries(colors ?? {}));\n}\nconst LogLevelValue = Object.freeze({\n    silent: 0,\n    error: 1,\n    warn: 2,\n    info: 3,\n    debug: 4\n});\nconst LogLevelColor = Object.freeze({\n    silent: \"white\",\n    error: \"hsl(6, 58%, 50%)\",\n    warn: \"hsl(51, 58%, 50%)\",\n    info: \"hsl(219, 58%, 50%)\",\n    debug: \"hsl(280, 58%, 50%)\"\n});\nconst s = 1e3;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nfunction ms(val) {\n    const msAbs = Math.abs(val);\n    if (msAbs >= d) {\n        return Math.round(val / d) + \"d\";\n    }\n    if (msAbs >= h) {\n        return Math.round(val / h) + \"h\";\n    }\n    if (msAbs >= m) {\n        return Math.round(val / m) + \"m\";\n    }\n    if (msAbs >= s) {\n        return Math.round(val / s) + \"s\";\n    }\n    return round(val, 2) + \"ms\";\n}\nclass LogPrinter extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(){\n        super(...arguments);\n        this._level = \"warn\";\n    }\n    /**\n   * The current log level.\n   */ get logLevel() {\n        return this._level;\n    }\n    set logLevel(level) {\n        this._level = level;\n    }\n    onConnect() {\n        this.listen(\"vds-log\", (event1)=>{\n            event1.stopPropagation();\n            const element = event1.path?.[0] ?? (event1.target instanceof _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController ? event1.target.el : event1.target), eventTargetName = element?.$$COMPONENT_NAME?.replace(/^_/, \"\").replace(/Instance$/, \"\") ?? element?.tagName.toLowerCase() ?? \"unknown\";\n            const { level = \"warn\", data } = event1.detail ?? {};\n            if (LogLevelValue[this._level] < LogLevelValue[level]) {\n                return;\n            }\n            saveLogColor(eventTargetName);\n            const hint = data?.length === 1 && isGroupedLog(data[0]) ? data[0].title : (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(data?.[0]) ? data[0] : \"\";\n            console.groupCollapsed(`%c${level.toUpperCase()}%c ${eventTargetName}%c ${hint.slice(0, 50)}${hint.length > 50 ? \"...\" : \"\"}`, `background: ${LogLevelColor[level]}; color: white; padding: 1.5px 2.2px; border-radius: 2px; font-size: 11px;`, `color: ${getLogColor(eventTargetName)}; padding: 4px 0px; font-size: 11px;`, \"color: gray; font-size: 11px; padding-left: 4px;\");\n            if (data?.length === 1 && isGroupedLog(data[0])) {\n                if (element) data[0].logs.unshift({\n                    label: \"Element\",\n                    data: [\n                        element\n                    ]\n                });\n                printGroup(level, data[0]);\n            } else if (data) {\n                print(level, ...data);\n            }\n            this._printTimeDiff();\n            printStackTrace();\n            console.groupEnd();\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this._lastLogged = void 0;\n        });\n    }\n    _printTimeDiff() {\n        labelledPrint(\"Time since last log\", this._calcLastLogTimeDiff());\n    }\n    _calcLastLogTimeDiff() {\n        const time = performance.now();\n        const diff = time - (this._lastLogged ?? (this._lastLogged = performance.now()));\n        this._lastLogged = time;\n        return ms(diff);\n    }\n}\nfunction print(level, ...data) {\n    console[level](...data);\n}\nfunction labelledPrint(label, ...data) {\n    console.log(`%c${label}:`, \"color: gray\", ...data);\n}\nfunction printStackTrace() {\n    console.groupCollapsed(\"%cStack Trace\", \"color: gray\");\n    console.trace();\n    console.groupEnd();\n}\nfunction printGroup(level, groupedLog) {\n    for (const log of groupedLog.logs){\n        if (isGroupedLog(log)) {\n            console.groupCollapsed(groupedLog.title);\n            printGroup(level, log);\n            console.groupEnd();\n        } else if (\"label\" in log && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(log.label)) {\n            labelledPrint(log.label, ...log.data);\n        } else {\n            print(level, ...log.data);\n        }\n    }\n}\nlet $keyboard = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\nif (!IS_SERVER) {\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"pointerdown\", ()=>{\n        $keyboard.set(false);\n    });\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"keydown\", (e)=>{\n        if (e.metaKey || e.altKey || e.ctrlKey) return;\n        $keyboard.set(true);\n    });\n}\nclass FocusVisibleController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(){\n        super(...arguments);\n        this._focused = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            if (!$keyboard()) {\n                this._focused.set(false);\n                updateFocusAttr(el, false);\n                this.listen(\"pointerenter\", this._onPointerEnter.bind(this));\n                this.listen(\"pointerleave\", this._onPointerLeave.bind(this));\n                return;\n            }\n            const active = document.activeElement === el;\n            this._focused.set(active);\n            updateFocusAttr(el, active);\n            this.listen(\"focus\", this._onFocus.bind(this));\n            this.listen(\"blur\", this._onBlur.bind(this));\n        });\n    }\n    focused() {\n        return this._focused();\n    }\n    _onFocus() {\n        this._focused.set(true);\n        updateFocusAttr(this.el, true);\n    }\n    _onBlur() {\n        this._focused.set(false);\n        updateFocusAttr(this.el, false);\n    }\n    _onPointerEnter() {\n        updateHoverAttr(this.el, true);\n    }\n    _onPointerLeave() {\n        updateHoverAttr(this.el, false);\n    }\n}\nfunction updateFocusAttr(el, isFocused) {\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-focus\", isFocused);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-hocus\", isFocused);\n}\nfunction updateHoverAttr(el, isHovering) {\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-hocus\", isHovering);\n    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-hover\", isHovering);\n}\nvar __defProp$f = Object.defineProperty;\nvar __getOwnPropDesc$f = Object.getOwnPropertyDescriptor;\nvar __decorateClass$f = (decorators, target, key, kind)=>{\n    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$f(target, key) : target;\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n    if (kind && result) __defProp$f(target, key, result);\n    return result;\n};\nconst _MediaPlayer = class _MediaPlayer extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this.canPlayQueue = new RequestQueue();\n        this._skipTitleUpdate = false;\n        new MediaStateSync();\n        const context = {\n            player: this,\n            qualities: new VideoQualityList(),\n            audioTracks: new AudioTrackList(),\n            storage: null,\n            $provider: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null),\n            $providerSetup: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false),\n            $props: this.$props,\n            $state: this.$state\n        };\n        {\n            const logPrinter = new LogPrinter();\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n                logPrinter.logLevel = this.$props.logLevel();\n            });\n        }\n        context.logger = new Logger();\n        context.remote = this.remoteControl = new MediaRemoteControl(context.logger);\n        context.remote.setPlayer(this);\n        context.textTracks = new TextTrackList();\n        context.textTracks[TextTrackSymbol._crossOrigin] = this.$state.crossOrigin;\n        context.textRenderers = new TextRenderers(context);\n        context.ariaKeys = {};\n        this._media = context;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(mediaContext, context);\n        this.orientation = new ScreenOrientationController();\n        new FocusVisibleController();\n        new MediaKeyboardController(context);\n        new MediaEventsLogger(context);\n        const request = new MediaRequestContext();\n        this._stateMgr = new MediaStateManager(request, context);\n        this._requestMgr = new MediaRequestManager(this._stateMgr, request, context);\n        context.delegate = new MediaPlayerDelegate(this._stateMgr._handle.bind(this._stateMgr), context);\n        if (typeof navigator !== \"undefined\" && \"mediaSession\" in navigator) {\n            new NavigatorMediaSession();\n        }\n        new MediaLoadController(\"load\", this.startLoading.bind(this));\n        new MediaLoadController(\"posterLoad\", this.startLoadingPoster.bind(this));\n    }\n    get _provider() {\n        return this._media.$provider();\n    }\n    get _$$props() {\n        return this.$props;\n    }\n    onSetup() {\n        this._setupMediaAttributes();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCanPlay.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchMuted.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPaused.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchVolume.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCurrentTime.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPlaysInline.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPlaybackRate.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-player\", \"\");\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"role\", \"region\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchStorage.bind(this));\n        if (IS_SERVER) this._watchTitle();\n        else (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchTitle.bind(this));\n        if (IS_SERVER) this._watchOrientation();\n        else (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchOrientation.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"find-media-player\", this._onFindPlayer.bind(this));\n    }\n    onConnect(el) {\n        if (IS_IPHONE) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-iphone\", \"\");\n        const pointerQuery = window.matchMedia(\"(pointer: coarse)\");\n        this._onPointerChange(pointerQuery);\n        pointerQuery.onchange = this._onPointerChange.bind(this);\n        const resize = new ResizeObserver((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(this._onResize.bind(this)));\n        resize.observe(el);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onResize.bind(this));\n        this.dispatch(\"media-player-connect\", {\n            detail: this,\n            bubbles: true,\n            composed: true\n        });\n        this._media.logger.setTarget(el);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            resize.disconnect();\n            pointerQuery.onchange = null;\n            this._media.logger.setTarget(null);\n        });\n    }\n    onDestroy() {\n        this._media.player = null;\n        this.canPlayQueue._reset();\n    }\n    _watchTitle() {\n        const el = this.$el, { title, live, viewType, providedTitle } = this.$state, isLive = live(), type = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.uppercaseFirstChar)(viewType()), typeText = type !== \"Unknown\" ? `${isLive ? \"Live \" : \"\"}${type}` : isLive ? \"Live\" : \"Media\", currentTitle = title();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"aria-label\", `${typeText} Player` + (currentTitle ? ` - ${currentTitle}` : \"\"));\n        if (!IS_SERVER && el?.hasAttribute(\"title\")) {\n            this._skipTitleUpdate = true;\n            el?.removeAttribute(\"title\");\n        }\n    }\n    _watchOrientation() {\n        const orientation = this.orientation.landscape ? \"landscape\" : \"portrait\";\n        this.$state.orientation.set(orientation);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"data-orientation\", orientation);\n        this._onResize();\n    }\n    _watchCanPlay() {\n        if (this.$state.canPlay() && this._provider) this.canPlayQueue._start();\n        else this.canPlayQueue._stop();\n    }\n    _setupMediaAttributes() {\n        if (_MediaPlayer[MEDIA_ATTRIBUTES]) {\n            this.setAttributes(_MediaPlayer[MEDIA_ATTRIBUTES]);\n            return;\n        }\n        const $attrs = {\n            \"data-load\": function() {\n                return this.$props.load();\n            },\n            \"data-captions\": function() {\n                const track = this.$state.textTrack();\n                return !!track && isTrackCaptionKind(track);\n            },\n            \"data-ios-controls\": function() {\n                return this.$state.iOSControls();\n            },\n            \"data-controls\": function() {\n                return this.controls.showing;\n            },\n            \"data-buffering\": function() {\n                const { canLoad, canPlay, waiting } = this.$state;\n                return canLoad() && (!canPlay() || waiting());\n            },\n            \"data-error\": function() {\n                const { error } = this.$state;\n                return !!error();\n            },\n            \"data-autoplay-error\": function() {\n                const { autoPlayError } = this.$state;\n                return !!autoPlayError();\n            }\n        };\n        const alias = {\n            autoPlay: \"autoplay\",\n            canAirPlay: \"can-airplay\",\n            canPictureInPicture: \"can-pip\",\n            pictureInPicture: \"pip\",\n            playsInline: \"playsinline\",\n            remotePlaybackState: \"remote-state\",\n            remotePlaybackType: \"remote-type\",\n            isAirPlayConnected: \"airplay\",\n            isGoogleCastConnected: \"google-cast\"\n        };\n        for (const prop2 of mediaAttributes){\n            const attrName = \"data-\" + (alias[prop2] ?? (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.camelToKebabCase)(prop2));\n            $attrs[attrName] = function() {\n                return this.$state[prop2]();\n            };\n        }\n        delete $attrs.title;\n        _MediaPlayer[MEDIA_ATTRIBUTES] = $attrs;\n        this.setAttributes($attrs);\n    }\n    _onFindPlayer(event1) {\n        event1.detail(this);\n    }\n    _onResize() {\n        if (IS_SERVER || !this.el) return;\n        const width = this.el.clientWidth, height = this.el.clientHeight;\n        this.$state.width.set(width);\n        this.$state.height.set(height);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(this.el, \"--player-width\", width + \"px\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(this.el, \"--player-height\", height + \"px\");\n    }\n    _onPointerChange(queryList) {\n        if (IS_SERVER) return;\n        const pointer = queryList.matches ? \"coarse\" : \"fine\";\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"data-pointer\", pointer);\n        this.$state.pointer.set(pointer);\n        this._onResize();\n    }\n    get provider() {\n        return this._provider;\n    }\n    get controls() {\n        return this._requestMgr._controls;\n    }\n    set controls(controls) {\n        this._$$props.controls.set(controls);\n    }\n    get title() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.providedTitle);\n    }\n    set title(newTitle) {\n        if (this._skipTitleUpdate) {\n            this._skipTitleUpdate = false;\n            return;\n        }\n        this.$state.providedTitle.set(newTitle);\n    }\n    get qualities() {\n        return this._media.qualities;\n    }\n    get audioTracks() {\n        return this._media.audioTracks;\n    }\n    get textTracks() {\n        return this._media.textTracks;\n    }\n    get textRenderers() {\n        return this._media.textRenderers;\n    }\n    get duration() {\n        return this.$state.duration();\n    }\n    set duration(duration) {\n        this._$$props.duration.set(duration);\n    }\n    get paused() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.paused);\n    }\n    set paused(paused) {\n        this._queuePausedUpdate(paused);\n    }\n    _watchPaused() {\n        this._queuePausedUpdate(this.$props.paused());\n    }\n    _queuePausedUpdate(paused) {\n        if (paused) {\n            this.canPlayQueue._enqueue(\"paused\", ()=>this._requestMgr._pause());\n        } else this.canPlayQueue._enqueue(\"paused\", ()=>this._requestMgr._play());\n    }\n    get muted() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.muted);\n    }\n    set muted(muted) {\n        this._$$props.muted.set(muted);\n    }\n    _watchMuted() {\n        this._queueMutedUpdate(this.$props.muted());\n    }\n    _queueMutedUpdate(muted) {\n        this.canPlayQueue._enqueue(\"muted\", ()=>{\n            if (this._provider) this._provider.setMuted(muted);\n        });\n    }\n    get currentTime() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.currentTime);\n    }\n    set currentTime(time) {\n        this._queueCurrentTimeUpdate(time);\n    }\n    _watchCurrentTime() {\n        this._queueCurrentTimeUpdate(this.$props.currentTime());\n    }\n    _queueCurrentTimeUpdate(time) {\n        this.canPlayQueue._enqueue(\"currentTime\", ()=>{\n            const { currentTime, clipStartTime, seekableStart, seekableEnd } = this.$state;\n            if (time === (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(currentTime)) return;\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>{\n                if (!this._provider) return;\n                const clippedTime = time + clipStartTime(), isEnd = Math.floor(clippedTime) === Math.floor(seekableEnd()), boundTime = isEnd ? seekableEnd() : Math.min(Math.max(seekableStart() + 0.1, clippedTime), seekableEnd() - 0.1);\n                if (Number.isFinite(boundTime)) {\n                    this._provider.setCurrentTime(boundTime);\n                }\n            });\n        });\n    }\n    get volume() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.volume);\n    }\n    set volume(volume) {\n        this._$$props.volume.set(volume);\n    }\n    _watchVolume() {\n        this._queueVolumeUpdate(this.$props.volume());\n    }\n    _queueVolumeUpdate(volume) {\n        const clampedVolume = clampNumber(0, volume, 1);\n        this.canPlayQueue._enqueue(\"volume\", ()=>{\n            if (this._provider) this._provider.setVolume(clampedVolume);\n        });\n    }\n    get playbackRate() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.playbackRate);\n    }\n    set playbackRate(rate) {\n        this._queuePlaybackRateUpdate(rate);\n    }\n    _watchPlaybackRate() {\n        this._queuePlaybackRateUpdate(this.$props.playbackRate());\n    }\n    _queuePlaybackRateUpdate(rate) {\n        this.canPlayQueue._enqueue(\"rate\", ()=>{\n            if (this._provider) this._provider.setPlaybackRate?.(rate);\n        });\n    }\n    _watchPlaysInline() {\n        this._queuePlaysInlineUpdate(this.$props.playsInline());\n    }\n    _queuePlaysInlineUpdate(inline) {\n        this.canPlayQueue._enqueue(\"playsinline\", ()=>{\n            if (this._provider) this._provider.setPlaysInline?.(inline);\n        });\n    }\n    _watchStorage() {\n        let storageValue = this.$props.storage(), storage = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(storageValue) ? new LocalMediaStorage() : storageValue;\n        if (storage?.onChange) {\n            const { source } = this.$state, playerId = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(storageValue) ? storageValue : this.el?.id, mediaId = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.computed)(this._computeMediaId.bind(this));\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>storage.onChange(source(), mediaId(), playerId || void 0));\n        }\n        this._media.storage = storage;\n        this._media.textTracks.setStorage(storage);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            storage?.onDestroy?.();\n            this._media.storage = null;\n            this._media.textTracks.setStorage(null);\n        });\n    }\n    _computeMediaId() {\n        const { clipStartTime, clipEndTime } = this.$props, { source } = this.$state, src = source();\n        return src.src ? `${src.src}:${clipStartTime()}:${clipEndTime()}` : null;\n    }\n    async play(trigger) {\n        return this._requestMgr._play(trigger);\n    }\n    async pause(trigger) {\n        return this._requestMgr._pause(trigger);\n    }\n    async enterFullscreen(target, trigger) {\n        return this._requestMgr._enterFullscreen(target, trigger);\n    }\n    async exitFullscreen(target, trigger) {\n        return this._requestMgr._exitFullscreen(target, trigger);\n    }\n    enterPictureInPicture(trigger) {\n        return this._requestMgr._enterPictureInPicture(trigger);\n    }\n    exitPictureInPicture(trigger) {\n        return this._requestMgr._exitPictureInPicture(trigger);\n    }\n    seekToLiveEdge(trigger) {\n        this._requestMgr._seekToLiveEdge(trigger);\n    }\n    startLoading(trigger) {\n        this._media.delegate._notify(\"can-load\", void 0, trigger);\n    }\n    startLoadingPoster(trigger) {\n        this._media.delegate._notify(\"can-load-poster\", void 0, trigger);\n    }\n    requestAirPlay(trigger) {\n        return this._requestMgr._requestAirPlay(trigger);\n    }\n    requestGoogleCast(trigger) {\n        return this._requestMgr._requestGoogleCast(trigger);\n    }\n    setAudioGain(gain, trigger) {\n        return this._requestMgr._setAudioGain(gain, trigger);\n    }\n    destroy() {\n        super.destroy();\n        this._media.remote.setPlayer(null);\n        this.dispatch(\"destroy\");\n    }\n};\n_MediaPlayer.props = mediaPlayerProps;\n_MediaPlayer.state = mediaState;\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"canPlayQueue\", 2);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"remoteControl\", 2);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"provider\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"controls\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"orientation\", 2);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"title\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"qualities\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"audioTracks\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"textTracks\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"textRenderers\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"duration\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"paused\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"muted\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"currentTime\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"volume\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], _MediaPlayer.prototype, \"playbackRate\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"play\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"pause\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"enterFullscreen\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"exitFullscreen\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"enterPictureInPicture\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"exitPictureInPicture\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"seekToLiveEdge\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"startLoading\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"startLoadingPoster\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"requestAirPlay\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"requestGoogleCast\", 1);\n__decorateClass$f([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], _MediaPlayer.prototype, \"setAudioGain\", 1);\nlet MediaPlayer = _MediaPlayer;\nfunction resolveStreamTypeFromDASHManifest(manifestSrc, requestInit) {\n    return fetch(manifestSrc, requestInit).then((res)=>res.text()).then((manifest)=>{\n        return /type=\"static\"/.test(manifest) ? \"on-demand\" : \"live\";\n    });\n}\nfunction resolveStreamTypeFromHLSManifest(manifestSrc, requestInit) {\n    return fetch(manifestSrc, requestInit).then((res)=>res.text()).then((manifest)=>{\n        const renditionURI = resolveHLSRenditionURI(manifest);\n        if (renditionURI) {\n            return resolveStreamTypeFromHLSManifest(/^https?:/.test(renditionURI) ? renditionURI : new URL(renditionURI, manifestSrc).href, requestInit);\n        }\n        const streamType = /EXT-X-PLAYLIST-TYPE:\\s*VOD/.test(manifest) ? \"on-demand\" : \"live\";\n        if (streamType === \"live\" && resolveTargetDuration(manifest) >= 10 && (/#EXT-X-DVR-ENABLED:\\s*true/.test(manifest) || manifest.includes(\"#EXT-X-DISCONTINUITY\"))) {\n            return \"live:dvr\";\n        }\n        return streamType;\n    });\n}\nfunction resolveHLSRenditionURI(manifest) {\n    const matches = manifest.match(/#EXT-X-STREAM-INF:[^\\n]+(\\n[^\\n]+)*/g);\n    return matches ? matches[0].split(\"\\n\")[1].trim() : null;\n}\nfunction resolveTargetDuration(manifest) {\n    const lines = manifest.split(\"\\n\");\n    for (const line of lines){\n        if (line.startsWith(\"#EXT-X-TARGETDURATION\")) {\n            const duration = parseFloat(line.split(\":\")[1]);\n            if (!isNaN(duration)) {\n                return duration;\n            }\n        }\n    }\n    return -1;\n}\nlet warned$1 = /* @__PURE__ */ new Set();\nconst sourceTypes = /* @__PURE__ */ new Map();\nclass SourceSelection {\n    constructor(_domSources, _media, _loader, customLoaders = []){\n        this._domSources = _domSources;\n        this._media = _media;\n        this._loader = _loader;\n        this._initialize = false;\n        const DASH_LOADER = new DASHProviderLoader(), HLS_LOADER = new HLSProviderLoader(), VIDEO_LOADER = new VideoProviderLoader(), AUDIO_LOADER = new AudioProviderLoader(), YOUTUBE_LOADER = new YouTubeProviderLoader(), VIMEO_LOADER = new VimeoProviderLoader(), EMBED_LOADERS = [\n            YOUTUBE_LOADER,\n            VIMEO_LOADER\n        ];\n        this._loaders = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.computed)(()=>{\n            const remoteLoader = _media.$state.remotePlaybackLoader();\n            const loaders = _media.$props.preferNativeHLS() ? [\n                VIDEO_LOADER,\n                AUDIO_LOADER,\n                DASH_LOADER,\n                HLS_LOADER,\n                ...EMBED_LOADERS,\n                ...customLoaders\n            ] : [\n                HLS_LOADER,\n                VIDEO_LOADER,\n                AUDIO_LOADER,\n                DASH_LOADER,\n                ...EMBED_LOADERS,\n                ...customLoaders\n            ];\n            return remoteLoader ? [\n                remoteLoader,\n                ...loaders\n            ] : loaders;\n        });\n        const { $state } = _media;\n        $state.sources.set(normalizeSrc(_media.$props.src()));\n        for (const src of $state.sources()){\n            const loader = this._loaders().find((loader2)=>loader2.canPlay(src));\n            if (!loader) continue;\n            const mediaType = loader.mediaType(src);\n            this._media.$state.source.set(src);\n            this._media.$state.mediaType.set(mediaType);\n            this._media.$state.inferredViewType.set(mediaType);\n            this._loader.set(loader);\n            this._initialize = true;\n            break;\n        }\n    }\n    get _notify() {\n        return this._media.delegate._notify;\n    }\n    connect() {\n        const loader = this._loader();\n        if (this._initialize) {\n            this._notifySourceChange(this._media.$state.source(), loader);\n            this._notifyLoaderChange(loader);\n            this._initialize = false;\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onSourcesChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onSourceChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onSetup.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onLoadSource.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onLoadPoster.bind(this));\n    }\n    _onSourcesChange() {\n        this._notify(\"sources-change\", [\n            ...normalizeSrc(this._media.$props.src()),\n            ...this._domSources()\n        ]);\n    }\n    _onSourceChange() {\n        const { $state } = this._media;\n        const sources = $state.sources(), currentSource = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)($state.source), newSource = this._findNewSource(currentSource, sources), noMatch = sources[0]?.src && !newSource.src && !newSource.type;\n        if (noMatch && !warned$1.has(newSource.src) && !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._loader)) {\n            const source = sources[0];\n            console.warn(`[vidstack] could not find a loader for any of the given media sources, consider providing \\`type\\`:\n\n--- HTML ---\n\n<media-provider>\n  <source src=\"${source.src}\" type=\"video/mp4\" />\n</media-provider>\"\n\n--- React ---\n\n<MediaPlayer src={{ src: \"${source.src}\", type: \"video/mp4\" }}>\n\n---\n\nFalling back to fetching source headers...`);\n            warned$1.add(newSource.src);\n        }\n        if (noMatch) {\n            const { crossOrigin } = $state, credentials = getRequestCredentials(crossOrigin()), abort = new AbortController();\n            Promise.all(sources.map((source)=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(source.src) && source.type === \"?\" ? fetch(source.src, {\n                    method: \"HEAD\",\n                    credentials,\n                    signal: abort.signal\n                }).then((res)=>{\n                    source.type = res.headers.get(\"content-type\") || \"??\";\n                    sourceTypes.set(source.src, source.type);\n                    return source;\n                }).catch(()=>source) : source)).then((sources2)=>{\n                if (abort.signal.aborted) return;\n                const newSource2 = this._findNewSource((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)($state.source), sources2);\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n                if (!newSource2.src) {\n                    this._notify(\"error\", {\n                        message: \"Failed to load resource.\",\n                        code: 4\n                    });\n                }\n            });\n            return ()=>abort.abort();\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n    }\n    _findNewSource(currentSource, sources) {\n        let newSource = {\n            src: \"\",\n            type: \"\"\n        }, newLoader = null, triggerEvent = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"sources-change\", {\n            detail: {\n                sources\n            }\n        }), loaders = this._loaders(), { started, paused, currentTime, quality, savedState } = this._media.$state;\n        for (const src of sources){\n            const loader = loaders.find((loader2)=>loader2.canPlay(src));\n            if (loader) {\n                newSource = src;\n                newLoader = loader;\n                break;\n            }\n        }\n        if (isVideoQualitySrc(newSource)) {\n            const currentQuality = quality(), sourceQuality = sources.find((s)=>s.src === currentQuality?.src);\n            if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(started)) {\n                savedState.set({\n                    paused: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(paused),\n                    currentTime: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(currentTime)\n                });\n            } else {\n                savedState.set(null);\n            }\n            if (sourceQuality) {\n                newSource = sourceQuality;\n                triggerEvent = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"quality-change\", {\n                    detail: {\n                        quality: currentQuality\n                    }\n                });\n            }\n        }\n        if (!isSameSrc(currentSource, newSource)) {\n            this._notifySourceChange(newSource, newLoader, triggerEvent);\n        }\n        if (newLoader !== (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._loader)) {\n            this._notifyLoaderChange(newLoader, triggerEvent);\n        }\n        return newSource;\n    }\n    _notifySourceChange(src, loader, trigger) {\n        this._notify(\"source-change\", src, trigger);\n        this._notify(\"media-type-change\", loader?.mediaType(src) || \"unknown\", trigger);\n    }\n    _notifyLoaderChange(loader, trigger) {\n        this._media.$providerSetup.set(false);\n        this._notify(\"provider-change\", null, trigger);\n        loader && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>loader.preconnect?.(this._media));\n        this._loader.set(loader);\n        this._notify(\"provider-loader-change\", loader, trigger);\n    }\n    _onSetup() {\n        const provider = this._media.$provider();\n        if (!provider || (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._media.$providerSetup)) return;\n        if (this._media.$state.canLoad()) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>provider.setup(), provider.scope);\n            this._media.$providerSetup.set(true);\n            return;\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>provider.preconnect?.());\n    }\n    _onLoadSource() {\n        if (!this._media.$providerSetup()) return;\n        const provider = this._media.$provider(), source = this._media.$state.source(), crossOrigin = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._media.$state.crossOrigin), preferNativeHLS = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._media.$props.preferNativeHLS);\n        if (isSameSrc(provider?.currentSrc, source)) {\n            return;\n        }\n        if (this._media.$state.canLoad()) {\n            const abort = new AbortController();\n            if (isHLSSrc(source)) {\n                if (preferNativeHLS || !isHLSSupported()) {\n                    resolveStreamTypeFromHLSManifest(source.src, {\n                        credentials: getRequestCredentials(crossOrigin),\n                        signal: abort.signal\n                    }).then((streamType)=>{\n                        this._notify(\"stream-type-change\", streamType);\n                    }).catch(_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.noop);\n                }\n            } else if (isDASHSrc(source)) {\n                resolveStreamTypeFromDASHManifest(source.src, {\n                    credentials: getRequestCredentials(crossOrigin),\n                    signal: abort.signal\n                }).then((streamType)=>{\n                    this._notify(\"stream-type-change\", streamType);\n                }).catch(_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.noop);\n            } else {\n                this._notify(\"stream-type-change\", \"on-demand\");\n            }\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>{\n                const preload = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._media.$state.preload);\n                return provider?.loadSource(source, preload).catch((error)=>{\n                    {\n                        this._media.logger?.errorGroup(\"[vidstack] failed to load source\").labelledLog(\"Error\", error).labelledLog(\"Source\", source).labelledLog(\"Provider\", provider).labelledLog(\"Media Context\", {\n                            ...this._media\n                        }).dispatch();\n                    }\n                });\n            });\n            return ()=>abort.abort();\n        }\n        try {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(source.src) && preconnect(new URL(source.src).origin);\n        } catch (error) {\n            {\n                this._media.logger?.infoGroup(`Failed to preconnect to source: ${source.src}`).labelledLog(\"Error\", error).dispatch();\n            }\n        }\n    }\n    _onLoadPoster() {\n        const loader = this._loader(), { providedPoster, source, canLoadPoster } = this._media.$state;\n        if (!loader || !loader.loadPoster || !source() || !canLoadPoster() || providedPoster()) return;\n        const abort = new AbortController(), trigger = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"source-change\", {\n            detail: source\n        });\n        loader.loadPoster(source(), this._media, abort).then((url)=>{\n            this._notify(\"poster-change\", url || \"\", trigger);\n        }).catch(()=>{\n            this._notify(\"poster-change\", \"\", trigger);\n        });\n        return ()=>{\n            abort.abort();\n        };\n    }\n}\nfunction normalizeSrc(src) {\n    return ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(src) ? src : [\n        src\n    ]).map((src2)=>{\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src2)) {\n            return {\n                src: src2,\n                type: inferType(src2)\n            };\n        } else {\n            return {\n                ...src2,\n                type: inferType(src2.src, src2.type)\n            };\n        }\n    });\n}\nfunction inferType(src, type) {\n    if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(type) && type.length) {\n        return type;\n    } else if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && sourceTypes.has(src)) {\n        return sourceTypes.get(src);\n    } else if (!type && isHLSSrc({\n        src,\n        type: \"\"\n    })) {\n        return \"application/x-mpegurl\";\n    } else if (!type && isDASHSrc({\n        src,\n        type: \"\"\n    })) {\n        return \"application/dash+xml\";\n    } else if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) || src.startsWith(\"blob:\")) {\n        return \"video/object\";\n    } else if (src.includes(\"youtube\") || src.includes(\"youtu.be\")) {\n        return \"video/youtube\";\n    } else if (src.includes(\"vimeo\") && !src.includes(\"progressive_redirect\") && !src.includes(\".m3u8\")) {\n        return \"video/vimeo\";\n    }\n    return \"?\";\n}\nfunction isSameSrc(a, b) {\n    return a?.src === b?.src && a?.type === b?.type;\n}\nclass Tracks {\n    constructor(_domTracks, _media){\n        this._domTracks = _domTracks;\n        this._media = _media;\n        this._prevTracks = [];\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onTracksChange.bind(this));\n    }\n    _onTracksChange() {\n        const newTracks = this._domTracks();\n        for (const oldTrack of this._prevTracks){\n            if (!newTracks.some((t)=>t.id === oldTrack.id)) {\n                const track = oldTrack.id && this._media.textTracks.getById(oldTrack.id);\n                if (track) this._media.textTracks.remove(track);\n            }\n        }\n        for (const newTrack of newTracks){\n            const id = newTrack.id || TextTrack.createId(newTrack);\n            if (!this._media.textTracks.getById(id)) {\n                newTrack.id = id;\n                this._media.textTracks.add(newTrack);\n            }\n        }\n        this._prevTracks = newTracks;\n    }\n}\nvar __defProp$e = Object.defineProperty;\nvar __getOwnPropDesc$e = Object.getOwnPropertyDescriptor;\nvar __decorateClass$e = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$e(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$e(target, key, result);\n    return result;\n};\nclass MediaProvider extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._domSources = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]);\n        this._domTracks = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]);\n        this._loader = null;\n        this._loadRafId = -1;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this._sources = new SourceSelection(this._domSources, this._media, this.$state.loader, this.$props.loaders());\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-provider\", \"\");\n    }\n    onConnect(el) {\n        this._sources.connect();\n        new Tracks(this._domTracks, this._media);\n        const resize = new ResizeObserver((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(this._onResize.bind(this)));\n        resize.observe(el);\n        const mutations = new MutationObserver(this._onMutation.bind(this));\n        mutations.observe(el, {\n            attributes: true,\n            childList: true\n        });\n        this._onResize();\n        this._onMutation();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            resize.disconnect();\n            mutations.disconnect();\n        });\n    }\n    load(target) {\n        window.cancelAnimationFrame(this._loadRafId);\n        this._loadRafId = requestAnimationFrame(()=>this._runLoader(target));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            window.cancelAnimationFrame(this._loadRafId);\n        });\n    }\n    _runLoader(target) {\n        if (!this.scope) return;\n        const loader = this.$state.loader(), { $provider } = this._media;\n        if (this._loader === loader && loader?.target === target && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)($provider)) return;\n        this._destroyProvider();\n        this._loader = loader;\n        if (loader) loader.target = target || null;\n        if (!loader || !target) return;\n        loader.load(this._media).then((provider)=>{\n            if (!this.scope) return;\n            if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.loader) !== loader) return;\n            this._media.delegate._notify(\"provider-change\", provider);\n        });\n    }\n    onDestroy() {\n        this._loader = null;\n        this._destroyProvider();\n    }\n    _destroyProvider() {\n        this._media?.delegate._notify(\"provider-change\", null);\n    }\n    _onResize() {\n        if (!this.el) return;\n        const { player, $state } = this._media, width = this.el.offsetWidth, height = this.el.offsetHeight;\n        if (!player) return;\n        $state.mediaWidth.set(width);\n        $state.mediaHeight.set(height);\n        if (player.el) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(player.el, \"--media-width\", width + \"px\");\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(player.el, \"--media-height\", height + \"px\");\n        }\n    }\n    _onMutation() {\n        const sources = [], tracks = [], children = this.el.children;\n        for (const el of children){\n            if (el.hasAttribute(\"data-vds\")) continue;\n            if (el instanceof HTMLSourceElement) {\n                const src = {\n                    id: el.id,\n                    src: el.src,\n                    type: el.type\n                };\n                for (const prop of [\n                    \"id\",\n                    \"src\",\n                    \"width\",\n                    \"height\",\n                    \"bitrate\",\n                    \"codec\"\n                ]){\n                    const value = el.getAttribute(`data-${prop}`);\n                    if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) src[prop] = /id|src|codec/.test(prop) ? value : Number(value);\n                }\n                sources.push(src);\n            } else if (el instanceof HTMLTrackElement) {\n                const track = {\n                    src: el.src,\n                    kind: el.track.kind,\n                    language: el.srclang,\n                    label: el.label,\n                    default: el.default,\n                    type: el.getAttribute(\"data-type\")\n                };\n                tracks.push({\n                    id: el.id || TextTrack.createId(track),\n                    ...track\n                });\n            }\n        }\n        this._domSources.set(sources);\n        this._domTracks.set(tracks);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n    }\n}\nMediaProvider.props = {\n    loaders: []\n};\nMediaProvider.state = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    loader: null\n});\n__decorateClass$e([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], MediaProvider.prototype, \"load\");\nclass MediaAnnouncer extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._initializing = false;\n        this._startedSeekingAt = -1;\n        this._seekTimer = -1;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n    }\n    onAttach(el) {\n        el.style.display = \"contents\";\n    }\n    onConnect(el) {\n        el.setAttribute(\"data-media-announcer\", \"\");\n        setAttributeIfEmpty(el, \"role\", \"status\");\n        setAttributeIfEmpty(el, \"aria-live\", \"polite\");\n        const { busy } = this.$state;\n        this.setAttributes({\n            \"aria-busy\": ()=>busy() ? \"true\" : null\n        });\n        this._initializing = true;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPaused.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchVolume.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCaptions.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchFullscreen.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPiP.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchSeeking.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchLabel.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n        this._initializing = false;\n    }\n    _watchPaused() {\n        const { paused } = this._media.$state;\n        this._setLabel(!paused() ? \"Play\" : \"Pause\");\n    }\n    _watchFullscreen() {\n        const { fullscreen } = this._media.$state;\n        this._setLabel(fullscreen() ? \"Enter Fullscreen\" : \"Exit Fullscreen\");\n    }\n    _watchPiP() {\n        const { pictureInPicture } = this._media.$state;\n        this._setLabel(pictureInPicture() ? \"Enter PiP\" : \"Exit PiP\");\n    }\n    _watchCaptions() {\n        const { textTrack } = this._media.$state;\n        this._setLabel(textTrack() ? \"Closed-Captions On\" : \"Closed-Captions Off\");\n    }\n    _watchVolume() {\n        const { muted, volume, audioGain } = this._media.$state;\n        this._setLabel(muted() || volume() === 0 ? \"Mute\" : `${Math.round(volume() * (audioGain() ?? 1) * 100)}% ${this._translate(\"Volume\")}`);\n    }\n    _watchSeeking() {\n        const { seeking, currentTime } = this._media.$state, isSeeking = seeking();\n        if (this._startedSeekingAt > 0) {\n            window.clearTimeout(this._seekTimer);\n            this._seekTimer = window.setTimeout(()=>{\n                if (!this.scope) return;\n                const newTime = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(currentTime), seconds = Math.abs(newTime - this._startedSeekingAt);\n                if (seconds >= 1) {\n                    const isForward = newTime >= this._startedSeekingAt, spokenTime = formatSpokenTime(seconds);\n                    this._setLabel(`${this._translate(isForward ? \"Seek Forward\" : \"Seek Backward\")} ${spokenTime}`);\n                }\n                this._startedSeekingAt = -1;\n                this._seekTimer = -1;\n            }, 300);\n        } else if (isSeeking) {\n            this._startedSeekingAt = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(currentTime);\n        }\n    }\n    _translate(word) {\n        const { translations } = this.$props;\n        return translations?.()?.[word || \"\"] ?? word;\n    }\n    _watchLabel() {\n        const { label, busy } = this.$state, $label = this._translate(label());\n        if (this._initializing) return;\n        busy.set(true);\n        const id = window.setTimeout(()=>void busy.set(false), 150);\n        this.el && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"aria-label\", $label);\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)($label)) {\n            this.dispatch(\"change\", {\n                detail: $label\n            });\n        }\n        return ()=>window.clearTimeout(id);\n    }\n    _setLabel(word) {\n        const { label } = this.$state;\n        label.set(word);\n    }\n}\nMediaAnnouncer.props = {\n    translations: null\n};\nMediaAnnouncer.state = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    label: null,\n    busy: false\n});\nclass Controls extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    onSetup() {\n        this._media = useMediaContext();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchProps.bind(this));\n    }\n    onAttach(el) {\n        const { pictureInPicture, fullscreen } = this._media.$state;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(el, \"pointer-events\", \"none\");\n        setAttributeIfEmpty(el, \"role\", \"group\");\n        this.setAttributes({\n            \"data-visible\": this._isShowing.bind(this),\n            \"data-fullscreen\": fullscreen,\n            \"data-pip\": pictureInPicture\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            this.dispatch(\"change\", {\n                detail: this._isShowing()\n            });\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._hideControls.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const isFullscreen = fullscreen();\n            for (const side of [\n                \"top\",\n                \"right\",\n                \"bottom\",\n                \"left\"\n            ]){\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(el, `padding-${side}`, isFullscreen && `env(safe-area-inset-${side})`);\n            }\n        });\n    }\n    _hideControls() {\n        if (!this.el) return;\n        const { nativeControls } = this._media.$state, isHidden = nativeControls();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"aria-hidden\", isHidden ? \"true\" : null);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(this.el, \"display\", isHidden ? \"none\" : null);\n    }\n    _watchProps() {\n        const { controls } = this._media.player, { hideDelay, hideOnMouseLeave } = this.$props;\n        controls.defaultDelay = hideDelay() === 2e3 ? this._media.$props.controlsDelay() : hideDelay();\n        controls.hideOnMouseLeave = hideOnMouseLeave();\n    }\n    _isShowing() {\n        const { controlsVisible } = this._media.$state;\n        return controlsVisible();\n    }\n}\nControls.props = {\n    hideDelay: 2e3,\n    hideOnMouseLeave: false\n};\nclass ControlsGroup extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    onAttach(el) {\n        if (!el.style.pointerEvents) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(el, \"pointer-events\", \"auto\");\n    }\n}\nclass Popper extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(_delegate){\n        super();\n        this._delegate = _delegate;\n        this._showTimerId = -1;\n        this._hideRafId = -1;\n        this._stopAnimationEndListener = null;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchTrigger.bind(this));\n    }\n    onDestroy() {\n        this._stopAnimationEndListener?.();\n        this._stopAnimationEndListener = null;\n    }\n    _watchTrigger() {\n        const trigger = this._delegate._trigger();\n        if (!trigger) {\n            this.hide();\n            return;\n        }\n        const show = this.show.bind(this), hide = this.hide.bind(this);\n        this._delegate._listen(trigger, show, hide);\n    }\n    show(trigger) {\n        this._cancelShowing();\n        window.cancelAnimationFrame(this._hideRafId);\n        this._hideRafId = -1;\n        this._stopAnimationEndListener?.();\n        this._stopAnimationEndListener = null;\n        this._showTimerId = window.setTimeout(()=>{\n            this._showTimerId = -1;\n            const content = this._delegate._content();\n            if (content) content.style.removeProperty(\"display\");\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>this._delegate._onChange(true, trigger));\n        }, this._delegate._showDelay?.() ?? 0);\n    }\n    hide(trigger) {\n        this._cancelShowing();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>this._delegate._onChange(false, trigger));\n        this._hideRafId = requestAnimationFrame(()=>{\n            this._cancelShowing();\n            this._hideRafId = -1;\n            const content = this._delegate._content();\n            if (content) {\n                const onHide = ()=>{\n                    content.style.display = \"none\";\n                    this._stopAnimationEndListener = null;\n                };\n                const isAnimated = hasAnimation(content);\n                if (isAnimated) {\n                    this._stopAnimationEndListener?.();\n                    const stop = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(content, \"animationend\", onHide, {\n                        once: true\n                    });\n                    this._stopAnimationEndListener = stop;\n                } else {\n                    onHide();\n                }\n            }\n        });\n    }\n    _cancelShowing() {\n        window.clearTimeout(this._showTimerId);\n        this._showTimerId = -1;\n    }\n}\nconst tooltipContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nlet id = 0;\nclass Tooltip extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this._id = `media-tooltip-${++id}`;\n        this._trigger = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        this._content = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        new FocusVisibleController();\n        const { showDelay } = this.$props;\n        new Popper({\n            _trigger: this._trigger,\n            _content: this._content,\n            _showDelay: showDelay,\n            _listen (trigger, show, hide) {\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(trigger, \"touchstart\", (e)=>e.preventDefault(), {\n                    passive: false\n                });\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n                    if ($keyboard()) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(trigger, \"focus\", show);\n                    (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(trigger, \"blur\", hide);\n                });\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(trigger, \"mouseenter\", show);\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(trigger, \"mouseleave\", hide);\n            },\n            _onChange: this._onShowingChange.bind(this)\n        });\n    }\n    onAttach(el) {\n        el.style.setProperty(\"display\", \"contents\");\n    }\n    onSetup() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(tooltipContext, {\n            _trigger: this._trigger,\n            _content: this._content,\n            _attachTrigger: this._attachTrigger.bind(this),\n            _detachTrigger: this._detachTrigger.bind(this),\n            _attachContent: this._attachContent.bind(this),\n            _detachContent: this._detachContent.bind(this)\n        });\n    }\n    _attachTrigger(el) {\n        this._trigger.set(el);\n        let tooltipName = el.getAttribute(\"data-media-tooltip\");\n        if (tooltipName) {\n            this.el?.setAttribute(`data-media-${tooltipName}-tooltip`, \"\");\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-describedby\", this._id);\n    }\n    _detachTrigger(el) {\n        el.removeAttribute(\"data-describedby\");\n        el.removeAttribute(\"aria-describedby\");\n        this._trigger.set(null);\n    }\n    _attachContent(el) {\n        el.setAttribute(\"id\", this._id);\n        el.style.display = \"none\";\n        setAttributeIfEmpty(el, \"role\", \"tooltip\");\n        this._content.set(el);\n    }\n    _detachContent(el) {\n        el.removeAttribute(\"id\");\n        el.removeAttribute(\"role\");\n        this._content.set(null);\n    }\n    _onShowingChange(isShowing) {\n        const trigger = this._trigger(), content = this._content();\n        if (trigger) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(trigger, \"aria-describedby\", isShowing ? this._id : null);\n        }\n        for (const el of [\n            this.el,\n            trigger,\n            content\n        ]){\n            el && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-visible\", isShowing);\n        }\n    }\n}\nTooltip.props = {\n    showDelay: 700\n};\nclass TooltipTrigger extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new FocusVisibleController();\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(requestScopedAnimationFrame(()=>{\n            if (!this.connectScope) return;\n            this._attach();\n            const tooltip = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n                const button = this._getButton();\n                button && tooltip._detachTrigger(button);\n            });\n        }));\n    }\n    _attach() {\n        const button = this._getButton(), tooltip = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n        button && tooltip._attachTrigger(button);\n    }\n    _getButton() {\n        const candidate = this.el.firstElementChild;\n        return candidate?.localName === \"button\" || candidate?.getAttribute(\"role\") === \"button\" ? candidate : this.el;\n    }\n}\nclass TooltipContent extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new FocusVisibleController();\n        const { placement } = this.$props;\n        this.setAttributes({\n            \"data-placement\": placement\n        });\n    }\n    onAttach(el) {\n        this._attach(el);\n        Object.assign(el.style, {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"max-content\"\n        });\n    }\n    onConnect(el) {\n        this._attach(el);\n        const tooltip = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>tooltip._detachContent(el));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(requestScopedAnimationFrame(()=>{\n            if (!this.connectScope) return;\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPlacement.bind(this));\n        }));\n    }\n    _attach(el) {\n        const tooltip = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n        tooltip._attachContent(el);\n    }\n    _watchPlacement() {\n        const { placement, offset: mainOffset, alignOffset } = this.$props;\n        return autoPlacement(this.el, this._getTrigger(), placement(), {\n            offsetVarName: \"media-tooltip\",\n            xOffset: alignOffset(),\n            yOffset: mainOffset()\n        });\n    }\n    _getTrigger() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext)._trigger();\n    }\n}\nTooltipContent.props = {\n    placement: \"top center\",\n    offset: 0,\n    alignOffset: 0\n};\nclass ToggleButtonController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(_delegate){\n        super();\n        this._delegate = _delegate;\n        new FocusVisibleController();\n        if (_delegate._keyShortcut) {\n            new ARIAKeyShortcuts(_delegate._keyShortcut);\n        }\n    }\n    onSetup() {\n        const { disabled } = this.$props;\n        this.setAttributes({\n            \"data-pressed\": this._delegate._isPressed,\n            \"aria-pressed\": this._isARIAPressed.bind(this),\n            \"aria-disabled\": ()=>disabled() ? \"true\" : null\n        });\n    }\n    onAttach(el) {\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"role\", \"button\");\n        setAttributeIfEmpty(el, \"type\", \"button\");\n    }\n    onConnect(el) {\n        onPress(el, this._onMaybePress.bind(this));\n        for (const type of [\n            \"click\",\n            \"touchstart\"\n        ]){\n            this.listen(type, this._onInteraction.bind(this), {\n                passive: true\n            });\n        }\n    }\n    _isARIAPressed() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ariaBool)(this._delegate._isPressed());\n    }\n    _onPressed(event1) {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isWriteSignal)(this._delegate._isPressed)) {\n            this._delegate._isPressed.set((p)=>!p);\n        }\n    }\n    _onMaybePress(event1) {\n        const disabled = this.$props.disabled() || this.el.hasAttribute(\"data-disabled\");\n        if (disabled) {\n            event1.preventDefault();\n            event1.stopImmediatePropagation();\n            return;\n        }\n        event1.preventDefault();\n        (this._delegate._onPress ?? this._onPressed).call(this, event1);\n    }\n    _onInteraction(event1) {\n        if (this.$props.disabled()) {\n            event1.preventDefault();\n            event1.stopImmediatePropagation();\n        }\n    }\n}\nToggleButtonController.props = {\n    disabled: false\n};\nvar __defProp$d = Object.defineProperty;\nvar __getOwnPropDesc$d = Object.getOwnPropertyDescriptor;\nvar __decorateClass$d = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$d(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$d(target, key, result);\n    return result;\n};\nclass ToggleButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this._pressed = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        new ToggleButtonController({\n            _isPressed: this._pressed\n        });\n    }\n    get pressed() {\n        return this._pressed();\n    }\n}\nToggleButton.props = {\n    disabled: false,\n    defaultPressed: false\n};\n__decorateClass$d([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], ToggleButton.prototype, \"pressed\");\nfunction ariaBool(value) {\n    return value ? \"true\" : \"false\";\n}\nfunction $ariaBool(signal) {\n    return ()=>ariaBool(signal());\n}\nclass AirPlayButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new ToggleButtonController({\n            _isPressed: this._isPressed.bind(this),\n            _onPress: this._onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { canAirPlay, isAirPlayConnected } = this._media.$state;\n        this.setAttributes({\n            \"data-active\": isAirPlayConnected,\n            \"data-supported\": canAirPlay,\n            \"data-state\": this._getState.bind(this),\n            \"aria-hidden\": $ariaBool(()=>!canAirPlay())\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"airplay\");\n        setARIALabel(el, this._getDefaultLabel.bind(this));\n    }\n    _onPress(event1) {\n        const remote = this._media.remote;\n        remote.requestAirPlay(event1);\n    }\n    _isPressed() {\n        const { remotePlaybackType, remotePlaybackState } = this._media.$state;\n        return remotePlaybackType() === \"airplay\" && remotePlaybackState() !== \"disconnected\";\n    }\n    _getState() {\n        const { remotePlaybackType, remotePlaybackState } = this._media.$state;\n        return remotePlaybackType() === \"airplay\" && remotePlaybackState();\n    }\n    _getDefaultLabel() {\n        const { remotePlaybackState } = this._media.$state;\n        return `AirPlay ${remotePlaybackState()}`;\n    }\n}\nAirPlayButton.props = ToggleButtonController.props;\nclass GoogleCastButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new ToggleButtonController({\n            _isPressed: this._isPressed.bind(this),\n            _onPress: this._onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { canGoogleCast, isGoogleCastConnected } = this._media.$state;\n        this.setAttributes({\n            \"data-active\": isGoogleCastConnected,\n            \"data-supported\": canGoogleCast,\n            \"data-state\": this._getState.bind(this),\n            \"aria-hidden\": $ariaBool(()=>!canGoogleCast())\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"google-cast\");\n        setARIALabel(el, this._getDefaultLabel.bind(this));\n    }\n    _onPress(event1) {\n        const remote = this._media.remote;\n        remote.requestGoogleCast(event1);\n    }\n    _isPressed() {\n        const { remotePlaybackType, remotePlaybackState } = this._media.$state;\n        return remotePlaybackType() === \"google-cast\" && remotePlaybackState() !== \"disconnected\";\n    }\n    _getState() {\n        const { remotePlaybackType, remotePlaybackState } = this._media.$state;\n        return remotePlaybackType() === \"google-cast\" && remotePlaybackState();\n    }\n    _getDefaultLabel() {\n        const { remotePlaybackState } = this._media.$state;\n        return `Google Cast ${remotePlaybackState()}`;\n    }\n}\nGoogleCastButton.props = ToggleButtonController.props;\nclass PlayButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new ToggleButtonController({\n            _isPressed: this._isPressed.bind(this),\n            _keyShortcut: \"togglePaused\",\n            _onPress: this._onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { paused, ended } = this._media.$state;\n        this.setAttributes({\n            \"data-paused\": paused,\n            \"data-ended\": ended\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"play\");\n        setARIALabel(el, \"Play\");\n    }\n    _onPress(event1) {\n        const remote = this._media.remote;\n        this._isPressed() ? remote.pause(event1) : remote.play(event1);\n    }\n    _isPressed() {\n        const { paused } = this._media.$state;\n        return !paused();\n    }\n}\nPlayButton.props = ToggleButtonController.props;\nclass CaptionButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new ToggleButtonController({\n            _isPressed: this._isPressed.bind(this),\n            _keyShortcut: \"toggleCaptions\",\n            _onPress: this._onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this.setAttributes({\n            \"data-active\": this._isPressed.bind(this),\n            \"data-supported\": ()=>!this._isHidden(),\n            \"aria-hidden\": $ariaBool(this._isHidden.bind(this))\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"caption\");\n        setARIALabel(el, \"Captions\");\n    }\n    _onPress(event1) {\n        this._media.remote.toggleCaptions(event1);\n    }\n    _isPressed() {\n        const { textTrack } = this._media.$state, track = textTrack();\n        return !!track && isTrackCaptionKind(track);\n    }\n    _isHidden() {\n        const { hasCaptions } = this._media.$state;\n        return !hasCaptions();\n    }\n}\nCaptionButton.props = ToggleButtonController.props;\nclass FullscreenButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new ToggleButtonController({\n            _isPressed: this._isPressed.bind(this),\n            _keyShortcut: \"toggleFullscreen\",\n            _onPress: this._onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { fullscreen } = this._media.$state, isSupported = this._isSupported.bind(this);\n        this.setAttributes({\n            \"data-active\": fullscreen,\n            \"data-supported\": isSupported,\n            \"aria-hidden\": $ariaBool(()=>!isSupported())\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"fullscreen\");\n        setARIALabel(el, \"Fullscreen\");\n    }\n    _onPress(event1) {\n        const remote = this._media.remote, target = this.$props.target();\n        this._isPressed() ? remote.exitFullscreen(target, event1) : remote.enterFullscreen(target, event1);\n    }\n    _isPressed() {\n        const { fullscreen } = this._media.$state;\n        return fullscreen();\n    }\n    _isSupported() {\n        const { canFullscreen } = this._media.$state;\n        return canFullscreen();\n    }\n}\nFullscreenButton.props = {\n    ...ToggleButtonController.props,\n    target: \"prefer-media\"\n};\nclass MuteButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new ToggleButtonController({\n            _isPressed: this._isPressed.bind(this),\n            _keyShortcut: \"toggleMuted\",\n            _onPress: this._onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this.setAttributes({\n            \"data-muted\": this._isPressed.bind(this),\n            \"data-state\": this._getState.bind(this)\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-mute-button\", \"\");\n        el.setAttribute(\"data-media-tooltip\", \"mute\");\n        setARIALabel(el, \"Mute\");\n    }\n    _onPress(event1) {\n        const remote = this._media.remote;\n        this._isPressed() ? remote.unmute(event1) : remote.mute(event1);\n    }\n    _isPressed() {\n        const { muted, volume } = this._media.$state;\n        return muted() || volume() === 0;\n    }\n    _getState() {\n        const { muted, volume } = this._media.$state, $volume = volume();\n        if (muted() || $volume === 0) return \"muted\";\n        else if ($volume >= 0.5) return \"high\";\n        else if ($volume < 0.5) return \"low\";\n    }\n}\nMuteButton.props = ToggleButtonController.props;\nclass PIPButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new ToggleButtonController({\n            _isPressed: this._isPressed.bind(this),\n            _keyShortcut: \"togglePictureInPicture\",\n            _onPress: this._onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { pictureInPicture } = this._media.$state, isSupported = this._isSupported.bind(this);\n        this.setAttributes({\n            \"data-active\": pictureInPicture,\n            \"data-supported\": isSupported,\n            \"aria-hidden\": $ariaBool(()=>!isSupported())\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"pip\");\n        setARIALabel(el, \"PiP\");\n    }\n    _onPress(event1) {\n        const remote = this._media.remote;\n        this._isPressed() ? remote.exitPictureInPicture(event1) : remote.enterPictureInPicture(event1);\n    }\n    _isPressed() {\n        const { pictureInPicture } = this._media.$state;\n        return pictureInPicture();\n    }\n    _isSupported() {\n        const { canPictureInPicture } = this._media.$state;\n        return canPictureInPicture();\n    }\n}\nPIPButton.props = ToggleButtonController.props;\nclass SeekButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new FocusVisibleController();\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { seeking } = this._media.$state, { seconds } = this.$props, isSupported = this._isSupported.bind(this);\n        this.setAttributes({\n            seconds,\n            \"data-seeking\": seeking,\n            \"data-supported\": isSupported,\n            \"aria-hidden\": $ariaBool(()=>!isSupported())\n        });\n    }\n    onAttach(el) {\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"role\", \"button\");\n        setAttributeIfEmpty(el, \"type\", \"button\");\n        el.setAttribute(\"data-media-tooltip\", \"seek\");\n        setARIALabel(el, this._getDefaultLabel.bind(this));\n    }\n    onConnect(el) {\n        onPress(el, this._onPress.bind(this));\n    }\n    _isSupported() {\n        const { canSeek } = this._media.$state;\n        return canSeek();\n    }\n    _getDefaultLabel() {\n        const { seconds } = this.$props;\n        return `Seek ${seconds() > 0 ? \"forward\" : \"backward\"} ${seconds()} seconds`;\n    }\n    _onPress(event1) {\n        const { seconds, disabled } = this.$props;\n        if (disabled()) return;\n        const { currentTime } = this._media.$state, seekTo = currentTime() + seconds();\n        this._media.remote.seek(seekTo, event1);\n    }\n}\nSeekButton.props = {\n    disabled: false,\n    seconds: 30\n};\nclass LiveButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new FocusVisibleController();\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { disabled } = this.$props, { live, liveEdge } = this._media.$state, isHidden = ()=>!live();\n        this.setAttributes({\n            \"data-edge\": liveEdge,\n            \"data-hidden\": isHidden,\n            \"aria-disabled\": $ariaBool(()=>disabled() || liveEdge()),\n            \"aria-hidden\": $ariaBool(isHidden)\n        });\n    }\n    onAttach(el) {\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"role\", \"button\");\n        setAttributeIfEmpty(el, \"type\", \"button\");\n        el.setAttribute(\"data-media-tooltip\", \"live\");\n    }\n    onConnect(el) {\n        onPress(el, this._onPress.bind(this));\n    }\n    _onPress(event1) {\n        const { disabled } = this.$props, { liveEdge } = this._media.$state;\n        if (disabled() || liveEdge()) return;\n        this._media.remote.seekToLiveEdge(event1);\n    }\n}\nLiveButton.props = {\n    disabled: false\n};\nconst sliderState = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    min: 0,\n    max: 100,\n    value: 0,\n    step: 1,\n    pointerValue: 0,\n    focused: false,\n    dragging: false,\n    pointing: false,\n    hidden: false,\n    get active () {\n        return this.dragging || this.focused || this.pointing;\n    },\n    get fillRate () {\n        return calcRate(this.min, this.max, this.value);\n    },\n    get fillPercent () {\n        return this.fillRate * 100;\n    },\n    get pointerRate () {\n        return calcRate(this.min, this.max, this.pointerValue);\n    },\n    get pointerPercent () {\n        return this.pointerRate * 100;\n    }\n});\nfunction calcRate(min, max, value) {\n    const range = max - min, offset = value - min;\n    return range > 0 ? offset / range : 0;\n}\nclass IntersectionObserverController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(_init){\n        super();\n        this._init = _init;\n    }\n    onConnect(el) {\n        this._observer = new IntersectionObserver((entries)=>{\n            this._init.callback?.(entries, this._observer);\n        }, this._init);\n        this._observer.observe(el);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._onDisconnect.bind(this));\n    }\n    /**\n   * Disconnect any active intersection observers.\n   */ _onDisconnect() {\n        this._observer?.disconnect();\n        this._observer = void 0;\n    }\n}\nconst sliderContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst sliderObserverContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nfunction getClampedValue(min, max, value, step) {\n    return clampNumber(min, round(value, getNumberOfDecimalPlaces(step)), max);\n}\nfunction getValueFromRate(min, max, rate, step) {\n    const boundRate = clampNumber(0, rate, 1), range = max - min, fill = range * boundRate, stepRatio = fill / step, steps = step * Math.round(stepRatio);\n    return min + steps;\n}\nconst SliderKeyDirection = {\n    Left: -1,\n    ArrowLeft: -1,\n    Up: 1,\n    ArrowUp: 1,\n    Right: 1,\n    ArrowRight: 1,\n    Down: -1,\n    ArrowDown: -1\n};\nclass SliderEventsController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(_delegate, _media){\n        super();\n        this._delegate = _delegate;\n        this._media = _media;\n        this._provider = null;\n        this._touch = null;\n        this._touchStartValue = null;\n        this._repeatedKeys = false;\n        this._onDocumentPointerMove = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)((event1)=>{\n            this._updatePointerValue(this._getPointerValue(event1), event1);\n        }, 20, {\n            leading: true\n        });\n    }\n    onSetup() {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(sliderObserverContext)) {\n            this._observer = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderObserverContext);\n        }\n    }\n    onConnect() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._attachEventListeners.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._attachPointerListeners.bind(this));\n        if (this._delegate._swipeGesture) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchSwipeGesture.bind(this));\n    }\n    _watchSwipeGesture() {\n        const { pointer } = this._media.$state;\n        if (pointer() !== \"coarse\" || !this._delegate._swipeGesture()) {\n            this._provider = null;\n            return;\n        }\n        this._provider = this._media.player.el?.querySelector(\"media-provider,[data-media-provider]\");\n        if (!this._provider) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._provider, \"touchstart\", this._onTouchStart.bind(this), {\n            passive: true\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._provider, \"touchmove\", this._onTouchMove.bind(this), {\n            passive: false\n        });\n    }\n    _onTouchStart(event1) {\n        this._touch = event1.touches[0];\n    }\n    _onTouchMove(event1) {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(this._touch) || isTouchPinchEvent(event1)) return;\n        const touch = event1.touches[0], xDiff = touch.clientX - this._touch.clientX, yDiff = touch.clientY - this._touch.clientY, isDragging = this.$state.dragging();\n        if (!isDragging && Math.abs(yDiff) > 5) {\n            return;\n        }\n        if (isDragging) return;\n        event1.preventDefault();\n        if (Math.abs(xDiff) > 20) {\n            this._touch = touch;\n            this._touchStartValue = this.$state.value();\n            this._onStartDragging(this._touchStartValue, event1);\n        }\n    }\n    _attachEventListeners() {\n        const { hidden } = this.$props;\n        this.listen(\"focus\", this._onFocus.bind(this));\n        this.listen(\"keydown\", this._onKeyDown.bind(this));\n        this.listen(\"keyup\", this._onKeyUp.bind(this));\n        if (hidden() || this._delegate._isDisabled()) return;\n        this.listen(\"pointerenter\", this._onPointerEnter.bind(this));\n        this.listen(\"pointermove\", this._onPointerMove.bind(this));\n        this.listen(\"pointerleave\", this._onPointerLeave.bind(this));\n        this.listen(\"pointerdown\", this._onPointerDown.bind(this));\n    }\n    _attachPointerListeners() {\n        if (this._delegate._isDisabled() || !this.$state.dragging()) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"pointerup\", this._onDocumentPointerUp.bind(this), {\n            capture: true\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"pointermove\", this._onDocumentPointerMove.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"touchmove\", this._onDocumentTouchMove.bind(this), {\n            passive: false\n        });\n    }\n    _onFocus() {\n        this._updatePointerValue(this.$state.value());\n    }\n    _updateValue(newValue, trigger) {\n        const { value, min, max, dragging } = this.$state;\n        const clampedValue = Math.max(min(), Math.min(newValue, max()));\n        value.set(clampedValue);\n        const event1 = this.createEvent(\"value-change\", {\n            detail: clampedValue,\n            trigger\n        });\n        this.dispatch(event1);\n        this._delegate._onValueChange?.(event1);\n        if (dragging()) {\n            const event2 = this.createEvent(\"drag-value-change\", {\n                detail: clampedValue,\n                trigger\n            });\n            this.dispatch(event2);\n            this._delegate._onDragValueChange?.(event2);\n        }\n    }\n    _updatePointerValue(value, trigger) {\n        const { pointerValue, dragging } = this.$state;\n        pointerValue.set(value);\n        this.dispatch(\"pointer-value-change\", {\n            detail: value,\n            trigger\n        });\n        if (dragging()) {\n            this._updateValue(value, trigger);\n        }\n    }\n    _getPointerValue(event1) {\n        let thumbPositionRate, rect = this.el.getBoundingClientRect(), { min, max } = this.$state;\n        if (this.$props.orientation() === \"vertical\") {\n            const { bottom: trackBottom, height: trackHeight } = rect;\n            thumbPositionRate = (trackBottom - event1.clientY) / trackHeight;\n        } else {\n            if (this._touch && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(this._touchStartValue)) {\n                const { width } = this._provider.getBoundingClientRect(), rate = (event1.clientX - this._touch.clientX) / width, range = max() - min(), diff = range * Math.abs(rate);\n                thumbPositionRate = (rate < 0 ? this._touchStartValue - diff : this._touchStartValue + diff) / range;\n            } else {\n                const { left: trackLeft, width: trackWidth } = rect;\n                thumbPositionRate = (event1.clientX - trackLeft) / trackWidth;\n            }\n        }\n        return Math.max(min(), Math.min(max(), this._delegate._roundValue(getValueFromRate(min(), max(), thumbPositionRate, this._delegate._getStep()))));\n    }\n    _onPointerEnter(event1) {\n        this.$state.pointing.set(true);\n    }\n    _onPointerMove(event1) {\n        const { dragging } = this.$state;\n        if (dragging()) return;\n        this._updatePointerValue(this._getPointerValue(event1), event1);\n    }\n    _onPointerLeave(event1) {\n        this.$state.pointing.set(false);\n    }\n    _onPointerDown(event1) {\n        if (event1.button !== 0) return;\n        const value = this._getPointerValue(event1);\n        this._onStartDragging(value, event1);\n        this._updatePointerValue(value, event1);\n    }\n    _onStartDragging(value, trigger) {\n        const { dragging } = this.$state;\n        if (dragging()) return;\n        dragging.set(true);\n        this._media.remote.pauseControls(trigger);\n        const event1 = this.createEvent(\"drag-start\", {\n            detail: value,\n            trigger\n        });\n        this.dispatch(event1);\n        this._delegate._onDragStart?.(event1);\n        this._observer?.onDragStart?.();\n    }\n    _onStopDragging(value, trigger) {\n        const { dragging } = this.$state;\n        if (!dragging()) return;\n        dragging.set(false);\n        this._media.remote.resumeControls(trigger);\n        const event1 = this.createEvent(\"drag-end\", {\n            detail: value,\n            trigger\n        });\n        this.dispatch(event1);\n        this._delegate._onDragEnd?.(event1);\n        this._touch = null;\n        this._touchStartValue = null;\n        this._observer?.onDragEnd?.();\n    }\n    _onKeyDown(event1) {\n        const isValidKey = Object.keys(SliderKeyDirection).includes(event1.key);\n        if (!isValidKey) return;\n        const { key } = event1, jumpValue = this._calcJumpValue(event1);\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(jumpValue)) {\n            this._updatePointerValue(jumpValue, event1);\n            this._updateValue(jumpValue, event1);\n            return;\n        }\n        const newValue = this._calcNewKeyValue(event1);\n        if (!this._repeatedKeys) {\n            this._repeatedKeys = key === this._lastDownKey;\n            if (!this.$state.dragging() && this._repeatedKeys) {\n                this._onStartDragging(newValue, event1);\n            }\n        }\n        this._updatePointerValue(newValue, event1);\n        this._lastDownKey = key;\n    }\n    _onKeyUp(event1) {\n        const isValidKey = Object.keys(SliderKeyDirection).includes(event1.key);\n        if (!isValidKey || !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(this._calcJumpValue(event1))) return;\n        const newValue = this._repeatedKeys ? this.$state.pointerValue() : this._calcNewKeyValue(event1);\n        this._updateValue(newValue, event1);\n        this._onStopDragging(newValue, event1);\n        this._lastDownKey = \"\";\n        this._repeatedKeys = false;\n    }\n    _calcJumpValue(event1) {\n        let key = event1.key, { min, max } = this.$state;\n        if (key === \"Home\" || key === \"PageUp\") {\n            return min();\n        } else if (key === \"End\" || key === \"PageDown\") {\n            return max();\n        } else if (!event1.metaKey && /^[0-9]$/.test(key)) {\n            return (max() - min()) / 10 * Number(key);\n        }\n        return null;\n    }\n    _calcNewKeyValue(event1) {\n        const { key, shiftKey } = event1;\n        event1.preventDefault();\n        event1.stopPropagation();\n        const { shiftKeyMultiplier } = this.$props;\n        const { min, max, value, pointerValue } = this.$state, step = this._delegate._getStep(), keyStep = this._delegate._getKeyStep();\n        const modifiedStep = !shiftKey ? keyStep : keyStep * shiftKeyMultiplier(), direction = Number(SliderKeyDirection[key]), diff = modifiedStep * direction, currentValue = this._repeatedKeys ? pointerValue() : this._delegate._getValue?.() ?? value(), steps = (currentValue + diff) / step;\n        return Math.max(min(), Math.min(max(), Number((step * steps).toFixed(3))));\n    }\n    // -------------------------------------------------------------------------------------------\n    // Document (Pointer Events)\n    // -------------------------------------------------------------------------------------------\n    _onDocumentPointerUp(event1) {\n        if (event1.button !== 0) return;\n        event1.preventDefault();\n        event1.stopImmediatePropagation();\n        const value = this._getPointerValue(event1);\n        this._updatePointerValue(value, event1);\n        this._onStopDragging(value, event1);\n    }\n    _onDocumentTouchMove(event1) {\n        event1.preventDefault();\n    }\n}\nconst sliderValueFormatContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)(()=>({}));\nclass SliderController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(_delegate){\n        super();\n        this._delegate = _delegate;\n        this._isVisible = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true);\n        this._isIntersecting = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true);\n        this._updateSliderVars = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)((fillPercent, pointerPercent)=>{\n            this.el?.style.setProperty(\"--slider-fill\", fillPercent + \"%\");\n            this.el?.style.setProperty(\"--slider-pointer\", pointerPercent + \"%\");\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const focus = new FocusVisibleController();\n        focus.attach(this);\n        this.$state.focused = focus.focused.bind(focus);\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(sliderValueFormatContext)) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderValueFormatContext, {\n                default: \"value\"\n            });\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderContext, {\n            _orientation: this.$props.orientation,\n            _disabled: this._delegate._isDisabled,\n            _preview: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null)\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchStep.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchDisabled.bind(this));\n        this._setupAttrs();\n        new SliderEventsController(this._delegate, this._media).attach(this);\n        new IntersectionObserverController({\n            callback: this._onIntersectionChange.bind(this)\n        }).attach(this);\n    }\n    onAttach(el) {\n        setAttributeIfEmpty(el, \"role\", \"slider\");\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"autocomplete\", \"off\");\n        if (IS_SERVER) this._watchCSSVars();\n        else (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCSSVars.bind(this));\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(observeVisibility(el, this._isVisible.set));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHidden.bind(this));\n    }\n    _onIntersectionChange(entries) {\n        this._isIntersecting.set(entries[0].isIntersecting);\n    }\n    // -------------------------------------------------------------------------------------------\n    // Watch\n    // -------------------------------------------------------------------------------------------\n    _watchHidden() {\n        const { hidden } = this.$props;\n        this.$state.hidden.set(hidden() || !this._isVisible() || !this._isIntersecting.bind(this));\n    }\n    _watchValue() {\n        const { dragging, value, min, max } = this.$state;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(dragging)) return;\n        value.set(getClampedValue(min(), max(), value(), this._delegate._getStep()));\n    }\n    _watchStep() {\n        this.$state.step.set(this._delegate._getStep());\n    }\n    _watchDisabled() {\n        if (!this._delegate._isDisabled()) return;\n        const { dragging, pointing } = this.$state;\n        dragging.set(false);\n        pointing.set(false);\n    }\n    // -------------------------------------------------------------------------------------------\n    // ARIA\n    // -------------------------------------------------------------------------------------------\n    _getARIADisabled() {\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ariaBool)(this._delegate._isDisabled());\n    }\n    // -------------------------------------------------------------------------------------------\n    // Attributes\n    // -------------------------------------------------------------------------------------------\n    _setupAttrs() {\n        const { orientation } = this.$props, { dragging, active, pointing } = this.$state;\n        this.setAttributes({\n            \"data-dragging\": dragging,\n            \"data-pointing\": pointing,\n            \"data-active\": active,\n            \"aria-disabled\": this._getARIADisabled.bind(this),\n            \"aria-valuemin\": this._delegate._getARIAValueMin ?? this.$state.min,\n            \"aria-valuemax\": this._delegate._getARIAValueMax ?? this.$state.max,\n            \"aria-valuenow\": this._delegate._getARIAValueNow,\n            \"aria-valuetext\": this._delegate._getARIAValueText,\n            \"aria-orientation\": orientation\n        });\n    }\n    _watchCSSVars() {\n        const { fillPercent, pointerPercent } = this.$state;\n        this._updateSliderVars(round(fillPercent(), 3), round(pointerPercent(), 3));\n    }\n}\nSliderController.props = {\n    hidden: false,\n    disabled: false,\n    step: 1,\n    keyStep: 1,\n    orientation: \"horizontal\",\n    shiftKeyMultiplier: 5\n};\nclass Slider extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new SliderController({\n            _getStep: this.$props.step,\n            _getKeyStep: this.$props.keyStep,\n            _roundValue: Math.round,\n            _isDisabled: this.$props.disabled,\n            _getARIAValueNow: this._getARIAValueNow.bind(this),\n            _getARIAValueText: this._getARIAValueText.bind(this)\n        });\n    }\n    onSetup() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchMinMax.bind(this));\n    }\n    // -------------------------------------------------------------------------------------------\n    // Props\n    // -------------------------------------------------------------------------------------------\n    _getARIAValueNow() {\n        const { value } = this.$state;\n        return Math.round(value());\n    }\n    _getARIAValueText() {\n        const { value, max } = this.$state;\n        return round(value() / max() * 100, 2) + \"%\";\n    }\n    // -------------------------------------------------------------------------------------------\n    // Watch\n    // -------------------------------------------------------------------------------------------\n    _watchValue() {\n        const { value } = this.$props;\n        this.$state.value.set(value());\n    }\n    _watchMinMax() {\n        const { min, max } = this.$props;\n        this.$state.min.set(min());\n        this.$state.max.set(max());\n    }\n}\nSlider.props = {\n    ...SliderController.props,\n    min: 0,\n    max: 100,\n    value: 0\n};\nSlider.state = sliderState;\nconst cache = /* @__PURE__ */ new Map(), pending = /* @__PURE__ */ new Map(), warned = /* @__PURE__ */ new Set();\nclass ThumbnailsLoader {\n    constructor($src, $crossOrigin, _media){\n        this.$src = $src;\n        this.$crossOrigin = $crossOrigin;\n        this._media = _media;\n        this.$images = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onLoadCues.bind(this));\n    }\n    static create($src, $crossOrigin) {\n        const media = useMediaContext();\n        return new ThumbnailsLoader($src, $crossOrigin, media);\n    }\n    _onLoadCues() {\n        const { canLoad } = this._media.$state;\n        if (!canLoad()) return;\n        const src = this.$src();\n        if (!src) return;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && cache.has(src)) {\n            const cues = cache.get(src);\n            cache.delete(src);\n            cache.set(src, cues);\n            if (cache.size > 99) {\n                const firstKey = cache.keys().next().value;\n                cache.delete(firstKey);\n            }\n            this.$images.set(cache.get(src));\n        } else if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) {\n            const crossOrigin = this.$crossOrigin(), currentKey = src + \"::\" + crossOrigin;\n            if (!pending.has(currentKey)) {\n                const promise = new Promise(async (resolve, reject)=>{\n                    try {\n                        const response = await fetch(src, {\n                            credentials: getRequestCredentials(crossOrigin)\n                        }), isJSON = response.headers.get(\"content-type\") === \"application/json\";\n                        if (isJSON) {\n                            const json = await response.json();\n                            if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(json)) {\n                                if (json[0] && \"text\" in json[0]) {\n                                    resolve(this._processVTTCues(json));\n                                } else {\n                                    for(let i = 0; i < json.length; i++){\n                                        const image = json[i];\n                                        assert((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(image), `Item not an object at index ${i}`);\n                                        assert(\"url\" in image && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(image.url), `Invalid or missing \\`url\\` property at index ${i}`);\n                                        assert(\"startTime\" in image && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(image.startTime), `Invalid or missing \\`startTime\\` property at index ${i}`);\n                                    }\n                                    resolve(json);\n                                }\n                            } else {\n                                resolve(this._processStoryboard(json));\n                            }\n                            return;\n                        }\n                        __webpack_require__.e(/*! import() */ \"vendor-chunks/media-captions\").then(__webpack_require__.bind(__webpack_require__, /*! media-captions */ \"(ssr)/./node_modules/media-captions/dist/dev.js\")).then(async ({ parseResponse })=>{\n                            try {\n                                const { cues } = await parseResponse(response);\n                                resolve(this._processVTTCues(cues));\n                            } catch (e) {\n                                reject(e);\n                            }\n                        });\n                    } catch (e) {\n                        reject(e);\n                    }\n                }).then((images)=>{\n                    cache.set(currentKey, images);\n                    return images;\n                }).catch((error)=>{\n                    this._onError(src, error);\n                }).finally(()=>{\n                    if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(currentKey)) pending.delete(currentKey);\n                });\n                pending.set(currentKey, promise);\n            }\n            pending.get(currentKey)?.then((images)=>{\n                this.$images.set(images || []);\n            });\n        } else if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(src)) {\n            try {\n                this.$images.set(this._processImages(src));\n            } catch (error) {\n                this._onError(src, error);\n            }\n        } else {\n            try {\n                this.$images.set(this._processStoryboard(src));\n            } catch (error) {\n                this._onError(src, error);\n            }\n        }\n        return ()=>{\n            this.$images.set([]);\n        };\n    }\n    _processImages(images) {\n        const baseURL = this._resolveBaseUrl();\n        return images.map((img, i)=>{\n            assert(img.url && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(img.url), `Invalid or missing \\`url\\` property at index ${i}`);\n            assert(\"startTime\" in img && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(img.startTime), `Invalid or missing \\`startTime\\` property at index ${i}`);\n            return {\n                ...img,\n                url: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(img.url) ? this._resolveURL(img.url, baseURL) : img.url\n            };\n        });\n    }\n    _processStoryboard(board) {\n        assert((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(board.url), \"Missing `url` in storyboard object\");\n        assert((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(board.tiles) && board.tiles?.length, `Empty tiles in storyboard`);\n        const url = new URL(board.url), images = [];\n        const tileWidth = \"tile_width\" in board ? board.tile_width : board.tileWidth, tileHeight = \"tile_height\" in board ? board.tile_height : board.tileHeight;\n        for (const tile of board.tiles){\n            images.push({\n                url,\n                startTime: \"start\" in tile ? tile.start : tile.startTime,\n                width: tileWidth,\n                height: tileHeight,\n                coords: {\n                    x: tile.x,\n                    y: tile.y\n                }\n            });\n        }\n        return images;\n    }\n    _processVTTCues(cues) {\n        for(let i = 0; i < cues.length; i++){\n            const cue = cues[i];\n            assert(\"startTime\" in cue && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(cue.startTime), `Invalid or missing \\`startTime\\` property at index ${i}`);\n            assert(\"text\" in cue && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(cue.text), `Invalid or missing \\`text\\` property at index ${i}`);\n        }\n        const images = [], baseURL = this._resolveBaseUrl();\n        for (const cue of cues){\n            const [url, hash] = cue.text.split(\"#\"), data = this._resolveData(hash);\n            images.push({\n                url: this._resolveURL(url, baseURL),\n                startTime: cue.startTime,\n                endTime: cue.endTime,\n                width: data?.w,\n                height: data?.h,\n                coords: data && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(data.x) && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(data.y) ? {\n                    x: data.x,\n                    y: data.y\n                } : void 0\n            });\n        }\n        return images;\n    }\n    _resolveBaseUrl() {\n        let baseURL = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$src);\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(baseURL) || !/^https?:/.test(baseURL)) {\n            return location.href;\n        }\n        return baseURL;\n    }\n    _resolveURL(src, baseURL) {\n        return /^https?:/.test(src) ? new URL(src) : new URL(src, baseURL);\n    }\n    _resolveData(hash) {\n        if (!hash) return {};\n        const [hashProps, values] = hash.split(\"=\"), hashValues = values?.split(\",\"), data = {};\n        if (!hashProps || !hashValues) {\n            return null;\n        }\n        for(let i = 0; i < hashProps.length; i++){\n            const value = +hashValues[i];\n            if (!isNaN(value)) data[hashProps[i]] = value;\n        }\n        return data;\n    }\n    _onError(src, error) {\n        if (warned?.has(src)) return;\n        this._media.logger?.errorGroup(\"[vidstack] failed to load thumbnails\").labelledLog(\"Src\", src).labelledLog(\"Error\", error).dispatch();\n        warned?.add(src);\n    }\n}\nclass Thumbnail extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._styleResets = [];\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this._loader = ThumbnailsLoader.create(this.$props.src, this.$state.crossOrigin);\n        this._watchCrossOrigin();\n        this.setAttributes({\n            \"data-loading\": this._isLoading.bind(this),\n            \"data-error\": this._hasError.bind(this),\n            \"data-hidden\": this.$state.hidden,\n            \"aria-hidden\": $ariaBool(this.$state.hidden)\n        });\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchImg.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHidden.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCrossOrigin.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onLoadStart.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onFindActiveThumbnail.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._resize.bind(this));\n    }\n    _watchImg() {\n        const img = this.$state.img();\n        if (!img) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(img, \"load\", this._onLoaded.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(img, \"error\", this._onError.bind(this));\n    }\n    _watchCrossOrigin() {\n        const { crossOrigin: crossOriginProp } = this.$props, { crossOrigin: crossOriginState } = this.$state, { crossOrigin: mediaCrossOrigin } = this._media.$state, crossOrigin = crossOriginProp() !== null ? crossOriginProp() : mediaCrossOrigin();\n        crossOriginState.set(crossOrigin === true ? \"anonymous\" : crossOrigin);\n    }\n    _onLoadStart() {\n        const { src, loading, error } = this.$state;\n        if (src()) {\n            loading.set(true);\n            error.set(null);\n        }\n        return ()=>{\n            this._resetStyles();\n            loading.set(false);\n            error.set(null);\n        };\n    }\n    _onLoaded() {\n        const { loading, error } = this.$state;\n        this._resize();\n        loading.set(false);\n        error.set(null);\n    }\n    _onError(event1) {\n        const { loading, error } = this.$state;\n        loading.set(false);\n        error.set(event1);\n    }\n    _isLoading() {\n        const { loading, hidden } = this.$state;\n        return !hidden() && loading();\n    }\n    _hasError() {\n        const { error } = this.$state;\n        return !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(error());\n    }\n    _watchHidden() {\n        const { hidden } = this.$state, { duration } = this._media.$state, images = this._loader.$images();\n        hidden.set(this._hasError() || !Number.isFinite(duration()) || images.length === 0);\n    }\n    _getTime() {\n        return this.$props.time();\n    }\n    _onFindActiveThumbnail() {\n        let images = this._loader.$images();\n        if (!images.length) return;\n        let time = this._getTime(), { src, activeThumbnail } = this.$state, activeIndex = -1, activeImage = null;\n        for(let i = images.length - 1; i >= 0; i--){\n            const image = images[i];\n            if (time >= image.startTime && (!image.endTime || time < image.endTime)) {\n                activeIndex = i;\n                break;\n            }\n        }\n        if (images[activeIndex]) {\n            activeImage = images[activeIndex];\n        }\n        activeThumbnail.set(activeImage);\n        src.set(activeImage?.url.href || \"\");\n    }\n    _resize() {\n        if (!this.scope || this.$state.hidden()) return;\n        const rootEl = this.el, imgEl = this.$state.img(), thumbnail = this.$state.activeThumbnail();\n        if (!imgEl || !thumbnail || !rootEl) return;\n        let width = thumbnail.width ?? imgEl.naturalWidth, height = thumbnail?.height ?? imgEl.naturalHeight, { maxWidth, maxHeight, minWidth, minHeight, width: elWidth, height: elHeight } = getComputedStyle(this.el);\n        if (minWidth === \"100%\") minWidth = parseFloat(elWidth) + \"\";\n        if (minHeight === \"100%\") minHeight = parseFloat(elHeight) + \"\";\n        let minRatio = Math.max(parseInt(minWidth) / width, parseInt(minHeight) / height), maxRatio = Math.min(Math.max(parseInt(minWidth), parseInt(maxWidth)) / width, Math.max(parseInt(minHeight), parseInt(maxHeight)) / height), scale = !isNaN(maxRatio) && maxRatio < 1 ? maxRatio : minRatio > 1 ? minRatio : 1;\n        this._style(rootEl, \"--thumbnail-width\", `${width * scale}px`);\n        this._style(rootEl, \"--thumbnail-height\", `${height * scale}px`);\n        this._style(imgEl, \"width\", `${imgEl.naturalWidth * scale}px`);\n        this._style(imgEl, \"height\", `${imgEl.naturalHeight * scale}px`);\n        this._style(imgEl, \"transform\", thumbnail.coords ? `translate(-${thumbnail.coords.x * scale}px, -${thumbnail.coords.y * scale}px)` : \"\");\n        this._style(imgEl, \"max-width\", \"none\");\n    }\n    _style(el, name, value) {\n        el.style.setProperty(name, value);\n        this._styleResets.push(()=>el.style.removeProperty(name));\n    }\n    _resetStyles() {\n        for (const reset of this._styleResets)reset();\n        this._styleResets = [];\n    }\n}\nThumbnail.props = {\n    src: null,\n    time: 0,\n    crossOrigin: null\n};\nThumbnail.state = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    src: \"\",\n    img: null,\n    thumbnails: [],\n    activeThumbnail: null,\n    crossOrigin: null,\n    loading: false,\n    error: null,\n    hidden: false\n});\nclass SliderThumbnail extends Thumbnail {\n    onAttach(el) {\n        this._slider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useState)(Slider.state);\n    }\n    _getTime() {\n        const { duration, clipStartTime } = this._media.$state;\n        return clipStartTime() + this._slider.pointerRate() * duration();\n    }\n}\nvar __defProp$c = Object.defineProperty;\nvar __getOwnPropDesc$c = Object.getOwnPropertyDescriptor;\nvar __decorateClass$c = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$c(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$c(target, key, result);\n    return result;\n};\nclass SliderVideo extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    get video() {\n        return this.$state.video();\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this._slider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useState)(Slider.state);\n        this._watchCrossOrigin();\n        this.setAttributes({\n            \"data-loading\": this._isLoading.bind(this),\n            \"data-hidden\": this.$state.hidden,\n            \"data-error\": this._hasError.bind(this),\n            \"aria-hidden\": $ariaBool(this.$state.hidden)\n        });\n    }\n    onAttach(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchVideo.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchSrc.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCrossOrigin.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHidden.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onSrcChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onUpdateTime.bind(this));\n    }\n    _watchVideo() {\n        const video = this.$state.video();\n        if (!video) return;\n        if (video.readyState >= 2) this._onCanPlay();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(video, \"canplay\", this._onCanPlay.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(video, \"error\", this._onError.bind(this));\n    }\n    _watchSrc() {\n        const { src } = this.$state, { canLoad } = this._media.$state;\n        src.set(canLoad() ? this.$props.src() : null);\n    }\n    _watchCrossOrigin() {\n        const { crossOrigin: crossOriginProp } = this.$props, { crossOrigin: crossOriginState } = this.$state, { crossOrigin: mediaCrossOrigin } = this._media.$state, crossOrigin = crossOriginProp() !== null ? crossOriginProp() : mediaCrossOrigin();\n        crossOriginState.set(crossOrigin === true ? \"anonymous\" : crossOrigin);\n    }\n    _isLoading() {\n        const { canPlay, hidden } = this.$state;\n        return !canPlay() && !hidden();\n    }\n    _hasError() {\n        const { error } = this.$state;\n        return !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(error);\n    }\n    _watchHidden() {\n        const { src, hidden } = this.$state, { canLoad, duration } = this._media.$state;\n        hidden.set(canLoad() && (!src() || this._hasError() || !Number.isFinite(duration())));\n    }\n    _onSrcChange() {\n        const { src, canPlay, error } = this.$state;\n        src();\n        canPlay.set(false);\n        error.set(null);\n    }\n    _onCanPlay(event1) {\n        const { canPlay, error } = this.$state;\n        canPlay.set(true);\n        error.set(null);\n        this.dispatch(\"can-play\", {\n            trigger: event1\n        });\n    }\n    _onError(event1) {\n        const { canPlay, error } = this.$state;\n        canPlay.set(false);\n        error.set(event1);\n        this.dispatch(\"error\", {\n            trigger: event1\n        });\n    }\n    _onUpdateTime() {\n        const { video, canPlay } = this.$state, { duration } = this._media.$state, { pointerRate } = this._slider, media = video(), canUpdate = canPlay() && media && Number.isFinite(duration()) && Number.isFinite(pointerRate());\n        if (canUpdate) {\n            media.currentTime = pointerRate() * duration();\n        }\n    }\n}\nSliderVideo.props = {\n    src: null,\n    crossOrigin: null\n};\nSliderVideo.state = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    video: null,\n    src: null,\n    crossOrigin: null,\n    canPlay: false,\n    error: null,\n    hidden: false\n});\n__decorateClass$c([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], SliderVideo.prototype, \"video\");\nvar __defProp$b = Object.defineProperty;\nvar __getOwnPropDesc$b = Object.getOwnPropertyDescriptor;\nvar __decorateClass$b = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$b(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$b(target, key, result);\n    return result;\n};\nclass SliderValue extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    onSetup() {\n        this._slider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useState)(Slider.state);\n        this._format = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderValueFormatContext);\n        this._text = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.computed)(this.getValueText.bind(this));\n    }\n    getValueText() {\n        const { type, format, decimalPlaces, padHours, padMinutes, showHours, showMs } = this.$props, { value: sliderValue, pointerValue, min, max } = this._slider, _format = format?.() ?? this._format.default;\n        const value = type() === \"current\" ? sliderValue() : pointerValue();\n        if (_format === \"percent\") {\n            const range = max() - min();\n            const percent = value / range * 100;\n            return (this._format.percent ?? round)(percent, decimalPlaces()) + \"%\";\n        } else if (_format === \"time\") {\n            return (this._format.time ?? formatTime)(value, {\n                padHrs: padHours(),\n                padMins: padMinutes(),\n                showHrs: showHours(),\n                showMs: showMs()\n            });\n        } else {\n            return (this._format.value?.(value) ?? value.toFixed(2)) + \"\";\n        }\n    }\n}\nSliderValue.props = {\n    type: \"pointer\",\n    format: null,\n    showHours: false,\n    showMs: false,\n    padHours: null,\n    padMinutes: null,\n    decimalPlaces: 2\n};\n__decorateClass$b([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], SliderValue.prototype, \"getValueText\");\nclass SliderPreview extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._updatePlacement = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(()=>{\n            const { _disabled, _orientation } = this._slider;\n            if (_disabled()) return;\n            const el = this.el, { offset, noClamp } = this.$props;\n            if (!el) return;\n            updateSliderPreviewPlacement(el, {\n                clamp: !noClamp(),\n                offset: offset(),\n                orientation: _orientation()\n            });\n        });\n    }\n    onSetup() {\n        this._slider = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderContext);\n        const { active } = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useState)(Slider.state);\n        this.setAttributes({\n            \"data-visible\": active\n        });\n    }\n    onAttach(el) {\n        Object.assign(el.style, {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"max-content\"\n        });\n    }\n    onConnect(el) {\n        const { _preview } = this._slider;\n        _preview.set(el);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>_preview.set(null));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._updatePlacement.bind(this));\n        const resize = new ResizeObserver(this._updatePlacement.bind(this));\n        resize.observe(el);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>resize.disconnect());\n    }\n}\nSliderPreview.props = {\n    offset: 0,\n    noClamp: false\n};\nfunction updateSliderPreviewPlacement(el, { clamp, offset, orientation }) {\n    const computedStyle = getComputedStyle(el), width = parseFloat(computedStyle.width), height = parseFloat(computedStyle.height), styles = {\n        top: null,\n        right: null,\n        bottom: null,\n        left: null\n    };\n    styles[orientation === \"horizontal\" ? \"bottom\" : \"left\"] = `calc(100% + var(--media-slider-preview-offset, ${offset}px))`;\n    if (orientation === \"horizontal\") {\n        const widthHalf = width / 2;\n        if (!clamp) {\n            styles.left = `calc(var(--slider-pointer) - ${widthHalf}px)`;\n        } else {\n            const leftClamp = `max(0px, calc(var(--slider-pointer) - ${widthHalf}px))`, rightClamp = `calc(100% - ${width}px)`;\n            styles.left = `min(${leftClamp}, ${rightClamp})`;\n        }\n    } else {\n        const heightHalf = height / 2;\n        if (!clamp) {\n            styles.bottom = `calc(var(--slider-pointer) - ${heightHalf}px)`;\n        } else {\n            const topClamp = `max(${heightHalf}px, calc(var(--slider-pointer) - ${heightHalf}px))`, bottomClamp = `calc(100% - ${height}px)`;\n            styles.bottom = `min(${topClamp}, ${bottomClamp})`;\n        }\n    }\n    Object.assign(el.style, styles);\n}\nclass VolumeSlider extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._throttleVolumeChange = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this._onVolumeChange.bind(this), 25);\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { audioGain } = this._media.$state;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderValueFormatContext, {\n            default: \"percent\",\n            value (value) {\n                return (value * (audioGain() ?? 1)).toFixed(2);\n            },\n            percent (value) {\n                return Math.round(value * (audioGain() ?? 1));\n            }\n        });\n        new SliderController({\n            _getStep: this.$props.step,\n            _getKeyStep: this.$props.keyStep,\n            _roundValue: Math.round,\n            _isDisabled: this._isDisabled.bind(this),\n            _getARIAValueMax: this._getARIAValueMax.bind(this),\n            _getARIAValueNow: this._getARIAValueNow.bind(this),\n            _getARIAValueText: this._getARIAValueText.bind(this),\n            _onDragValueChange: this._onDragValueChange.bind(this),\n            _onValueChange: this._onValueChange.bind(this)\n        }).attach(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchVolume.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-volume-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Volume\");\n        const { canSetVolume } = this._media.$state;\n        this.setAttributes({\n            \"data-supported\": canSetVolume,\n            \"aria-hidden\": $ariaBool(()=>!canSetVolume())\n        });\n    }\n    _getARIAValueNow() {\n        const { value } = this.$state, { audioGain } = this._media.$state;\n        return Math.round(value() * (audioGain() ?? 1));\n    }\n    _getARIAValueText() {\n        const { value, max } = this.$state, { audioGain } = this._media.$state;\n        return round(value() / max() * (audioGain() ?? 1) * 100, 2) + \"%\";\n    }\n    _getARIAValueMax() {\n        const { audioGain } = this._media.$state;\n        return this.$state.max() * (audioGain() ?? 1);\n    }\n    _isDisabled() {\n        const { disabled } = this.$props, { canSetVolume } = this._media.$state;\n        return disabled() || !canSetVolume();\n    }\n    _watchVolume() {\n        const { muted, volume } = this._media.$state;\n        const newValue = muted() ? 0 : volume() * 100;\n        this.$state.value.set(newValue);\n        this.dispatch(\"value-change\", {\n            detail: newValue\n        });\n    }\n    _onVolumeChange(event1) {\n        if (!event1.trigger) return;\n        const mediaVolume = round(event1.detail / 100, 3);\n        this._media.remote.changeVolume(mediaVolume, event1);\n    }\n    _onValueChange(event1) {\n        this._throttleVolumeChange(event1);\n    }\n    _onDragValueChange(event1) {\n        this._throttleVolumeChange(event1);\n    }\n}\nVolumeSlider.props = {\n    ...SliderController.props,\n    keyStep: 5,\n    shiftKeyMultiplier: 2\n};\nVolumeSlider.state = sliderState;\nclass AudioGainSlider extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    onSetup() {\n        this._media = useMediaContext();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderValueFormatContext, {\n            default: \"percent\",\n            percent: (_, decimalPlaces)=>{\n                return round(this.$state.value(), decimalPlaces) + \"%\";\n            }\n        });\n        new SliderController({\n            _getStep: this.$props.step,\n            _getKeyStep: this.$props.keyStep,\n            _roundValue: Math.round,\n            _isDisabled: this._isDisabled.bind(this),\n            _getARIAValueNow: this._getARIAValueNow.bind(this),\n            _getARIAValueText: this._getARIAValueText.bind(this),\n            _onDragValueChange: this._onDragValueChange.bind(this),\n            _onValueChange: this._onValueChange.bind(this)\n        }).attach(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchMinMax.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchAudioGain.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-audio-gain-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Audio Boost\");\n        const { canSetAudioGain } = this._media.$state;\n        this.setAttributes({\n            \"data-supported\": canSetAudioGain,\n            \"aria-hidden\": $ariaBool(()=>!canSetAudioGain())\n        });\n    }\n    _getARIAValueNow() {\n        const { value } = this.$state;\n        return Math.round(value());\n    }\n    _getARIAValueText() {\n        const { value } = this.$state;\n        return value() + \"%\";\n    }\n    _watchMinMax() {\n        const { min, max } = this.$props;\n        this.$state.min.set(min());\n        this.$state.max.set(max());\n    }\n    _watchAudioGain() {\n        const { audioGain } = this._media.$state, value = ((audioGain() ?? 1) - 1) * 100;\n        this.$state.value.set(value);\n        this.dispatch(\"value-change\", {\n            detail: value\n        });\n    }\n    _isDisabled() {\n        const { disabled } = this.$props, { canSetAudioGain } = this._media.$state;\n        return disabled() || !canSetAudioGain();\n    }\n    _onAudioGainChange(event1) {\n        if (!event1.trigger) return;\n        const gain = round(1 + event1.detail / 100, 2);\n        this._media.remote.changeAudioGain(gain, event1);\n    }\n    _onValueChange(event1) {\n        this._onAudioGainChange(event1);\n    }\n    _onDragValueChange(event1) {\n        this._onAudioGainChange(event1);\n    }\n}\nAudioGainSlider.props = {\n    ...SliderController.props,\n    step: 25,\n    keyStep: 25,\n    shiftKeyMultiplier: 2,\n    min: 0,\n    max: 300\n};\nAudioGainSlider.state = sliderState;\nclass SpeedSlider extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._throttledSpeedChange = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this._onPlaybackRateChange.bind(this), 25);\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        new SliderController({\n            _getStep: this.$props.step,\n            _getKeyStep: this.$props.keyStep,\n            _roundValue: this._roundValue,\n            _isDisabled: this._isDisabled.bind(this),\n            _getARIAValueNow: this._getARIAValueNow.bind(this),\n            _getARIAValueText: this._getARIAValueText.bind(this),\n            _onDragValueChange: this._onDragValueChange.bind(this),\n            _onValueChange: this._onValueChange.bind(this)\n        }).attach(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchMinMax.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPlaybackRate.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-speed-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Speed\");\n        const { canSetPlaybackRate } = this._media.$state;\n        this.setAttributes({\n            \"data-supported\": canSetPlaybackRate,\n            \"aria-hidden\": $ariaBool(()=>!canSetPlaybackRate())\n        });\n    }\n    _getARIAValueNow() {\n        const { value } = this.$state;\n        return value();\n    }\n    _getARIAValueText() {\n        const { value } = this.$state;\n        return value() + \"x\";\n    }\n    _watchMinMax() {\n        const { min, max } = this.$props;\n        this.$state.min.set(min());\n        this.$state.max.set(max());\n    }\n    _watchPlaybackRate() {\n        const { playbackRate } = this._media.$state;\n        const newValue = playbackRate();\n        this.$state.value.set(newValue);\n        this.dispatch(\"value-change\", {\n            detail: newValue\n        });\n    }\n    _roundValue(value) {\n        return round(value, 2);\n    }\n    _isDisabled() {\n        const { disabled } = this.$props, { canSetPlaybackRate } = this._media.$state;\n        return disabled() || !canSetPlaybackRate();\n    }\n    _onPlaybackRateChange(event1) {\n        if (!event1.trigger) return;\n        const rate = event1.detail;\n        this._media.remote.changePlaybackRate(rate, event1);\n    }\n    _onValueChange(event1) {\n        this._throttledSpeedChange(event1);\n    }\n    _onDragValueChange(event1) {\n        this._throttledSpeedChange(event1);\n    }\n}\nSpeedSlider.props = {\n    ...SliderController.props,\n    step: 0.25,\n    keyStep: 0.25,\n    shiftKeyMultiplier: 2,\n    min: 0,\n    max: 2\n};\nSpeedSlider.state = sliderState;\nclass QualitySlider extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._sortedQualities = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.computed)(()=>{\n            const { qualities } = this._media.$state;\n            return sortVideoQualities(qualities());\n        });\n        this._throttledQualityChange = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this._onQualityChange.bind(this), 25);\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        new SliderController({\n            _getStep: this.$props.step,\n            _getKeyStep: this.$props.keyStep,\n            _roundValue: Math.round,\n            _isDisabled: this._isDisabled.bind(this),\n            _getARIAValueNow: this._getARIAValueNow.bind(this),\n            _getARIAValueText: this._getARIAValueText.bind(this),\n            _onDragValueChange: this._onDragValueChange.bind(this),\n            _onValueChange: this._onValueChange.bind(this)\n        }).attach(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchMax.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchQuality.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-quality-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Video Quality\");\n        const { qualities, canSetQuality } = this._media.$state, $supported = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.computed)(()=>canSetQuality() && qualities().length > 0);\n        this.setAttributes({\n            \"data-supported\": $supported,\n            \"aria-hidden\": $ariaBool(()=>!$supported())\n        });\n    }\n    _getARIAValueNow() {\n        const { value } = this.$state;\n        return value();\n    }\n    _getARIAValueText() {\n        const { quality } = this._media.$state;\n        if (!quality()) return \"\";\n        const { height, bitrate } = quality(), bitrateText = bitrate && bitrate > 0 ? `${(bitrate / 1e6).toFixed(2)} Mbps` : null;\n        return height ? `${height}p${bitrateText ? ` (${bitrateText})` : \"\"}` : \"Auto\";\n    }\n    _watchMax() {\n        const $qualities = this._sortedQualities();\n        this.$state.max.set(Math.max(0, $qualities.length - 1));\n    }\n    _watchQuality() {\n        let { quality } = this._media.$state, $qualities = this._sortedQualities(), value = Math.max(0, $qualities.indexOf(quality()));\n        this.$state.value.set(value);\n        this.dispatch(\"value-change\", {\n            detail: value\n        });\n    }\n    _isDisabled() {\n        const { disabled } = this.$props, { canSetQuality, qualities } = this._media.$state;\n        return disabled() || qualities().length <= 1 || !canSetQuality();\n    }\n    _onQualityChange(event1) {\n        if (!event1.trigger) return;\n        const { qualities } = this._media, quality = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._sortedQualities)[event1.detail];\n        this._media.remote.changeQuality(qualities.indexOf(quality), event1);\n    }\n    _onValueChange(event1) {\n        this._throttledQualityChange(event1);\n    }\n    _onDragValueChange(event1) {\n        this._throttledQualityChange(event1);\n    }\n}\nQualitySlider.props = {\n    ...SliderController.props,\n    step: 1,\n    keyStep: 1,\n    shiftKeyMultiplier: 1\n};\nQualitySlider.state = sliderState;\nclass TimeSlider extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this._chapter = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        this._playingBeforeDragStart = false;\n        const { noSwipeGesture } = this.$props;\n        new SliderController({\n            _swipeGesture: ()=>!noSwipeGesture(),\n            _getValue: this._getValue.bind(this),\n            _getStep: this._getStep.bind(this),\n            _getKeyStep: this._getKeyStep.bind(this),\n            _roundValue: this._roundValue,\n            _isDisabled: this._isDisabled.bind(this),\n            _getARIAValueNow: this._getARIAValueNow.bind(this),\n            _getARIAValueText: this._getARIAValueText.bind(this),\n            _onDragStart: this._onDragStart.bind(this),\n            _onDragValueChange: this._onDragValueChange.bind(this),\n            _onDragEnd: this._onDragEnd.bind(this),\n            _onValueChange: this._onValueChange.bind(this)\n        });\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderValueFormatContext, {\n            default: \"time\",\n            value: this._formatValue.bind(this),\n            time: this._formatTime.bind(this)\n        });\n        this.setAttributes({\n            \"data-chapters\": this._hasChapters.bind(this)\n        });\n        this.setStyles({\n            \"--slider-progress\": this._calcBufferedPercent.bind(this)\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCurrentTime.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchSeekingThrottle.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-time-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Seek\");\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPreviewing.bind(this));\n        watchActiveTextTrack(this._media.textTracks, \"chapters\", this._chapter.set);\n    }\n    _calcBufferedPercent() {\n        const { bufferedEnd, duration } = this._media.$state;\n        return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1) * 100, 3) + \"%\";\n    }\n    _hasChapters() {\n        const { duration } = this._media.$state;\n        return this._chapter()?.cues.length && Number.isFinite(duration()) && duration() > 0;\n    }\n    _watchSeekingThrottle() {\n        this._dispatchSeeking = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this._seeking.bind(this), this.$props.seekingRequestThrottle());\n    }\n    _watchCurrentTime() {\n        if (this.$state.hidden()) return;\n        const { value, dragging } = this.$state, newValue = this._getValue();\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(dragging)) {\n            value.set(newValue);\n            this.dispatch(\"value-change\", {\n                detail: newValue\n            });\n        }\n    }\n    _watchPreviewing() {\n        const player = this._media.player.el, { _preview } = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderContext);\n        player && _preview() && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(player, \"data-preview\", this.$state.active());\n    }\n    _seeking(time, event1) {\n        this._media.remote.seeking(time, event1);\n    }\n    _seek(time, percent, event1) {\n        this._dispatchSeeking.cancel();\n        const { live } = this._media.$state;\n        if (live() && percent >= 99) {\n            this._media.remote.seekToLiveEdge(event1);\n            return;\n        }\n        this._media.remote.seek(time, event1);\n    }\n    _onDragStart(event1) {\n        const { pauseWhileDragging } = this.$props;\n        if (pauseWhileDragging()) {\n            const { paused } = this._media.$state;\n            this._playingBeforeDragStart = !paused();\n            this._media.remote.pause(event1);\n        }\n    }\n    _onDragValueChange(event1) {\n        this._dispatchSeeking(this._percentToTime(event1.detail), event1);\n    }\n    _onDragEnd(event1) {\n        const { seeking } = this._media.$state;\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(seeking)) this._seeking(this._percentToTime(event1.detail), event1);\n        const percent = event1.detail;\n        this._seek(this._percentToTime(percent), percent, event1);\n        const { pauseWhileDragging } = this.$props;\n        if (pauseWhileDragging() && this._playingBeforeDragStart) {\n            this._media.remote.play(event1);\n            this._playingBeforeDragStart = false;\n        }\n    }\n    _onValueChange(event1) {\n        const { dragging } = this.$state;\n        if (dragging() || !event1.trigger) return;\n        this._onDragEnd(event1);\n    }\n    // -------------------------------------------------------------------------------------------\n    // Props\n    // -------------------------------------------------------------------------------------------\n    _getValue() {\n        const { currentTime } = this._media.$state;\n        return this._timeToPercent(currentTime());\n    }\n    _getStep() {\n        const value = this.$props.step() / this._media.$state.duration() * 100;\n        return Number.isFinite(value) ? value : 1;\n    }\n    _getKeyStep() {\n        const value = this.$props.keyStep() / this._media.$state.duration() * 100;\n        return Number.isFinite(value) ? value : 1;\n    }\n    _roundValue(value) {\n        return round(value, 3);\n    }\n    _isDisabled() {\n        const { disabled } = this.$props, { canSeek } = this._media.$state;\n        return disabled() || !canSeek();\n    }\n    // -------------------------------------------------------------------------------------------\n    // ARIA\n    // -------------------------------------------------------------------------------------------\n    _getARIAValueNow() {\n        const { value } = this.$state;\n        return Math.round(value());\n    }\n    _getARIAValueText() {\n        const time = this._percentToTime(this.$state.value()), { duration } = this._media.$state;\n        return Number.isFinite(time) ? `${formatSpokenTime(time)} out of ${formatSpokenTime(duration())}` : \"live\";\n    }\n    // -------------------------------------------------------------------------------------------\n    // Format\n    // -------------------------------------------------------------------------------------------\n    _percentToTime(percent) {\n        const { duration } = this._media.$state;\n        return round(percent / 100 * duration(), 5);\n    }\n    _timeToPercent(time) {\n        const { liveEdge, duration } = this._media.$state, rate = Math.max(0, Math.min(1, liveEdge() ? 1 : Math.min(time, duration()) / duration()));\n        return Number.isNaN(rate) ? 0 : Number.isFinite(rate) ? rate * 100 : 100;\n    }\n    _formatValue(percent) {\n        const time = this._percentToTime(percent), { live, duration } = this._media.$state;\n        return Number.isFinite(time) ? (live() ? time - duration() : time).toFixed(0) : \"LIVE\";\n    }\n    _formatTime(percent, options) {\n        const time = this._percentToTime(percent), { live, duration } = this._media.$state, value = live() ? time - duration() : time;\n        return Number.isFinite(time) ? `${value < 0 ? \"-\" : \"\"}${formatTime(Math.abs(value), options)}` : \"LIVE\";\n    }\n}\nTimeSlider.props = {\n    ...SliderController.props,\n    step: 0.1,\n    keyStep: 5,\n    shiftKeyMultiplier: 2,\n    pauseWhileDragging: false,\n    noSwipeGesture: false,\n    seekingRequestThrottle: 100\n};\nTimeSlider.state = sliderState;\nvar __defProp$a = Object.defineProperty;\nvar __getOwnPropDesc$a = Object.getOwnPropertyDescriptor;\nvar __decorateClass$a = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$a(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$a(target, key, result);\n    return result;\n};\nclass SliderChapters extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._titleRef = null;\n        this._refs = [];\n        this._$track = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        this._$cues = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]);\n        this._activeIndex = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(-1);\n        this._activePointerIndex = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(-1);\n        this._bufferedIndex = 0;\n        this._updateBufferedPercent = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)((bufferedPercent)=>{\n            let percent, cues = this._$cues(), { clipStartTime } = this._media.$state, startTime = clipStartTime(), endTime = this._getEndTime(cues);\n            for(let i = this._bufferedIndex; i < this._refs.length; i++){\n                percent = this._calcPercent(cues[i], bufferedPercent, startTime, endTime);\n                this._refs[i]?.style.setProperty(\"--chapter-progress\", percent + \"%\");\n                if (percent < 100) {\n                    this._bufferedIndex = i;\n                    break;\n                }\n            }\n        });\n        this._bufferedPercent = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.computed)(this._calcMediaBufferedPercent.bind(this));\n        this._onCuesChange = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.functionDebounce)(()=>{\n            const track = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._$track);\n            if (!this.scope || !track || !track.cues.length) return;\n            this._$cues.set(this._fillGaps(track.cues));\n            this._activeIndex.set(0);\n            this._bufferedIndex = 0;\n        }, 150, true);\n    }\n    get cues() {\n        return this._$cues();\n    }\n    get activeCue() {\n        return this._$cues()[this._activeIndex()] || null;\n    }\n    get activePointerCue() {\n        return this._$cues()[this._activePointerIndex()] || null;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this._sliderState = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useState)(TimeSlider.state);\n    }\n    onAttach(el) {\n        watchActiveTextTrack(this._media.textTracks, \"chapters\", this._setTrack.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchSource.bind(this));\n    }\n    onConnect() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>this._reset.bind(this));\n    }\n    onDestroy() {\n        this._setTrack(null);\n    }\n    setRefs(refs) {\n        this._refs = refs;\n        this._updateScope?.dispose();\n        if (this._refs.length === 1) {\n            const el = this._refs[0];\n            el.style.width = \"100%\";\n            el.style.setProperty(\"--chapter-fill\", \"var(--slider-fill)\");\n            el.style.setProperty(\"--chapter-progress\", \"var(--slider-progress)\");\n        } else if (this._refs.length > 0) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>this._watch(), this._updateScope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createScope)());\n        }\n    }\n    _setTrack(track) {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._$track) === track) return;\n        this._reset();\n        this._$track.set(track);\n    }\n    _reset() {\n        this._refs = [];\n        this._$cues.set([]);\n        this._activeIndex.set(-1);\n        this._activePointerIndex.set(-1);\n        this._bufferedIndex = 0;\n        this._updateScope?.dispose();\n    }\n    _watch() {\n        if (!this._refs.length) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchUpdates.bind(this));\n    }\n    _watchUpdates() {\n        const { hidden } = this._sliderState;\n        if (hidden()) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchContainerWidths.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchFillPercent.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPointerPercent.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchBufferedPercent.bind(this));\n    }\n    _watchContainerWidths() {\n        const cues = this._$cues();\n        if (!cues.length) return;\n        let cue, { clipStartTime, clipEndTime } = this._media.$state, startTime = clipStartTime(), endTime = clipEndTime() || cues[cues.length - 1].endTime, duration = endTime - startTime, remainingWidth = 100;\n        for(let i = 0; i < cues.length; i++){\n            cue = cues[i];\n            if (this._refs[i]) {\n                const width = i === cues.length - 1 ? remainingWidth : round((cue.endTime - Math.max(startTime, cue.startTime)) / duration * 100, 3);\n                this._refs[i].style.width = width + \"%\";\n                remainingWidth -= width;\n            }\n        }\n    }\n    _watchFillPercent() {\n        let { liveEdge, clipStartTime, duration } = this._media.$state, { fillPercent, value } = this._sliderState, cues = this._$cues(), isLiveEdge = liveEdge(), prevActiveIndex = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._activeIndex), currentChapter = cues[prevActiveIndex];\n        let currentActiveIndex = isLiveEdge ? this._$cues.length - 1 : this._findActiveChapterIndex(currentChapter ? currentChapter.startTime / duration() * 100 <= (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(value) ? prevActiveIndex : 0 : 0, fillPercent());\n        if (isLiveEdge || !currentChapter) {\n            this._updateFillPercents(0, cues.length, 100);\n        } else if (currentActiveIndex > prevActiveIndex) {\n            this._updateFillPercents(prevActiveIndex, currentActiveIndex, 100);\n        } else if (currentActiveIndex < prevActiveIndex) {\n            this._updateFillPercents(currentActiveIndex + 1, prevActiveIndex + 1, 0);\n        }\n        const percent = isLiveEdge ? 100 : this._calcPercent(cues[currentActiveIndex], fillPercent(), clipStartTime(), this._getEndTime(cues));\n        this._updateFillPercent(this._refs[currentActiveIndex], percent);\n        this._activeIndex.set(currentActiveIndex);\n    }\n    _watchPointerPercent() {\n        let { pointing, pointerPercent } = this._sliderState;\n        if (!pointing()) {\n            this._activePointerIndex.set(-1);\n            return;\n        }\n        const activeIndex = this._findActiveChapterIndex(0, pointerPercent());\n        this._activePointerIndex.set(activeIndex);\n    }\n    _updateFillPercents(start, end, percent) {\n        for(let i = start; i < end; i++)this._updateFillPercent(this._refs[i], percent);\n    }\n    _updateFillPercent(ref, percent) {\n        if (!ref) return;\n        ref.style.setProperty(\"--chapter-fill\", percent + \"%\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(ref, \"data-active\", percent > 0 && percent < 100);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(ref, \"data-ended\", percent === 100);\n    }\n    _findActiveChapterIndex(startIndex, percent) {\n        let chapterPercent = 0, cues = this._$cues();\n        if (percent === 0) return 0;\n        else if (percent === 100) return cues.length - 1;\n        let { clipStartTime } = this._media.$state, startTime = clipStartTime(), endTime = this._getEndTime(cues);\n        for(let i = startIndex; i < cues.length; i++){\n            chapterPercent = this._calcPercent(cues[i], percent, startTime, endTime);\n            if (chapterPercent >= 0 && chapterPercent < 100) return i;\n        }\n        return 0;\n    }\n    _watchBufferedPercent() {\n        this._updateBufferedPercent(this._bufferedPercent());\n    }\n    _calcMediaBufferedPercent() {\n        const { bufferedEnd, duration } = this._media.$state;\n        return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1), 3) * 100;\n    }\n    _getEndTime(cues) {\n        const { clipEndTime } = this._media.$state, endTime = clipEndTime();\n        return endTime > 0 ? endTime : cues[cues.length - 1]?.endTime || 0;\n    }\n    _calcPercent(cue, percent, startTime, endTime) {\n        const cues = this._$cues();\n        if (cues.length === 0) return 0;\n        const duration = endTime - startTime, cueStartTime = Math.max(0, cue.startTime - startTime), cueEndTime = Math.min(endTime, cue.endTime) - startTime;\n        const startRatio = cueStartTime / duration, startPercent = startRatio * 100, endPercent = Math.min(1, startRatio + (cueEndTime - cueStartTime) / duration) * 100;\n        return Math.max(0, round(percent >= endPercent ? 100 : (percent - startPercent) / (endPercent - startPercent) * 100, 3));\n    }\n    _fillGaps(cues) {\n        let chapters = [], { clipStartTime, clipEndTime, duration } = this._media.$state, startTime = clipStartTime(), endTime = clipEndTime() || Infinity;\n        cues = cues.filter((cue)=>cue.startTime <= endTime && cue.endTime >= startTime);\n        const firstCue = cues[0];\n        if (firstCue && firstCue.startTime > startTime) {\n            chapters.push(new window.VTTCue(startTime, firstCue.startTime, \"\"));\n        }\n        for(let i = 0; i < cues.length - 1; i++){\n            const currentCue = cues[i], nextCue = cues[i + 1];\n            chapters.push(currentCue);\n            if (nextCue) {\n                const timeDiff = nextCue.startTime - currentCue.endTime;\n                if (timeDiff > 0) {\n                    chapters.push(new window.VTTCue(currentCue.endTime, currentCue.endTime + timeDiff, \"\"));\n                }\n            }\n        }\n        const lastCue = cues[cues.length - 1];\n        if (lastCue) {\n            chapters.push(lastCue);\n            const endTime2 = duration();\n            if (endTime2 >= 0 && endTime2 - lastCue.endTime > 1) {\n                chapters.push(new window.VTTCue(lastCue.endTime, duration(), \"\"));\n            }\n        }\n        return chapters;\n    }\n    _watchSource() {\n        const { source } = this._media.$state;\n        source();\n        this._onTrackChange();\n    }\n    _onTrackChange() {\n        if (!this.scope) return;\n        const { disabled } = this.$props;\n        if (disabled()) {\n            this._$cues.set([]);\n            this._activeIndex.set(0);\n            this._bufferedIndex = 0;\n            return;\n        }\n        const track = this._$track();\n        if (track) {\n            const onCuesChange = this._onCuesChange.bind(this);\n            onCuesChange();\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"add-cue\", onCuesChange));\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"remove-cue\", onCuesChange));\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchMediaDuration.bind(this));\n        }\n        this._titleRef = this._findChapterTitleRef();\n        if (this._titleRef) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onChapterTitleChange.bind(this));\n        return ()=>{\n            if (this._titleRef) {\n                this._titleRef.textContent = \"\";\n                this._titleRef = null;\n            }\n        };\n    }\n    _watchMediaDuration() {\n        this._media.$state.duration();\n        this._onCuesChange();\n    }\n    _onChapterTitleChange() {\n        const cue = this.activePointerCue || this.activeCue;\n        if (this._titleRef) this._titleRef.textContent = cue?.text || \"\";\n    }\n    _findParentSlider() {\n        let node = this.el;\n        while(node && node.getAttribute(\"role\") !== \"slider\"){\n            node = node.parentElement;\n        }\n        return node;\n    }\n    _findChapterTitleRef() {\n        const slider = this._findParentSlider();\n        return slider ? slider.querySelector('[data-part=\"chapter-title\"]') : null;\n    }\n}\nSliderChapters.props = {\n    disabled: false\n};\n__decorateClass$a([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], SliderChapters.prototype, \"cues\");\n__decorateClass$a([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], SliderChapters.prototype, \"activeCue\");\n__decorateClass$a([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], SliderChapters.prototype, \"activePointerCue\");\n__decorateClass$a([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], SliderChapters.prototype, \"setRefs\");\nconst menuContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nfunction scrollIntoView(el, options) {\n    const scrolls = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.r)(el, options);\n    for (const { el: el2, top, left } of scrolls){\n        el2.scroll({\n            top,\n            left,\n            behavior: options.behavior\n        });\n    }\n}\nfunction scrollIntoCenter(el, options = {}) {\n    scrollIntoView(el, {\n        scrollMode: \"if-needed\",\n        block: \"center\",\n        inline: \"center\",\n        ...options\n    });\n}\nconst FOCUSABLE_ELEMENTS_SELECTOR = /* @__PURE__ */ [\n    \"a[href]\",\n    \"[tabindex]\",\n    \"input\",\n    \"select\",\n    \"button\"\n].map((selector)=>`${selector}:not([aria-hidden='true'])`).join(\",\");\nconst VALID_KEYS = /* @__PURE__ */ new Set([\n    \"Escape\",\n    \"Tab\",\n    \"ArrowUp\",\n    \"ArrowDown\",\n    \"Home\",\n    \"PageUp\",\n    \"End\",\n    \"PageDown\",\n    \"Enter\",\n    \" \"\n]);\nclass MenuFocusController {\n    constructor(_delegate){\n        this._delegate = _delegate;\n        this._index = -1;\n        this._el = null;\n        this._elements = [];\n    }\n    get _items() {\n        return this._elements;\n    }\n    _attachMenu(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"focus\", this._onFocus.bind(this));\n        this._el = el;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this._el = null;\n        });\n    }\n    _listen() {\n        if (!this._el) return;\n        this._update();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._el, \"keyup\", this._onKeyUp.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._el, \"keydown\", this._onKeyDown.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this._index = -1;\n            this._elements = [];\n        });\n    }\n    _update() {\n        this._index = 0;\n        this._elements = this._getFocusableElements();\n    }\n    _scroll(index = this._findActiveIndex()) {\n        const element = this._elements[index];\n        if (element) {\n            requestAnimationFrame(()=>{\n                requestAnimationFrame(()=>{\n                    scrollIntoCenter(element, {\n                        behavior: \"smooth\",\n                        boundary: (el)=>{\n                            return !el.hasAttribute(\"data-root\");\n                        }\n                    });\n                });\n            });\n        }\n    }\n    _focusActive(scroll = true) {\n        const index = this._findActiveIndex();\n        this._focusAt(index >= 0 ? index : 0, scroll);\n    }\n    _focusAt(index, scroll = true) {\n        this._index = index;\n        if (this._elements[index]) {\n            this._elements[index].focus({\n                preventScroll: true\n            });\n            if (scroll) this._scroll(index);\n        } else {\n            this._el?.focus({\n                preventScroll: true\n            });\n        }\n    }\n    _findActiveIndex() {\n        return this._elements.findIndex((el)=>document.activeElement === el || el.getAttribute(\"role\") === \"menuitemradio\" && el.getAttribute(\"aria-checked\") === \"true\");\n    }\n    _onFocus() {\n        if (this._index >= 0) return;\n        this._update();\n        this._focusActive();\n    }\n    _validateKeyEvent(event1) {\n        const el = event1.target;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.wasEnterKeyPressed)(event1) && el instanceof Element) {\n            const role = el.getAttribute(\"role\");\n            return !/a|input|select|button/.test(el.localName) && !role;\n        }\n        return VALID_KEYS.has(event1.key);\n    }\n    _onKeyUp(event1) {\n        if (!this._validateKeyEvent(event1)) return;\n        event1.stopPropagation();\n        event1.preventDefault();\n    }\n    _onKeyDown(event1) {\n        if (!this._validateKeyEvent(event1)) return;\n        event1.stopPropagation();\n        event1.preventDefault();\n        switch(event1.key){\n            case \"Escape\":\n                this._delegate._closeMenu(event1);\n                break;\n            case \"Tab\":\n                this._focusAt(this._nextIndex(event1.shiftKey ? -1 : 1));\n                break;\n            case \"ArrowUp\":\n                this._focusAt(this._nextIndex(-1));\n                break;\n            case \"ArrowDown\":\n                this._focusAt(this._nextIndex(1));\n                break;\n            case \"Home\":\n            case \"PageUp\":\n                this._focusAt(0);\n                break;\n            case \"End\":\n            case \"PageDown\":\n                this._focusAt(this._elements.length - 1);\n                break;\n        }\n    }\n    _nextIndex(delta) {\n        let index = this._index;\n        do {\n            index = (index + delta + this._elements.length) % this._elements.length;\n        }while (this._elements[index]?.offsetParent === null);\n        return index;\n    }\n    _getFocusableElements() {\n        if (!this._el) return [];\n        const focusableElements = this._el.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR), elements = [];\n        const is = (node)=>{\n            return node.getAttribute(\"role\") === \"menu\";\n        };\n        for (const el of focusableElements){\n            if (isHTMLElement(el) && el.offsetParent !== null && // does not have display: none\n            isElementParent(this._el, el, is)) {\n                elements.push(el);\n            }\n        }\n        return elements;\n    }\n}\nvar __defProp$9 = Object.defineProperty;\nvar __getOwnPropDesc$9 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$9 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$9(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$9(target, key, result);\n    return result;\n};\nlet idCount = 0;\nclass Menu extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this._expanded = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        this._disabled = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        this._trigger = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        this._content = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        this._submenus = /* @__PURE__ */ new Set();\n        this._menuObserver = null;\n        this._isSliderActive = false;\n        this._isTriggerDisabled = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        this._transitionCallbacks = /* @__PURE__ */ new Set();\n        this._wasKeyboardExpand = false;\n        this._removeSubmenuBind = this._removeSubmenu.bind(this);\n        this._isSubmenuOpen = false;\n        this._onSubmenuOpenBind = this._onSubmenuOpen.bind(this);\n        this._onSubmenuCloseBind = this._onSubmenuClose.bind(this);\n        this._onResize = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(()=>{\n            const content = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._content);\n            if (!content || IS_SERVER) return;\n            let height = 0, styles = getComputedStyle(content), children = [\n                ...content.children\n            ];\n            for (const prop2 of [\n                \"paddingTop\",\n                \"paddingBottom\",\n                \"borderTopWidth\",\n                \"borderBottomWidth\"\n            ]){\n                height += parseFloat(styles[prop2]) || 0;\n            }\n            for (const child of children){\n                if (isHTMLElement(child) && child.style.display === \"contents\") {\n                    children.push(...child.children);\n                } else if (child.nodeType === 3) {\n                    height += parseFloat(getComputedStyle(child).fontSize);\n                } else if (isHTMLElement(child)) {\n                    if (!isElementVisible(child)) continue;\n                    const style = getComputedStyle(child);\n                    height += child.offsetHeight + (parseFloat(style.marginTop) || 0) + (parseFloat(style.marginBottom) || 0);\n                }\n            }\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(content, \"--menu-height\", height + \"px\");\n        });\n        this._isTransitionActive = false;\n        const { showDelay } = this.$props;\n        this._popper = new Popper({\n            _trigger: this._trigger,\n            _content: this._content,\n            _showDelay: showDelay,\n            _listen: (trigger, show, hide)=>{\n                onPress(trigger, (event1)=>{\n                    if (this._expanded()) hide(event1);\n                    else show(event1);\n                });\n                const closeTarget = this._getCloseTarget();\n                if (closeTarget) {\n                    onPress(closeTarget, (event1)=>{\n                        event1.stopPropagation();\n                        hide(event1);\n                    });\n                }\n            },\n            _onChange: this._onExpandedChange.bind(this)\n        });\n    }\n    get triggerElement() {\n        return this._trigger();\n    }\n    get contentElement() {\n        return this._content();\n    }\n    get isSubmenu() {\n        return !!this._parentMenu;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const currentIdCount = ++idCount;\n        this._menuId = `media-menu-${currentIdCount}`;\n        this._menuButtonId = `media-menu-button-${currentIdCount}`;\n        this._focus = new MenuFocusController({\n            _closeMenu: this.close.bind(this)\n        });\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext)) {\n            this._parentMenu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        }\n        this._observeSliders();\n        this.setAttributes({\n            \"data-open\": this._expanded,\n            \"data-root\": !this.isSubmenu,\n            \"data-submenu\": this.isSubmenu,\n            \"data-disabled\": this._isDisabled.bind(this)\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(menuContext, {\n            _button: this._trigger,\n            _content: this._content,\n            _expanded: this._expanded,\n            _hint: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(\"\"),\n            _submenu: !!this._parentMenu,\n            _disable: this._disable.bind(this),\n            _attachMenuButton: this._attachMenuButton.bind(this),\n            _attachMenuItems: this._attachMenuItems.bind(this),\n            _attachObserver: this._attachObserver.bind(this),\n            _disableMenuButton: this._disableMenuButton.bind(this),\n            _addSubmenu: this._addSubmenu.bind(this),\n            _onTransitionEvent: (callback)=>{\n                this._transitionCallbacks.add(callback);\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n                    this._transitionCallbacks.delete(callback);\n                });\n            }\n        });\n    }\n    onAttach(el) {\n        el.style.setProperty(\"display\", \"contents\");\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchExpanded.bind(this));\n        if (this.isSubmenu) {\n            this._parentMenu?._addSubmenu(this);\n        }\n    }\n    onDestroy() {\n        this._trigger.set(null);\n        this._content.set(null);\n        this._menuObserver = null;\n        this._transitionCallbacks.clear();\n    }\n    _observeSliders() {\n        let sliderActiveTimer = -1, parentSliderObserver = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(sliderObserverContext) ? (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderObserverContext) : null;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderObserverContext, {\n            onDragStart: ()=>{\n                parentSliderObserver?.onDragStart?.();\n                window.clearTimeout(sliderActiveTimer);\n                sliderActiveTimer = -1;\n                this._isSliderActive = true;\n            },\n            onDragEnd: ()=>{\n                parentSliderObserver?.onDragEnd?.();\n                sliderActiveTimer = window.setTimeout(()=>{\n                    this._isSliderActive = false;\n                    sliderActiveTimer = -1;\n                }, 300);\n            }\n        });\n    }\n    _watchExpanded() {\n        const expanded = this._isExpanded();\n        if (!this.isSubmenu) this._onResize();\n        this._updateMenuItemsHidden(expanded);\n        if (!expanded) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const { height } = this._media.$state, content = this._content();\n            content && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(content, \"--player-height\", height() + \"px\");\n        });\n        this._focus._listen();\n        this.listen(\"pointerup\", this._onPointerUp.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(window, \"pointerup\", this._onWindowPointerUp.bind(this));\n    }\n    _attachMenuButton(button) {\n        const el = button.el, isMenuItem = this.isSubmenu, isARIADisabled = $ariaBool(this._isDisabled.bind(this));\n        setAttributeIfEmpty(el, \"tabindex\", isMenuItem ? \"-1\" : \"0\");\n        setAttributeIfEmpty(el, \"role\", isMenuItem ? \"menuitem\" : \"button\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"id\", this._menuButtonId);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"aria-haspopup\", \"menu\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"aria-expanded\", \"false\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-root\", !this.isSubmenu);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-submenu\", this.isSubmenu);\n        const watchAttrs = ()=>{\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-open\", this._expanded());\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"aria-disabled\", isARIADisabled());\n        };\n        if (IS_SERVER) watchAttrs();\n        else (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(watchAttrs);\n        this._trigger.set(el);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this._trigger.set(null);\n        });\n    }\n    _attachMenuItems(items) {\n        const el = items.el;\n        el.style.setProperty(\"display\", \"none\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"id\", this._menuId);\n        setAttributeIfEmpty(el, \"role\", \"menu\");\n        setAttributeIfEmpty(el, \"tabindex\", \"-1\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-root\", !this.isSubmenu);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-submenu\", this.isSubmenu);\n        this._content.set(el);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>this._content.set(null));\n        const watchAttrs = ()=>(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-open\", this._expanded());\n        if (IS_SERVER) watchAttrs();\n        else (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(watchAttrs);\n        this._focus._attachMenu(el);\n        this._updateMenuItemsHidden(false);\n        const onTransition = this._onResizeTransition.bind(this);\n        if (!this.isSubmenu) {\n            items.listen(\"transitionstart\", onTransition);\n            items.listen(\"transitionend\", onTransition);\n            items.listen(\"animationend\", this._onResize);\n            items.listen(\"vds-menu-resize\", this._onResize);\n        } else {\n            this._parentMenu?._onTransitionEvent(onTransition);\n        }\n    }\n    _attachObserver(observer) {\n        this._menuObserver = observer;\n    }\n    _updateMenuItemsHidden(expanded) {\n        const content = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._content);\n        if (content) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(content, \"aria-hidden\", (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ariaBool)(!expanded));\n    }\n    _disableMenuButton(disabled) {\n        this._isTriggerDisabled.set(disabled);\n    }\n    _onExpandedChange(isExpanded, event1) {\n        this._wasKeyboardExpand = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardEvent)(event1);\n        event1?.stopPropagation();\n        if (this._expanded() === isExpanded) return;\n        if (this._isDisabled()) {\n            if (isExpanded) this._popper.hide(event1);\n            return;\n        }\n        this.el?.dispatchEvent(new Event(\"vds-menu-resize\", {\n            bubbles: true,\n            composed: true\n        }));\n        const trigger = this._trigger(), content = this._content();\n        if (trigger) {\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(trigger, \"aria-controls\", isExpanded && this._menuId);\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(trigger, \"aria-expanded\", (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ariaBool)(isExpanded));\n        }\n        if (content) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(content, \"aria-labelledby\", isExpanded && this._menuButtonId);\n        this._expanded.set(isExpanded);\n        this._toggleMediaControls(event1);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n        if (this._wasKeyboardExpand) {\n            if (isExpanded) content?.focus();\n            else trigger?.focus();\n            for (const el of [\n                this.el,\n                content\n            ]){\n                el && el.setAttribute(\"data-keyboard\", \"\");\n            }\n        } else {\n            for (const el of [\n                this.el,\n                content\n            ]){\n                el && el.removeAttribute(\"data-keyboard\");\n            }\n        }\n        this.dispatch(isExpanded ? \"open\" : \"close\", {\n            trigger: event1\n        });\n        if (isExpanded) {\n            if (!this.isSubmenu && this._media.activeMenu !== this) {\n                this._media.activeMenu?.close(event1);\n                this._media.activeMenu = this;\n            }\n            this._menuObserver?._onOpen?.(event1);\n        } else {\n            if (this.isSubmenu) {\n                for (const el of this._submenus)el.close(event1);\n            } else {\n                this._media.activeMenu = null;\n            }\n            this._menuObserver?._onClose?.(event1);\n        }\n        if (isExpanded) {\n            requestAnimationFrame(this._updateFocus.bind(this));\n        }\n    }\n    _updateFocus() {\n        if (this._isTransitionActive || this._isSubmenuOpen) return;\n        this._focus._update();\n        requestAnimationFrame(()=>{\n            if (this._wasKeyboardExpand) {\n                this._focus._focusActive();\n            } else {\n                this._focus._scroll();\n            }\n        });\n    }\n    _isExpanded() {\n        return !this._isDisabled() && this._expanded();\n    }\n    _isDisabled() {\n        return this._disabled() || this._isTriggerDisabled();\n    }\n    _disable(disabled) {\n        this._disabled.set(disabled);\n    }\n    _onPointerUp(event1) {\n        const content = this._content();\n        if (this._isSliderActive || content && isEventInside(content, event1)) {\n            return;\n        }\n        event1.stopPropagation();\n    }\n    _onWindowPointerUp(event1) {\n        const content = this._content();\n        if (this._isSliderActive || content && isEventInside(content, event1)) {\n            return;\n        }\n        this.close(event1);\n    }\n    _getCloseTarget() {\n        const target = this.el?.querySelector('[data-part=\"close-target\"]');\n        return this.el && target && isElementParent(this.el, target, (node)=>node.getAttribute(\"role\") === \"menu\") ? target : null;\n    }\n    _toggleMediaControls(trigger) {\n        if (this.isSubmenu) return;\n        if (this._expanded()) this._media.remote.pauseControls(trigger);\n        else this._media.remote.resumeControls(trigger);\n    }\n    _addSubmenu(menu) {\n        this._submenus.add(menu);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(menu, \"open\", this._onSubmenuOpenBind);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(menu, \"close\", this._onSubmenuCloseBind);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._removeSubmenuBind);\n    }\n    _removeSubmenu(menu) {\n        this._submenus.delete(menu);\n    }\n    _onSubmenuOpen(event1) {\n        this._isSubmenuOpen = true;\n        const content = this._content();\n        if (this.isSubmenu) {\n            this.triggerElement?.setAttribute(\"aria-hidden\", \"true\");\n        }\n        for (const target of this._submenus){\n            if (target !== event1.target) {\n                for (const el of [\n                    target.el,\n                    target.triggerElement\n                ]){\n                    el?.setAttribute(\"aria-hidden\", \"true\");\n                }\n            }\n        }\n        if (content) {\n            const el = event1.target.el;\n            for (const child of content.children){\n                if (child.contains(el)) {\n                    child.setAttribute(\"data-open\", \"\");\n                } else if (child !== el) {\n                    child.setAttribute(\"data-hidden\", \"\");\n                }\n            }\n        }\n    }\n    _onSubmenuClose(event1) {\n        this._isSubmenuOpen = false;\n        const content = this._content();\n        if (this.isSubmenu) {\n            this.triggerElement?.setAttribute(\"aria-hidden\", \"false\");\n        }\n        for (const target of this._submenus){\n            for (const el of [\n                target.el,\n                target.triggerElement\n            ]){\n                el?.setAttribute(\"aria-hidden\", \"false\");\n            }\n        }\n        if (content) {\n            for (const child of content.children){\n                child.removeAttribute(\"data-open\");\n                child.removeAttribute(\"data-hidden\");\n            }\n        }\n    }\n    _onResizeTransition(event1) {\n        const content = this._content();\n        if (content && event1.propertyName === \"height\") {\n            this._isTransitionActive = event1.type === \"transitionstart\";\n            (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(content, \"data-transition\", this._isTransitionActive ? \"height\" : null);\n            if (this._expanded()) this._updateFocus();\n        }\n        for (const callback of this._transitionCallbacks)callback(event1);\n    }\n    open(trigger) {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._expanded)) return;\n        this._popper.show(trigger);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n    }\n    close(trigger) {\n        if (!(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._expanded)) return;\n        this._popper.hide(trigger);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n    }\n}\nMenu.props = {\n    showDelay: 0\n};\n__decorateClass$9([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], Menu.prototype, \"triggerElement\");\n__decorateClass$9([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], Menu.prototype, \"contentElement\");\n__decorateClass$9([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], Menu.prototype, \"isSubmenu\");\n__decorateClass$9([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], Menu.prototype, \"open\");\n__decorateClass$9([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], Menu.prototype, \"close\");\nvar __defProp$8 = Object.defineProperty;\nvar __getOwnPropDesc$8 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$8 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$8(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$8(target, key, result);\n    return result;\n};\nclass MenuButton extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this._hintEl = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        new FocusVisibleController();\n    }\n    get expanded() {\n        return this._menu?._expanded() ?? false;\n    }\n    onSetup() {\n        this._menu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n    }\n    onAttach(el) {\n        this._menu._attachMenuButton(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchDisabled.bind(this));\n        setAttributeIfEmpty(el, \"type\", \"button\");\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHintEl.bind(this));\n        this._onMutation();\n        const mutations = new MutationObserver(this._onMutation.bind(this));\n        mutations.observe(el, {\n            attributeFilter: [\n                \"data-part\"\n            ],\n            childList: true,\n            subtree: true\n        });\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>mutations.disconnect());\n        onPress(el, (trigger)=>{\n            this.dispatch(\"select\", {\n                trigger\n            });\n        });\n    }\n    _watchDisabled() {\n        this._menu._disableMenuButton(this.$props.disabled());\n    }\n    _watchHintEl() {\n        const el = this._hintEl();\n        if (!el) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const text = this._menu._hint();\n            if (text) el.textContent = text;\n        });\n    }\n    _onMutation() {\n        const hintEl = this.el?.querySelector('[data-part=\"hint\"]');\n        this._hintEl.set(hintEl ?? null);\n    }\n}\nMenuButton.props = {\n    disabled: false\n};\n__decorateClass$8([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], MenuButton.prototype, \"expanded\");\nclass MenuItem extends MenuButton {\n}\nclass MenuPortal extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._target = null;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(menuPortalContext, {\n            _attach: this._attachElement.bind(this)\n        });\n    }\n    onAttach(el) {\n        el.style.setProperty(\"display\", \"contents\");\n    }\n    // Need this so connect scope is defined.\n    onConnect(el) {}\n    onDestroy() {\n        this._target?.remove();\n        this._target = null;\n    }\n    _attachElement(el) {\n        this._portal(false);\n        this._target = el;\n        requestScopedAnimationFrame(()=>{\n            requestScopedAnimationFrame(()=>{\n                if (!this.connectScope) return;\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchDisabled.bind(this));\n            });\n        });\n    }\n    _watchDisabled() {\n        const { fullscreen } = this._media.$state, { disabled } = this.$props, _disabled = disabled();\n        this._portal(_disabled === \"fullscreen\" ? !fullscreen() : !_disabled);\n    }\n    _portal(shouldPortal) {\n        if (!this._target) return;\n        let container = this._getContainer(this.$props.container());\n        if (!container) return;\n        const isPortalled = this._target.parentElement === container;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this._target, \"data-portal\", shouldPortal);\n        if (shouldPortal) {\n            if (!isPortalled) {\n                this._target.remove();\n                container.append(this._target);\n            }\n        } else if (isPortalled && this._target.parentElement === container) {\n            this._target.remove();\n            this.el?.append(this._target);\n        }\n    }\n    _getContainer(selector) {\n        if (isHTMLElement(selector)) return selector;\n        return selector ? document.querySelector(selector) : document.body;\n    }\n}\nMenuPortal.props = {\n    container: null,\n    disabled: false\n};\nconst menuPortalContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nclass MenuItems extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new FocusVisibleController();\n        const { placement } = this.$props;\n        this.setAttributes({\n            \"data-placement\": placement\n        });\n    }\n    onAttach(el) {\n        this._menu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        this._menu._attachMenuItems(this);\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuPortalContext)) {\n            const portal = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuPortalContext);\n            if (portal) {\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(menuPortalContext, null);\n                portal._attach(el);\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>portal._attach(null));\n            }\n        }\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchPlacement.bind(this));\n    }\n    _watchPlacement() {\n        if (!this.el) return;\n        const placement = this.$props.placement();\n        if (placement) {\n            Object.assign(this.el.style, {\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                width: \"max-content\"\n            });\n            const { offset: mainOffset, alignOffset } = this.$props;\n            return autoPlacement(this.el, this._getButton(), placement, {\n                offsetVarName: \"media-menu\",\n                xOffset: alignOffset(),\n                yOffset: mainOffset()\n            });\n        } else {\n            this.el.removeAttribute(\"style\");\n            this.el.style.display = \"none\";\n        }\n    }\n    _getButton() {\n        return this._menu._button();\n    }\n}\nMenuItems.props = {\n    placement: null,\n    offset: 0,\n    alignOffset: 0\n};\nconst radioControllerContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nclass RadioGroupController extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    constructor(){\n        super(...arguments);\n        this._group = /* @__PURE__ */ new Set();\n        this._value = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(\"\");\n        this._controller = null;\n        this._onChangeBind = this._onChange.bind(this);\n    }\n    get _values() {\n        return Array.from(this._group).map((radio)=>radio._value());\n    }\n    get value() {\n        return this._value();\n    }\n    set value(value) {\n        this._onChange(value);\n    }\n    onSetup() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(radioControllerContext, {\n            add: this._addRadio.bind(this),\n            remove: this._removeRadio.bind(this)\n        });\n    }\n    onAttach(el) {\n        const isMenuItem = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext);\n        if (!isMenuItem) setAttributeIfEmpty(el, \"role\", \"radiogroup\");\n        this.setAttributes({\n            value: this._value\n        });\n    }\n    onDestroy() {\n        this._group.clear();\n    }\n    _addRadio(radio) {\n        if (this._group.has(radio)) return;\n        this._group.add(radio);\n        radio._onCheck = this._onChangeBind;\n        radio._check(radio._value() === this._value());\n    }\n    _removeRadio(radio) {\n        radio._onCheck = null;\n        this._group.delete(radio);\n    }\n    _onChange(newValue, trigger) {\n        const currentValue = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._value);\n        if (!newValue || newValue === currentValue) return;\n        const currentRadio = this._findRadio(currentValue), newRadio = this._findRadio(newValue);\n        currentRadio?._check(false, trigger);\n        newRadio?._check(true, trigger);\n        this._value.set(newValue);\n        this._onValueChange?.(newValue, trigger);\n    }\n    _findRadio(newValue) {\n        for (const radio of this._group){\n            if (newValue === (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(radio._value)) return radio;\n        }\n        return null;\n    }\n}\nvar __defProp$7 = Object.defineProperty;\nvar __getOwnPropDesc$7 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$7 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$7(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$7(target, key, result);\n    return result;\n};\nclass RadioGroup extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    get values() {\n        return this._controller._values;\n    }\n    get value() {\n        return this._controller.value;\n    }\n    set value(newValue) {\n        this._controller.value = newValue;\n    }\n    constructor(){\n        super();\n        this._controller = new RadioGroupController();\n        this._controller._onValueChange = this._onValueChange.bind(this);\n    }\n    onSetup() {\n        if (IS_SERVER) this._watchValue();\n        else (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n    }\n    _watchValue() {\n        this._controller.value = this.$props.value();\n    }\n    _onValueChange(value, trigger) {\n        const event1 = this.createEvent(\"change\", {\n            detail: value,\n            trigger\n        });\n        this.dispatch(event1);\n    }\n}\nRadioGroup.props = {\n    value: \"\"\n};\n__decorateClass$7([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], RadioGroup.prototype, \"values\");\n__decorateClass$7([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], RadioGroup.prototype, \"value\");\nvar __defProp$6 = Object.defineProperty;\nvar __getOwnPropDesc$6 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$6 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$6(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$6(target, key, result);\n    return result;\n};\nclass Radio extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this._checked = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        this._controller = {\n            _value: this.$props.value,\n            _check: this._check.bind(this),\n            _onCheck: null\n        };\n        new FocusVisibleController();\n    }\n    get checked() {\n        return this._checked();\n    }\n    onSetup() {\n        this.setAttributes({\n            value: this.$props.value,\n            \"data-checked\": this._checked,\n            \"aria-checked\": $ariaBool(this._checked)\n        });\n    }\n    onAttach(el) {\n        const isMenuItem = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext);\n        setAttributeIfEmpty(el, \"tabindex\", isMenuItem ? \"-1\" : \"0\");\n        setAttributeIfEmpty(el, \"role\", isMenuItem ? \"menuitemradio\" : \"radio\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n    }\n    onConnect(el) {\n        this._addToGroup();\n        onPress(el, this._onPress.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this._onDisconnect.bind(this));\n    }\n    _onDisconnect() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>{\n            const group = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(radioControllerContext);\n            group.remove(this._controller);\n        }, this.connectScope);\n    }\n    _addToGroup() {\n        const group = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(radioControllerContext);\n        group.add(this._controller);\n    }\n    _watchValue() {\n        const { value } = this.$props, newValue = value();\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._checked)) {\n            this._controller._onCheck?.(newValue);\n        }\n    }\n    _onPress(event1) {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._checked)) return;\n        this._onChange(true, event1);\n        this._onSelect(event1);\n        this._controller._onCheck?.((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$props.value), event1);\n    }\n    _check(value, trigger) {\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._checked) === value) return;\n        this._onChange(value, trigger);\n    }\n    _onChange(value, trigger) {\n        this._checked.set(value);\n        this.dispatch(\"change\", {\n            detail: value,\n            trigger\n        });\n    }\n    _onSelect(trigger) {\n        this.dispatch(\"select\", {\n            trigger\n        });\n    }\n}\nRadio.props = {\n    value: \"\"\n};\n__decorateClass$6([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], Radio.prototype, \"checked\");\nvar __defProp$5 = Object.defineProperty;\nvar __getOwnPropDesc$5 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$5 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$5(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$5(target, key, result);\n    return result;\n};\nclass ChaptersRadioGroup extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this._track = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        this._cues = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]);\n        this._controller = new RadioGroupController();\n        this._controller._onValueChange = this._onValueChange.bind(this);\n    }\n    get value() {\n        return this._controller.value;\n    }\n    get disabled() {\n        return !this._cues()?.length;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext)) {\n            this._menu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        }\n        const { thumbnails } = this.$props;\n        this.setAttributes({\n            \"data-thumbnails\": ()=>!!thumbnails()\n        });\n    }\n    onAttach(el) {\n        this._menu?._attachObserver({\n            _onOpen: this._onOpen.bind(this)\n        });\n    }\n    getOptions() {\n        const { clipStartTime, clipEndTime } = this._media.$state, startTime = clipStartTime(), endTime = clipEndTime() || Infinity;\n        return this._cues().map((cue, i)=>({\n                cue,\n                value: i.toString(),\n                label: cue.text,\n                startTime: formatTime(Math.max(0, cue.startTime - startTime)),\n                duration: formatSpokenTime(Math.min(endTime, cue.endTime) - Math.max(startTime, cue.startTime))\n            }));\n    }\n    _onOpen() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>this._watchCurrentTime());\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCurrentTime.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchControllerDisabled.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchTrack.bind(this));\n        watchActiveTextTrack(this._media.textTracks, \"chapters\", this._track.set);\n    }\n    _watchTrack() {\n        const track = this._track();\n        if (!track) return;\n        const onCuesChange = this._onCuesChange.bind(this, track);\n        onCuesChange();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"add-cue\", onCuesChange);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"remove-cue\", onCuesChange);\n        return ()=>{\n            this._cues.set([]);\n        };\n    }\n    _onCuesChange(track) {\n        const { clipStartTime, clipEndTime } = this._media.$state, startTime = clipStartTime(), endTime = clipEndTime() || Infinity;\n        this._cues.set([\n            ...track.cues\n        ].filter((cue)=>cue.startTime <= endTime && cue.endTime >= startTime));\n    }\n    _watchCurrentTime() {\n        if (!this._menu?._expanded()) return;\n        const track = this._track();\n        if (!track) {\n            this._controller.value = \"-1\";\n            return;\n        }\n        const { realCurrentTime, clipStartTime, clipEndTime } = this._media.$state, startTime = clipStartTime(), endTime = clipEndTime() || Infinity, time = realCurrentTime(), activeCueIndex = this._cues().findIndex((cue)=>isCueActive(cue, time));\n        this._controller.value = activeCueIndex.toString();\n        if (activeCueIndex >= 0) {\n            requestScopedAnimationFrame(()=>{\n                if (!this.connectScope) return;\n                const cue = this._cues()[activeCueIndex], radio = this.el.querySelector(`[aria-checked='true']`), cueStartTime = Math.max(startTime, cue.startTime), duration = Math.min(endTime, cue.endTime) - cueStartTime, playedPercent = Math.max(0, time - cueStartTime) / duration * 100;\n                radio && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(radio, \"--progress\", round(playedPercent, 3) + \"%\");\n            });\n        }\n    }\n    _watchControllerDisabled() {\n        this._menu?._disable(this.disabled);\n    }\n    _onValueChange(value, trigger) {\n        if (this.disabled || !trigger) return;\n        const index = +value, cues = this._cues(), { clipStartTime } = this._media.$state;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) && cues?.[index]) {\n            this._controller.value = index.toString();\n            this._media.remote.seek(cues[index].startTime - clipStartTime(), trigger);\n            this.dispatch(\"change\", {\n                detail: cues[index],\n                trigger\n            });\n        }\n    }\n}\nChaptersRadioGroup.props = {\n    thumbnails: null\n};\n__decorateClass$5([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], ChaptersRadioGroup.prototype, \"value\");\n__decorateClass$5([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], ChaptersRadioGroup.prototype, \"disabled\");\n__decorateClass$5([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], ChaptersRadioGroup.prototype, \"getOptions\");\nvar __defProp$4 = Object.defineProperty;\nvar __getOwnPropDesc$4 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$4 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$4(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$4(target, key, result);\n    return result;\n};\nclass AudioRadioGroup extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    get value() {\n        return this._controller.value;\n    }\n    get disabled() {\n        const { audioTracks } = this._media.$state;\n        return audioTracks().length <= 1;\n    }\n    constructor(){\n        super();\n        this._controller = new RadioGroupController();\n        this._controller._onValueChange = this._onValueChange.bind(this);\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext)) {\n            this._menu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        }\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchControllerDisabled.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHintText.bind(this));\n    }\n    getOptions() {\n        const { audioTracks } = this._media.$state;\n        return audioTracks().map((track)=>({\n                track,\n                label: track.label,\n                value: track.label.toLowerCase()\n            }));\n    }\n    _watchValue() {\n        this._controller.value = this._getValue();\n    }\n    _watchHintText() {\n        const { emptyLabel } = this.$props, { audioTrack } = this._media.$state, track = audioTrack();\n        this._menu?._hint.set(track?.label ?? emptyLabel());\n    }\n    _watchControllerDisabled() {\n        this._menu?._disable(this.disabled);\n    }\n    _getValue() {\n        const { audioTrack } = this._media.$state;\n        const track = audioTrack();\n        return track ? track.label.toLowerCase() : \"\";\n    }\n    _onValueChange(value, trigger) {\n        if (this.disabled) return;\n        const index = this._media.audioTracks.toArray().findIndex((track)=>track.label.toLowerCase() === value);\n        if (index >= 0) {\n            const track = this._media.audioTracks[index];\n            this._media.remote.changeAudioTrack(index, trigger);\n            this.dispatch(\"change\", {\n                detail: track,\n                trigger\n            });\n        }\n    }\n}\nAudioRadioGroup.props = {\n    emptyLabel: \"Default\"\n};\n__decorateClass$4([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], AudioRadioGroup.prototype, \"value\");\n__decorateClass$4([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], AudioRadioGroup.prototype, \"disabled\");\n__decorateClass$4([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], AudioRadioGroup.prototype, \"getOptions\");\nvar __defProp$3 = Object.defineProperty;\nvar __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$3 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$3(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$3(target, key, result);\n    return result;\n};\nconst DEFAULT_AUDIO_GAINS = [\n    1,\n    1.25,\n    1.5,\n    1.75,\n    2,\n    2.5,\n    3,\n    4\n];\nclass AudioGainRadioGroup extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    get value() {\n        return this._controller.value;\n    }\n    get disabled() {\n        const { gains } = this.$props, { canSetAudioGain } = this._media.$state;\n        return !canSetAudioGain() || gains().length === 0;\n    }\n    constructor(){\n        super();\n        this._controller = new RadioGroupController();\n        this._controller._onValueChange = this._onValueChange.bind(this);\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext)) {\n            this._menu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        }\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHintText.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchControllerDisabled.bind(this));\n    }\n    getOptions() {\n        const { gains, normalLabel } = this.$props;\n        return gains().map((gain)=>({\n                label: gain === 1 || gain === null ? normalLabel : String(gain * 100) + \"%\",\n                value: gain.toString()\n            }));\n    }\n    _watchValue() {\n        this._controller.value = this._getValue();\n    }\n    _watchHintText() {\n        const { normalLabel } = this.$props, { audioGain } = this._media.$state, gain = audioGain();\n        this._menu?._hint.set(gain === 1 || gain == null ? normalLabel() : String(gain * 100) + \"%\");\n    }\n    _watchControllerDisabled() {\n        this._menu?._disable(this.disabled);\n    }\n    _getValue() {\n        const { audioGain } = this._media.$state;\n        return audioGain()?.toString() ?? \"1\";\n    }\n    _onValueChange(value, trigger) {\n        if (this.disabled) return;\n        const gain = +value;\n        this._media.remote.changeAudioGain(gain, trigger);\n        this.dispatch(\"change\", {\n            detail: gain,\n            trigger\n        });\n    }\n}\nAudioGainRadioGroup.props = {\n    normalLabel: \"Disabled\",\n    gains: DEFAULT_AUDIO_GAINS\n};\n__decorateClass$3([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], AudioGainRadioGroup.prototype, \"value\");\n__decorateClass$3([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], AudioGainRadioGroup.prototype, \"disabled\");\n__decorateClass$3([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], AudioGainRadioGroup.prototype, \"getOptions\");\nvar __defProp$2 = Object.defineProperty;\nvar __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$2 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$2(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$2(target, key, result);\n    return result;\n};\nclass CaptionsRadioGroup extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    get value() {\n        return this._controller.value;\n    }\n    get disabled() {\n        const { hasCaptions } = this._media.$state;\n        return !hasCaptions();\n    }\n    constructor(){\n        super();\n        this._controller = new RadioGroupController();\n        this._controller._onValueChange = this._onValueChange.bind(this);\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext)) {\n            this._menu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        }\n    }\n    onConnect(el) {\n        super.onConnect?.(el);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchControllerDisabled.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHintText.bind(this));\n    }\n    getOptions() {\n        const { offLabel } = this.$props, { textTracks } = this._media.$state;\n        return [\n            {\n                value: \"off\",\n                label: offLabel\n            },\n            ...textTracks().filter(isTrackCaptionKind).map((track)=>({\n                    track,\n                    label: track.label,\n                    value: this._getTrackValue(track)\n                }))\n        ];\n    }\n    _watchValue() {\n        this._controller.value = this._getValue();\n    }\n    _watchHintText() {\n        const { offLabel } = this.$props, { textTrack } = this._media.$state, track = textTrack();\n        this._menu?._hint.set(track && isTrackCaptionKind(track) && track.mode === \"showing\" ? track.label : offLabel());\n    }\n    _watchControllerDisabled() {\n        this._menu?._disable(this.disabled);\n    }\n    _getValue() {\n        const { textTrack } = this._media.$state, track = textTrack();\n        return track && isTrackCaptionKind(track) && track.mode === \"showing\" ? this._getTrackValue(track) : \"off\";\n    }\n    _onValueChange(value, trigger) {\n        if (this.disabled) return;\n        if (value === \"off\") {\n            const track = this._media.textTracks.selected;\n            if (track) {\n                const index2 = this._media.textTracks.indexOf(track);\n                this._media.remote.changeTextTrackMode(index2, \"disabled\", trigger);\n                this.dispatch(\"change\", {\n                    detail: null,\n                    trigger\n                });\n            }\n            return;\n        }\n        const index = this._media.textTracks.toArray().findIndex((track)=>this._getTrackValue(track) === value);\n        if (index >= 0) {\n            const track = this._media.textTracks[index];\n            this._media.remote.changeTextTrackMode(index, \"showing\", trigger);\n            this.dispatch(\"change\", {\n                detail: track,\n                trigger\n            });\n        }\n    }\n    _getTrackValue(track) {\n        return track.id + \":\" + track.kind + \"-\" + track.label.toLowerCase();\n    }\n}\nCaptionsRadioGroup.props = {\n    offLabel: \"Off\"\n};\n__decorateClass$2([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], CaptionsRadioGroup.prototype, \"value\");\n__decorateClass$2([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], CaptionsRadioGroup.prototype, \"disabled\");\n__decorateClass$2([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], CaptionsRadioGroup.prototype, \"getOptions\");\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;\nvar __decorateClass$1 = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc$1(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp$1(target, key, result);\n    return result;\n};\nconst DEFAULT_PLAYBACK_RATES = [\n    0.25,\n    0.5,\n    0.75,\n    1,\n    1.25,\n    1.5,\n    1.75,\n    2\n];\nclass SpeedRadioGroup extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    get value() {\n        return this._controller.value;\n    }\n    get disabled() {\n        const { rates } = this.$props, { canSetPlaybackRate } = this._media.$state;\n        return !canSetPlaybackRate() || rates().length === 0;\n    }\n    constructor(){\n        super();\n        this._controller = new RadioGroupController();\n        this._controller._onValueChange = this._onValueChange.bind(this);\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext)) {\n            this._menu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        }\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHintText.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchControllerDisabled.bind(this));\n    }\n    getOptions() {\n        const { rates, normalLabel } = this.$props;\n        return rates().map((rate)=>({\n                label: rate === 1 ? normalLabel : rate + \"\\xd7\",\n                value: rate.toString()\n            }));\n    }\n    _watchValue() {\n        this._controller.value = this._getValue();\n    }\n    _watchHintText() {\n        const { normalLabel } = this.$props, { playbackRate } = this._media.$state, rate = playbackRate();\n        this._menu?._hint.set(rate === 1 ? normalLabel() : rate + \"\\xd7\");\n    }\n    _watchControllerDisabled() {\n        this._menu?._disable(this.disabled);\n    }\n    _getValue() {\n        const { playbackRate } = this._media.$state;\n        return playbackRate().toString();\n    }\n    _onValueChange(value, trigger) {\n        if (this.disabled) return;\n        const rate = +value;\n        this._media.remote.changePlaybackRate(rate, trigger);\n        this.dispatch(\"change\", {\n            detail: rate,\n            trigger\n        });\n    }\n}\nSpeedRadioGroup.props = {\n    normalLabel: \"Normal\",\n    rates: DEFAULT_PLAYBACK_RATES\n};\n__decorateClass$1([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], SpeedRadioGroup.prototype, \"value\");\n__decorateClass$1([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], SpeedRadioGroup.prototype, \"disabled\");\n__decorateClass$1([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], SpeedRadioGroup.prototype, \"getOptions\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp(target, key, result);\n    return result;\n};\nclass QualityRadioGroup extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        this._sortedQualities = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.computed)(()=>{\n            const { sort } = this.$props, { qualities } = this._media.$state;\n            return sortVideoQualities(qualities(), sort() === \"descending\");\n        });\n        this._controller = new RadioGroupController();\n        this._controller._onValueChange = this._onValueChange.bind(this);\n    }\n    get value() {\n        return this._controller.value;\n    }\n    get disabled() {\n        const { canSetQuality, qualities } = this._media.$state;\n        return !canSetQuality() || qualities().length <= 1;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext)) {\n            this._menu = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        }\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchValue.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchControllerDisabled.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHintText.bind(this));\n    }\n    getOptions() {\n        const { autoLabel, hideBitrate } = this.$props;\n        return [\n            {\n                value: \"auto\",\n                label: autoLabel\n            },\n            ...this._sortedQualities().map((quality)=>{\n                const bitrate = quality.bitrate && quality.bitrate >= 0 ? `${round(quality.bitrate / 1e6, 2)} Mbps` : null;\n                return {\n                    quality,\n                    label: quality.height + \"p\",\n                    value: this._getQualityId(quality),\n                    bitrate: ()=>!hideBitrate() ? bitrate : null\n                };\n            })\n        ];\n    }\n    _watchValue() {\n        this._controller.value = this._getValue();\n    }\n    _watchHintText() {\n        const { autoLabel } = this.$props, { autoQuality, quality } = this._media.$state, qualityText = quality() ? quality().height + \"p\" : \"\";\n        this._menu?._hint.set(!autoQuality() ? qualityText : autoLabel() + (qualityText ? ` (${qualityText})` : \"\"));\n    }\n    _watchControllerDisabled() {\n        this._menu?._disable(this.disabled);\n    }\n    _onValueChange(value, trigger) {\n        if (this.disabled) return;\n        if (value === \"auto\") {\n            this._media.remote.changeQuality(-1, trigger);\n            this.dispatch(\"change\", {\n                detail: \"auto\",\n                trigger\n            });\n            return;\n        }\n        const { qualities } = this._media.$state, index = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(qualities).findIndex((quality)=>this._getQualityId(quality) === value);\n        if (index >= 0) {\n            const quality = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(qualities)[index];\n            this._media.remote.changeQuality(index, trigger);\n            this.dispatch(\"change\", {\n                detail: quality,\n                trigger\n            });\n        }\n    }\n    _getValue() {\n        const { quality, autoQuality } = this._media.$state;\n        if (autoQuality()) return \"auto\";\n        const currentQuality = quality();\n        return currentQuality ? this._getQualityId(currentQuality) : \"auto\";\n    }\n    _getQualityId(quality) {\n        return quality.height + \"_\" + quality.bitrate;\n    }\n}\nQualityRadioGroup.props = {\n    autoLabel: \"Auto\",\n    hideBitrate: false,\n    sort: \"descending\"\n};\n__decorateClass([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], QualityRadioGroup.prototype, \"value\");\n__decorateClass([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], QualityRadioGroup.prototype, \"disabled\");\n__decorateClass([\n    _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.method\n], QualityRadioGroup.prototype, \"getOptions\");\nclass Gesture extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._provider = null;\n        this._presses = 0;\n        this._pressTimerId = -1;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        const { event: event1, action } = this.$props;\n        this.setAttributes({\n            event: event1,\n            action\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-gesture\", \"\");\n        el.style.setProperty(\"pointer-events\", \"none\");\n    }\n    onConnect(el) {\n        this._provider = this._media.player.el?.querySelector(\"[data-media-provider]\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._attachListener.bind(this));\n    }\n    _attachListener() {\n        let eventType = this.$props.event(), disabled = this.$props.disabled();\n        if (!this._provider || !eventType || disabled) return;\n        if (/^dbl/.test(eventType)) {\n            eventType = eventType.split(/^dbl/)[1];\n        }\n        if (eventType === \"pointerup\" || eventType === \"pointerdown\") {\n            const pointer = this._media.$state.pointer();\n            if (pointer === \"coarse\") {\n                eventType = eventType === \"pointerup\" ? \"touchend\" : \"touchstart\";\n            }\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._provider, eventType, this._acceptEvent.bind(this), {\n            passive: false\n        });\n    }\n    _acceptEvent(event1) {\n        if (this.$props.disabled() || (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isPointerEvent)(event1) && (event1.button !== 0 || this._media.activeMenu) || (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isTouchEvent)(event1) && this._media.activeMenu || isTouchPinchEvent(event1) || !this._inBounds(event1)) {\n            return;\n        }\n        event1.MEDIA_GESTURE = true;\n        event1.preventDefault();\n        const eventType = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$props.event), isDblEvent = eventType?.startsWith(\"dbl\");\n        if (!isDblEvent) {\n            if (this._presses === 0) {\n                setTimeout(()=>{\n                    if (this._presses === 1) this._handleEvent(event1);\n                }, 250);\n            }\n        } else if (this._presses === 1) {\n            queueMicrotask(()=>this._handleEvent(event1));\n            clearTimeout(this._pressTimerId);\n            this._presses = 0;\n            return;\n        }\n        if (this._presses === 0) {\n            this._pressTimerId = window.setTimeout(()=>{\n                this._presses = 0;\n            }, 275);\n        }\n        this._presses++;\n    }\n    _handleEvent(event1) {\n        this.el.setAttribute(\"data-triggered\", \"\");\n        requestAnimationFrame(()=>{\n            if (this._isTopLayer()) {\n                this._performAction((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$props.action), event1);\n            }\n            requestAnimationFrame(()=>{\n                this.el.removeAttribute(\"data-triggered\");\n            });\n        });\n    }\n    /** Validate event occurred in gesture bounds. */ _inBounds(event1) {\n        if (!this.el) return false;\n        if ((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isPointerEvent)(event1) || (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isMouseEvent)(event1) || (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isTouchEvent)(event1)) {\n            const touch = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isTouchEvent)(event1) ? event1.changedTouches[0] ?? event1.touches[0] : void 0;\n            const clientX = touch?.clientX ?? event1.clientX;\n            const clientY = touch?.clientY ?? event1.clientY;\n            const rect = this.el.getBoundingClientRect();\n            const inBounds = clientY >= rect.top && clientY <= rect.bottom && clientX >= rect.left && clientX <= rect.right;\n            return event1.type.includes(\"leave\") ? !inBounds : inBounds;\n        }\n        return true;\n    }\n    /** Validate gesture has the highest z-index in this triggered group. */ _isTopLayer() {\n        const gestures = this._media.player.el.querySelectorAll(\"[data-media-gesture][data-triggered]\");\n        return Array.from(gestures).sort((a, b)=>+getComputedStyle(b).zIndex - +getComputedStyle(a).zIndex)[0] === this.el;\n    }\n    _performAction(action, trigger) {\n        if (!action) return;\n        const willTriggerEvent = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"will-trigger\", {\n            detail: action,\n            cancelable: true,\n            trigger\n        });\n        this.dispatchEvent(willTriggerEvent);\n        if (willTriggerEvent.defaultPrevented) return;\n        const [method, value] = action.replace(/:([a-z])/, \"-$1\").split(\":\");\n        if (action.includes(\":fullscreen\")) {\n            this._media.remote.toggleFullscreen(\"prefer-media\", trigger);\n        } else if (action.includes(\"seek:\")) {\n            this._media.remote.seek((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._media.$state.currentTime) + (+value || 0), trigger);\n        } else {\n            this._media.remote[(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.kebabToCamelCase)(method)](trigger);\n        }\n        this.dispatch(\"trigger\", {\n            detail: action,\n            trigger\n        });\n    }\n}\nGesture.props = {\n    disabled: false,\n    event: void 0,\n    action: void 0\n};\nclass CaptionsTextRenderer {\n    constructor(_renderer){\n        this._renderer = _renderer;\n        this.priority = 10;\n        this._track = null;\n        this._disposal = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createDisposalBin)();\n    }\n    attach() {}\n    canRender() {\n        return true;\n    }\n    detach() {\n        this._disposal.empty();\n        this._renderer.reset();\n        this._track = null;\n    }\n    changeTrack(track) {\n        if (!track || this._track === track) return;\n        this._disposal.empty();\n        if (track.readyState < 2) {\n            this._renderer.reset();\n            this._disposal.add((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"load\", ()=>this._changeTrack(track), {\n                once: true\n            }));\n        } else {\n            this._changeTrack(track);\n        }\n        this._disposal.add((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"add-cue\", (event1)=>{\n            this._renderer.addCue(event1.detail);\n        }), (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"remove-cue\", (event1)=>{\n            this._renderer.removeCue(event1.detail);\n        }));\n        this._track = track;\n    }\n    _changeTrack(track) {\n        this._renderer.changeTrack({\n            cues: [\n                ...track.cues\n            ],\n            regions: [\n                ...track.regions\n            ]\n        });\n    }\n}\nconst _Captions = class _Captions extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._hideExampleTimer = -1;\n    }\n    get _lib() {\n        return _Captions._lib;\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this.setAttributes({\n            \"aria-hidden\": $ariaBool(this._isHidden.bind(this))\n        });\n    }\n    onAttach(el) {\n        el.style.setProperty(\"pointer-events\", \"none\");\n    }\n    onConnect(el) {\n        if (!this._lib()) {\n            __webpack_require__.e(/*! import() */ \"vendor-chunks/media-captions\").then(__webpack_require__.bind(__webpack_require__, /*! media-captions */ \"(ssr)/./node_modules/media-captions/dist/dev.js\")).then((lib)=>this._lib.set(lib));\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchViewType.bind(this));\n    }\n    _isHidden() {\n        const { textTrack, remotePlaybackState, iOSControls } = this._media.$state, track = textTrack();\n        return iOSControls() || remotePlaybackState() === \"connected\" || !track || !isTrackCaptionKind(track);\n    }\n    _watchViewType() {\n        if (!this._lib()) return;\n        const { viewType } = this._media.$state;\n        if (viewType() === \"audio\") {\n            return this._setupAudioView();\n        } else {\n            return this._setupVideoView();\n        }\n    }\n    _setupAudioView() {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onTrackChange.bind(this));\n        this._listenToFontStyleChanges(null);\n        return ()=>{\n            this.el.textContent = \"\";\n        };\n    }\n    _onTrackChange() {\n        if (this._isHidden()) return;\n        this._onCueChange();\n        const { textTrack } = this._media.$state;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(textTrack(), \"cue-change\", this._onCueChange.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onUpdateTimedNodes.bind(this));\n    }\n    _onCueChange() {\n        this.el.textContent = \"\";\n        if (this._hideExampleTimer >= 0) {\n            this._removeExample();\n        }\n        const { realCurrentTime, textTrack } = this._media.$state, { renderVTTCueString } = this._lib(), time = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(realCurrentTime), activeCues = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(textTrack).activeCues;\n        for (const cue of activeCues){\n            const displayEl = this._createCueDisplayElement(), cueEl = this._createCueElement();\n            cueEl.innerHTML = renderVTTCueString(cue, time);\n            displayEl.append(cueEl);\n            this.el.append(cueEl);\n        }\n    }\n    _onUpdateTimedNodes() {\n        const { realCurrentTime } = this._media.$state, { updateTimedVTTCueNodes } = this._lib();\n        updateTimedVTTCueNodes(this.el, realCurrentTime());\n    }\n    _setupVideoView() {\n        const { CaptionsRenderer } = this._lib(), renderer = new CaptionsRenderer(this.el), textRenderer = new CaptionsTextRenderer(renderer);\n        this._media.textRenderers.add(textRenderer);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchTextDirection.bind(this, renderer));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchMediaTime.bind(this, renderer));\n        this._listenToFontStyleChanges(renderer);\n        return ()=>{\n            this.el.textContent = \"\";\n            this._media.textRenderers.remove(textRenderer);\n            renderer.destroy();\n        };\n    }\n    _watchTextDirection(renderer) {\n        renderer.dir = this.$props.textDir();\n    }\n    _watchMediaTime(renderer) {\n        if (this._isHidden()) return;\n        const { realCurrentTime, textTrack } = this._media.$state;\n        renderer.currentTime = realCurrentTime();\n        if (this._hideExampleTimer >= 0 && textTrack()?.activeCues[0]) {\n            this._removeExample();\n        }\n    }\n    _listenToFontStyleChanges(renderer) {\n        const player = this._media.player;\n        if (!player) return;\n        const onChange = this._onFontStyleChange.bind(this, renderer);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(player, \"vds-font-change\", onChange);\n    }\n    _onFontStyleChange(renderer) {\n        if (this._hideExampleTimer >= 0) {\n            this._hideExample();\n            return;\n        }\n        const { textTrack } = this._media.$state;\n        if (!textTrack()?.activeCues[0]) {\n            this._showExample();\n        } else {\n            renderer?.update(true);\n        }\n    }\n    _showExample() {\n        const display = this._createCueDisplayElement();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(display, \"data-example\", \"\");\n        const cue = this._createCueElement();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(cue, \"data-example\", \"\");\n        cue.textContent = this.$props.exampleText();\n        display?.append(cue);\n        this.el?.append(display);\n        this.el?.setAttribute(\"data-example\", \"\");\n        this._hideExample();\n    }\n    _hideExample() {\n        window.clearTimeout(this._hideExampleTimer);\n        this._hideExampleTimer = window.setTimeout(this._removeExample.bind(this), 2500);\n    }\n    _removeExample() {\n        this.el?.removeAttribute(\"data-example\");\n        if (this.el?.querySelector(\"[data-example]\")) this.el.textContent = \"\";\n        this._hideExampleTimer = -1;\n    }\n    _createCueDisplayElement() {\n        const el = document.createElement(\"div\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-part\", \"cue-display\");\n        return el;\n    }\n    _createCueElement() {\n        const el = document.createElement(\"div\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-part\", \"cue\");\n        return el;\n    }\n};\n_Captions.props = {\n    textDir: \"ltr\",\n    exampleText: \"Captions look like this.\"\n};\n_Captions._lib = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\nlet Captions = _Captions;\nclass Poster extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._prevSrc = \"\";\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this._watchSrc();\n        this._watchAlt();\n        this._watchCrossOrigin();\n        this._watchHidden();\n    }\n    onAttach(el) {\n        el.style.setProperty(\"pointer-events\", \"none\");\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchImg.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchSrc.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchAlt.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchCrossOrigin.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHidden.bind(this));\n        const { started } = this._media.$state;\n        this.setAttributes({\n            \"data-visible\": ()=>!started() && !this.$state.hidden(),\n            \"data-loading\": this._isLoading.bind(this),\n            \"data-error\": this._hasError.bind(this),\n            \"data-hidden\": this.$state.hidden\n        });\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onPreconnect.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._onLoadStart.bind(this));\n    }\n    _hasError() {\n        const { error } = this.$state;\n        return !(0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(error());\n    }\n    _onPreconnect() {\n        const { canLoadPoster, poster } = this._media.$state;\n        if (!canLoadPoster() && poster()) preconnect(poster(), \"preconnect\");\n    }\n    _watchHidden() {\n        const { src } = this.$props, { poster, nativeControls } = this._media.$state;\n        this.el && (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"display\", nativeControls() ? \"none\" : null);\n        this.$state.hidden.set(this._hasError() || !(src() || poster()) || nativeControls());\n    }\n    _isLoading() {\n        const { loading, hidden } = this.$state;\n        return !hidden() && loading();\n    }\n    _watchImg() {\n        const img = this.$state.img();\n        if (!img) return;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(img, \"load\", this._onLoad.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(img, \"error\", this._onError.bind(this));\n    }\n    _watchSrc() {\n        const { poster: defaultPoster } = this._media.$props, { canLoadPoster, providedPoster, inferredPoster } = this._media.$state;\n        const src = this.$props.src() || \"\", poster = src || defaultPoster() || inferredPoster();\n        if (this._prevSrc === providedPoster()) {\n            providedPoster.set(src);\n        }\n        this.$state.src.set(canLoadPoster() && poster.length ? poster : null);\n        this._prevSrc = src;\n    }\n    _watchAlt() {\n        const { src } = this.$props, { alt } = this.$state, { poster } = this._media.$state;\n        alt.set(src() || poster() ? this.$props.alt() : null);\n    }\n    _watchCrossOrigin() {\n        const { crossOrigin: crossOriginProp } = this.$props, { crossOrigin: crossOriginState } = this.$state, { crossOrigin: mediaCrossOrigin, poster: src } = this._media.$state, crossOrigin = crossOriginProp() !== null ? crossOriginProp() : mediaCrossOrigin();\n        crossOriginState.set(/ytimg\\.com|vimeo/.test(src() || \"\") ? null : crossOrigin === true ? \"anonymous\" : crossOrigin);\n    }\n    _onLoadStart() {\n        const { loading, error } = this.$state, { canLoadPoster, poster } = this._media.$state;\n        loading.set(canLoadPoster() && !!poster());\n        error.set(null);\n    }\n    _onLoad() {\n        const { loading, error } = this.$state;\n        loading.set(false);\n        error.set(null);\n    }\n    _onError(event1) {\n        const { loading, error } = this.$state;\n        loading.set(false);\n        error.set(event1);\n    }\n}\nPoster.props = {\n    src: null,\n    alt: null,\n    crossOrigin: null\n};\nPoster.state = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    img: null,\n    src: null,\n    alt: null,\n    crossOrigin: null,\n    loading: true,\n    error: null,\n    hidden: false\n});\nclass Time extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super(...arguments);\n        this._invert = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        this._isVisible = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true);\n        this._isIntersecting = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true);\n    }\n    onSetup() {\n        this._media = useMediaContext();\n        this._watchTime();\n        const { type } = this.$props;\n        this.setAttributes({\n            \"data-type\": type,\n            \"data-remainder\": this._shouldInvert.bind(this)\n        });\n        new IntersectionObserverController({\n            callback: this._onIntersectionChange.bind(this)\n        }).attach(this);\n    }\n    onAttach(el) {\n        if (!el.hasAttribute(\"role\")) (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchRole.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchTime.bind(this));\n    }\n    onConnect(el) {\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(observeVisibility(el, this._isVisible.set));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchHidden.bind(this));\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._watchToggle.bind(this));\n    }\n    _onIntersectionChange(entries) {\n        this._isIntersecting.set(entries[0].isIntersecting);\n    }\n    _watchHidden() {\n        const { hidden } = this.$props;\n        this.$state.hidden.set(hidden() || !this._isVisible() || !this._isIntersecting());\n    }\n    _watchToggle() {\n        if (!this.$props.toggle()) {\n            this._invert.set(null);\n            return;\n        }\n        if (this.el) {\n            onPress(this.el, this._onToggle.bind(this));\n        }\n    }\n    _watchTime() {\n        const { hidden, timeText } = this.$state, { duration } = this._media.$state;\n        if (hidden()) return;\n        const { type, padHours, padMinutes, showHours } = this.$props, seconds = this._getSeconds(type()), $duration = duration(), shouldInvert = this._shouldInvert();\n        if (!Number.isFinite(seconds + $duration)) {\n            timeText.set(\"LIVE\");\n            return;\n        }\n        const time = shouldInvert ? Math.max(0, $duration - seconds) : seconds, formattedTime = formatTime(time, {\n            padHrs: padHours(),\n            padMins: padMinutes(),\n            showHrs: showHours()\n        });\n        timeText.set((shouldInvert ? \"-\" : \"\") + formattedTime);\n    }\n    _watchRole() {\n        if (!this.el) return;\n        const { toggle } = this.$props;\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"role\", toggle() ? \"timer\" : null);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"tabindex\", toggle() ? 0 : null);\n    }\n    _getSeconds(type) {\n        const { bufferedEnd, duration, currentTime } = this._media.$state;\n        switch(type){\n            case \"buffered\":\n                return bufferedEnd();\n            case \"duration\":\n                return duration();\n            default:\n                return currentTime();\n        }\n    }\n    _shouldInvert() {\n        return this.$props.remainder() && this._invert() !== false;\n    }\n    _onToggle(event1) {\n        event1.preventDefault();\n        if (this._invert() === null) {\n            this._invert.set(!this.$props.remainder());\n            return;\n        }\n        this._invert.set((v)=>!v);\n    }\n}\nTime.props = {\n    type: \"current\",\n    showHours: false,\n    padHours: null,\n    padMinutes: null,\n    remainder: false,\n    toggle: false,\n    hidden: false\n};\nTime.state = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    timeText: \"\",\n    hidden: false\n});\nconst plyrLayoutContext = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst plyrLayoutProps = {\n    clickToPlay: true,\n    clickToFullscreen: true,\n    controls: [\n        \"play-large\",\n        \"play\",\n        \"progress\",\n        \"current-time\",\n        \"mute+volume\",\n        \"captions\",\n        \"settings\",\n        \"pip\",\n        \"airplay\",\n        \"fullscreen\"\n    ],\n    customIcons: false,\n    displayDuration: false,\n    download: null,\n    markers: null,\n    invertTime: true,\n    thumbnails: null,\n    toggleTime: true,\n    translations: null,\n    seekTime: 10,\n    speed: [\n        0.5,\n        0.75,\n        1,\n        1.25,\n        1.5,\n        1.75,\n        2,\n        4\n    ]\n};\nclass PlyrLayout extends _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    onSetup() {\n        this._media = useMediaContext();\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(plyrLayoutContext, {\n            ...this.$props,\n            previewTime: (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(0)\n        });\n    }\n}\nPlyrLayout.props = plyrLayoutProps;\nfunction usePlyrLayoutClasses(el, media) {\n    const { canAirPlay, canFullscreen, canPictureInPicture, controlsHidden, currentTime, fullscreen, hasCaptions, isAirPlayConnected, paused, pictureInPicture, playing, pointer, poster, textTrack, viewType, waiting } = media.$state;\n    el.classList.add(\"plyr\");\n    el.classList.add(\"plyr--full-ui\");\n    const classes = {\n        \"plyr--airplay-active\": isAirPlayConnected,\n        \"plyr--airplay-supported\": canAirPlay,\n        \"plyr--fullscreen-active\": fullscreen,\n        \"plyr--fullscreen-enabled\": canFullscreen,\n        \"plyr--hide-controls\": controlsHidden,\n        \"plyr--is-touch\": ()=>pointer() === \"coarse\",\n        \"plyr--loading\": waiting,\n        \"plyr--paused\": paused,\n        \"plyr--pip-active\": pictureInPicture,\n        \"plyr--pip-enabled\": canPictureInPicture,\n        \"plyr--playing\": playing,\n        \"plyr__poster-enabled\": poster,\n        \"plyr--stopped\": ()=>paused() && currentTime() === 0,\n        \"plyr--captions-active\": textTrack,\n        \"plyr--captions-enabled\": hasCaptions\n    };\n    const disposal = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createDisposalBin)();\n    for (const token of Object.keys(classes)){\n        disposal.add((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>void el.classList.toggle(token, !!classes[token]())));\n    }\n    disposal.add((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n        const token = `plyr--${viewType()}`;\n        el.classList.add(token);\n        return ()=>el.classList.remove(token);\n    }), (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n        const { $provider } = media, type = $provider()?.type, token = `plyr--${isHTMLProvider(type) ? \"html5\" : type}`;\n        el.classList.toggle(token, !!type);\n        return ()=>el.classList.remove(token);\n    }));\n    return ()=>disposal.empty();\n}\nfunction isHTMLProvider(type) {\n    return type === \"audio\" || type === \"video\";\n}\n{\n    console.warn(\"[vidstack] dev mode!\");\n}class MediaPlayerInstance extends MediaPlayer {\n}\nclass MediaProviderInstance extends MediaProvider {\n}\nclass MediaAnnouncerInstance extends MediaAnnouncer {\n}\nclass ControlsInstance extends Controls {\n}\nclass ControlsGroupInstance extends ControlsGroup {\n}\nclass ToggleButtonInstance extends ToggleButton {\n}\nclass CaptionButtonInstance extends CaptionButton {\n}\nclass FullscreenButtonInstance extends FullscreenButton {\n}\nclass LiveButtonInstance extends LiveButton {\n}\nclass MuteButtonInstance extends MuteButton {\n}\nclass PIPButtonInstance extends PIPButton {\n}\nclass PlayButtonInstance extends PlayButton {\n}\nclass AirPlayButtonInstance extends AirPlayButton {\n}\nclass GoogleCastButtonInstance extends GoogleCastButton {\n}\nclass SeekButtonInstance extends SeekButton {\n}\nclass TooltipInstance extends Tooltip {\n}\nclass TooltipTriggerInstance extends TooltipTrigger {\n}\nclass TooltipContentInstance extends TooltipContent {\n}\nclass SliderInstance extends Slider {\n}\nclass TimeSliderInstance extends TimeSlider {\n}\nclass VolumeSliderInstance extends VolumeSlider {\n}\nclass AudioGainSliderInstance extends AudioGainSlider {\n}\nclass SpeedSliderInstance extends SpeedSlider {\n}\nclass QualitySliderInstance extends QualitySlider {\n}\nclass SliderThumbnailInstance extends SliderThumbnail {\n}\nclass SliderValueInstance extends SliderValue {\n}\nclass SliderVideoInstance extends SliderVideo {\n}\nclass SliderPreviewInstance extends SliderPreview {\n}\nclass SliderChaptersInstance extends SliderChapters {\n}\nclass MenuInstance extends Menu {\n}\nclass MenuButtonInstance extends MenuButton {\n}\nclass MenuItemsInstance extends MenuItems {\n}\nclass MenuItemInstance extends MenuItem {\n}\nclass MenuPortalInstance extends MenuPortal {\n}\nclass RadioGroupInstance extends RadioGroup {\n}\nclass RadioInstance extends Radio {\n}\nclass CaptionsInstance extends Captions {\n}\nclass GestureInstance extends Gesture {\n}\nclass PosterInstance extends Poster {\n}\nclass ThumbnailInstance extends Thumbnail {\n}\nclass TimeInstance extends Time {\n}\nconst Slot = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { children, ...slotProps } = props;\n    const childrenArray = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children);\n    const slottable = childrenArray.find(isSlottable);\n    if (slottable) {\n        const newElement = slottable.props.children;\n        const newChildren = childrenArray.map((child)=>{\n            if (child === slottable) {\n                if (react__WEBPACK_IMPORTED_MODULE_0__.Children.count(newElement) > 1) return react__WEBPACK_IMPORTED_MODULE_0__.Children.only(null);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(newElement) ? newElement.props.children : null;\n            } else {\n                return child;\n            }\n        });\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlotClone, {\n            ...slotProps,\n            ref: forwardedRef\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(newElement) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(newElement, void 0, newChildren) : null);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlotClone, {\n        ...slotProps,\n        ref: forwardedRef\n    }, children);\n});\nSlot.displayName = \"Slot\";\nconst SlotClone = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { children, ...slotProps } = props;\n    if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(children)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, {\n            ...mergeProps(slotProps, children.props),\n            ref: forwardedRef ? (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(forwardedRef, children.ref) : children.ref\n        });\n    }\n    return react__WEBPACK_IMPORTED_MODULE_0__.Children.count(children) > 1 ? react__WEBPACK_IMPORTED_MODULE_0__.Children.only(null) : null;\n});\nSlotClone.displayName = \"SlotClone\";\nconst Slottable = ({ children })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n};\nfunction isSlottable(child) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child) && child.type === Slottable;\n}\nfunction mergeProps(slotProps, childProps) {\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            if (slotPropValue && childPropValue) {\n                overrideProps[propName] = (...args)=>{\n                    childPropValue(...args);\n                    slotPropValue(...args);\n                };\n            } else if (slotPropValue) {\n                overrideProps[propName] = slotPropValue;\n            }\n        } else if (propName === \"style\") {\n            overrideProps[propName] = {\n                ...slotPropValue,\n                ...childPropValue\n            };\n        } else if (propName === \"className\") {\n            overrideProps[propName] = [\n                slotPropValue,\n                childPropValue\n            ].filter(Boolean).join(\" \");\n        }\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nconst NODES = [\n    \"button\",\n    \"div\",\n    \"span\",\n    \"img\",\n    \"video\",\n    \"audio\"\n];\nconst Primitive = NODES.reduce((primitives, node)=>{\n    const Node1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n        const { asChild, ...primitiveProps } = props;\n        const Comp = asChild ? Slot : node;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Comp, {\n            ...primitiveProps,\n            ref: forwardedRef\n        });\n    });\n    Node1.displayName = `Primitive.${node}`;\n    return {\n        ...primitives,\n        [node]: Node1\n    };\n}, {});\nfunction isRemotionProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"REMOTION\";\n}\nfunction isRemotionSrc(src) {\n    return src?.type === \"video/remotion\";\n}\nconst sliderStateRecord = SliderInstance.state.record, initialSliderStore = Object.keys(sliderStateRecord).reduce((store, prop)=>({\n        ...store,\n        [prop] () {\n            return sliderStateRecord[prop];\n        }\n    }), {});\nfunction useSliderState(prop, ref) {\n    const $state = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(sliderState);\n    if (!$state && !ref) {\n        console.warn(`[vidstack] \\`useSliderState\\` requires \\`RefObject<SliderInstance>\\` argument if called outside of a slider component`);\n    }\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)((ref?.current?.$state || $state || initialSliderStore)[prop]);\n}\nfunction useSliderStore(ref) {\n    const $state = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(sliderState);\n    if (!$state && !ref) {\n        console.warn(`[vidstack] \\`useSliderStore\\` requires \\`RefObject<SliderInstance>\\` argument if called outside of a slider component`);\n    }\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignalRecord)(ref?.current ? ref.current.$state : $state || initialSliderStore);\n}\nconst mediaStateRecord = MediaPlayerInstance.state.record, initialMediaStore = Object.keys(mediaStateRecord).reduce((store, prop)=>({\n        ...store,\n        [prop] () {\n            return mediaStateRecord[prop];\n        }\n    }), {});\nfunction useMediaState(prop, ref) {\n    const $state = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(mediaState);\n    if (!$state && !ref) {\n        console.warn(`[vidstack] \\`useMediaState\\` requires \\`RefObject<MediaPlayerInstance>\\` argument if called outside the \\`<MediaPlayer>\\` component`);\n    }\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)((ref?.current?.$state || $state || initialMediaStore)[prop]);\n}\nfunction useMediaStore(ref) {\n    const $state = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(mediaState);\n    if (!$state && !ref) {\n        console.warn(`[vidstack] \\`useMediaStore\\` requires \\`RefObject<MediaPlayerInstance>\\` argument if called outside the \\`<MediaPlayer>\\` component`);\n    }\n    return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignalRecord)(ref?.current ? ref.current.$state : $state || initialMediaStore);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-OqUG8Vsn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-OqUG8Vsn.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleCastProvider: () => (/* binding */ GoogleCastProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-VGbd3Q_b.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ GoogleCastProvider auto */ \n\n\n\n\nclass GoogleCastMediaInfoBuilder {\n    constructor(src){\n        this._info = new chrome.cast.media.MediaInfo(src.src, src.type);\n    }\n    build() {\n        return this._info;\n    }\n    _setStreamType(streamType) {\n        if (streamType.includes(\"live\")) {\n            this._info.streamType = chrome.cast.media.StreamType.LIVE;\n        } else {\n            this._info.streamType = chrome.cast.media.StreamType.BUFFERED;\n        }\n        return this;\n    }\n    _setTracks(tracks) {\n        this._info.tracks = tracks.map(this._buildCastTrack);\n        return this;\n    }\n    _setMetadata(title, poster) {\n        this._info.metadata = new chrome.cast.media.GenericMediaMetadata();\n        this._info.metadata.title = title;\n        this._info.metadata.images = [\n            {\n                url: poster\n            }\n        ];\n        return this;\n    }\n    _buildCastTrack(track, trackId) {\n        const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n        castTrack.name = track.label;\n        castTrack.trackContentId = track.src;\n        castTrack.trackContentType = \"text/vtt\";\n        castTrack.language = track.language;\n        castTrack.subtype = track.kind.toUpperCase();\n        return castTrack;\n    }\n}\nconst REMOTE_TRACK_TEXT_TYPE = chrome.cast.media.TrackType.TEXT, REMOTE_TRACK_AUDIO_TYPE = chrome.cast.media.TrackType.AUDIO;\nclass GoogleCastTracksManager {\n    constructor(_cast, _ctx, _onNewLocalTracks){\n        this._cast = _cast;\n        this._ctx = _ctx;\n        this._onNewLocalTracks = _onNewLocalTracks;\n    }\n    _setup() {\n        const syncRemoteActiveIds = this._syncRemoteActiveIds.bind(this);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.audioTracks, \"change\", syncRemoteActiveIds);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._ctx.textTracks, \"mode-change\", syncRemoteActiveIds);\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this._syncLocalTracks.bind(this));\n    }\n    _getLocalTextTracks() {\n        return this._ctx.$state.textTracks().filter((track)=>track.src && track.type === \"vtt\");\n    }\n    _getLocalAudioTracks() {\n        return this._ctx.$state.audioTracks();\n    }\n    _getRemoteTracks(type) {\n        const tracks = this._cast.mediaInfo?.tracks ?? [];\n        return type ? tracks.filter((track)=>track.type === type) : tracks;\n    }\n    _getRemoteActiveIds() {\n        const activeIds = [], activeLocalAudioTrack = this._getLocalAudioTracks().find((track)=>track.selected), activeLocalTextTracks = this._getLocalTextTracks().filter((track)=>track.mode === \"showing\");\n        if (activeLocalAudioTrack) {\n            const remoteAudioTracks = this._getRemoteTracks(REMOTE_TRACK_AUDIO_TYPE), remoteAudioTrack = this._findRemoteTrack(remoteAudioTracks, activeLocalAudioTrack);\n            if (remoteAudioTrack) activeIds.push(remoteAudioTrack.trackId);\n        }\n        if (activeLocalTextTracks?.length) {\n            const remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n            if (remoteTextTracks.length) {\n                for (const localTrack of activeLocalTextTracks){\n                    const remoteTextTrack = this._findRemoteTrack(remoteTextTracks, localTrack);\n                    if (remoteTextTrack) activeIds.push(remoteTextTrack.trackId);\n                }\n            }\n        }\n        return activeIds;\n    }\n    _syncLocalTracks() {\n        const localTextTracks = this._getLocalTextTracks();\n        if (!this._cast.isMediaLoaded) return;\n        const remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n        for (const localTrack of localTextTracks){\n            const hasRemoteTrack = this._findRemoteTrack(remoteTextTracks, localTrack);\n            if (!hasRemoteTrack) {\n                (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(()=>this._onNewLocalTracks?.());\n                break;\n            }\n        }\n    }\n    _syncRemoteTracks(event) {\n        if (!this._cast.isMediaLoaded) return;\n        const localAudioTracks = this._getLocalAudioTracks(), localTextTracks = this._getLocalTextTracks(), remoteAudioTracks = this._getRemoteTracks(REMOTE_TRACK_AUDIO_TYPE), remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n        for (const remoteAudioTrack of remoteAudioTracks){\n            const hasLocalTrack = this._findLocalTrack(localAudioTracks, remoteAudioTrack);\n            if (hasLocalTrack) continue;\n            const localAudioTrack = {\n                id: remoteAudioTrack.trackId.toString(),\n                label: remoteAudioTrack.name,\n                language: remoteAudioTrack.language,\n                kind: remoteAudioTrack.subtype ?? \"main\",\n                selected: false\n            };\n            this._ctx.audioTracks[_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol._add](localAudioTrack, event);\n        }\n        for (const remoteTextTrack of remoteTextTracks){\n            const hasLocalTrack = this._findLocalTrack(localTextTracks, remoteTextTrack);\n            if (hasLocalTrack) continue;\n            const localTextTrack = {\n                id: remoteTextTrack.trackId.toString(),\n                src: remoteTextTrack.trackContentId,\n                label: remoteTextTrack.name,\n                language: remoteTextTrack.language,\n                kind: remoteTextTrack.subtype.toLowerCase()\n            };\n            this._ctx.textTracks.add(localTextTrack, event);\n        }\n    }\n    _syncRemoteActiveIds(event) {\n        if (!this._cast.isMediaLoaded) return;\n        const activeIds = this._getRemoteActiveIds(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);\n        this._editTracksInfo(editRequest).catch((error)=>{\n            {\n                this._ctx.logger?.errorGroup(\"[vidstack] failed to edit cast tracks info\").labelledLog(\"Edit Request\", editRequest).labelledLog(\"Error\", error).dispatch();\n            }\n        });\n    }\n    _editTracksInfo(request) {\n        const media = (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastSessionMedia)();\n        return new Promise((resolve, reject)=>media?.editTracksInfo(request, resolve, reject));\n    }\n    _findLocalTrack(localTracks, remoteTrack) {\n        return localTracks.find((localTrack)=>this._isMatch(localTrack, remoteTrack));\n    }\n    _findRemoteTrack(remoteTracks, localTrack) {\n        return remoteTracks.find((remoteTrack)=>this._isMatch(localTrack, remoteTrack));\n    }\n    // Note: we can't rely on id matching because they will differ between local/remote. A local\n    // track id might not even exist.\n    _isMatch(localTrack, remoteTrack) {\n        return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();\n    }\n}\nclass GoogleCastProvider {\n    constructor(_player, _ctx){\n        this._player = _player;\n        this._ctx = _ctx;\n        this.$$PROVIDER_TYPE = \"GOOGLE_CAST\";\n        this.scope = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createScope)();\n        this._currentSrc = null;\n        this._state = \"disconnected\";\n        this._currentTime = 0;\n        this._played = 0;\n        this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0);\n        this._timeRAF = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.RAFLoop(this._onAnimationFrame.bind(this));\n        this._reloadInfo = null;\n        this._isIdle = false;\n        this._tracks = new GoogleCastTracksManager(this._player, this._ctx, this._onNewLocalTracks.bind(this));\n    }\n    get _notify() {\n        return this._ctx.delegate._notify;\n    }\n    get type() {\n        return \"google-cast\";\n    }\n    get currentSrc() {\n        return this._currentSrc;\n    }\n    /**\n   * The Google Cast remote player.\n   *\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}\n   */ get player() {\n        return this._player;\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */ get cast() {\n        return (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastContext)();\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}\n   */ get session() {\n        return (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastSession)();\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}\n   */ get media() {\n        return (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastSessionMedia)();\n    }\n    /**\n   * Whether the current Google Cast session belongs to this provider.\n   */ get hasActiveSession() {\n        return (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.hasActiveCastSession)(this._currentSrc);\n    }\n    setup() {\n        this._attachCastContextEventListeners();\n        this._attachCastPlayerEventListeners();\n        this._tracks._setup();\n        this._notify(\"provider-setup\", this);\n    }\n    _attachCastContextEventListeners() {\n        (0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.listenCastContextEvent)(cast.framework.CastContextEventType.CAST_STATE_CHANGED, this._onCastStateChange.bind(this));\n    }\n    _attachCastPlayerEventListeners() {\n        const Event2 = cast.framework.RemotePlayerEventType, handlers = {\n            [Event2.IS_CONNECTED_CHANGED]: this._onCastStateChange,\n            [Event2.IS_MEDIA_LOADED_CHANGED]: this._onMediaLoadedChange,\n            [Event2.CAN_CONTROL_VOLUME_CHANGED]: this._onCanControlVolumeChange,\n            [Event2.CAN_SEEK_CHANGED]: this._onCanSeekChange,\n            [Event2.DURATION_CHANGED]: this._onDurationChange,\n            [Event2.IS_MUTED_CHANGED]: this._onVolumeChange,\n            [Event2.VOLUME_LEVEL_CHANGED]: this._onVolumeChange,\n            [Event2.IS_PAUSED_CHANGED]: this._onPausedChange,\n            [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this._onProgress,\n            [Event2.PLAYER_STATE_CHANGED]: this._onPlayerStateChange\n        };\n        this._playerEventHandlers = handlers;\n        const handler = this._onRemotePlayerEvent.bind(this);\n        for (const type of (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.keysOf)(handlers)){\n            this._player.controller.addEventListener(type, handler);\n        }\n        (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            for (const type of (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.keysOf)(handlers)){\n                this._player.controller.removeEventListener(type, handler);\n            }\n        });\n    }\n    async play() {\n        if (!this._player.isPaused && !this._isIdle) return;\n        if (this._isIdle) {\n            await this._reload(false, 0);\n            return;\n        }\n        this._player.controller?.playOrPause();\n    }\n    async pause() {\n        if (this._player.isPaused) return;\n        this._player.controller?.playOrPause();\n    }\n    getMediaStatus(request) {\n        return new Promise((resolve, reject)=>{\n            this.media?.getStatus(request, resolve, reject);\n        });\n    }\n    setMuted(muted) {\n        const hasChanged = muted && !this._player.isMuted || !muted && this._player.isMuted;\n        if (hasChanged) this._player.controller?.muteOrUnmute();\n    }\n    setCurrentTime(time) {\n        this._player.currentTime = time;\n        this._notify(\"seeking\", time);\n        this._player.controller?.seek();\n    }\n    setVolume(volume) {\n        this._player.volumeLevel = volume;\n        this._player.controller?.setVolumeLevel();\n    }\n    async loadSource(src) {\n        if (this._reloadInfo?.src !== src) this._reloadInfo = null;\n        if ((0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.hasActiveCastSession)(src)) {\n            this._resumeSession();\n            this._currentSrc = src;\n            return;\n        }\n        this._notify(\"load-start\");\n        const loadRequest = this._buildLoadRequest(src), errorCode = await this.session.loadMedia(loadRequest);\n        if (errorCode) {\n            this._currentSrc = null;\n            this._notify(\"error\", Error((0,_vidstack_VGbd3Q_b_js__WEBPACK_IMPORTED_MODULE_3__.getCastErrorMessage)(errorCode)));\n            return;\n        }\n        this._currentSrc = src;\n    }\n    destroy() {\n        this._reset();\n        this._endSession();\n    }\n    _reset() {\n        if (!this._reloadInfo) {\n            this._played = 0;\n            this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0);\n        }\n        this._timeRAF._stop();\n        this._currentTime = 0;\n        this._reloadInfo = null;\n    }\n    _resumeSession() {\n        const resumeSessionEvent = new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"resume-session\", {\n            detail: this.session\n        });\n        this._onMediaLoadedChange(resumeSessionEvent);\n        const { muted, volume, savedState } = this._ctx.$state, localState = savedState();\n        this.setCurrentTime(Math.max(this._player.currentTime, localState?.currentTime ?? 0));\n        this.setMuted(muted());\n        this.setVolume(volume());\n        if (localState?.paused === false) this.play();\n    }\n    _endSession() {\n        this.cast.endCurrentSession(true);\n        const { remotePlaybackLoader } = this._ctx.$state;\n        remotePlaybackLoader.set(null);\n    }\n    _disconnectFromReceiver() {\n        const { savedState } = this._ctx.$state;\n        savedState.set({\n            paused: this._player.isPaused,\n            currentTime: this._player.currentTime\n        });\n        this._endSession();\n    }\n    _onAnimationFrame() {\n        this._onCurrentTimeChange();\n    }\n    _onRemotePlayerEvent(event) {\n        this._playerEventHandlers[event.type].call(this, event);\n    }\n    _onCastStateChange(data) {\n        const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? \"connected\" : castState === cast.framework.CastState.CONNECTING ? \"connecting\" : \"disconnected\";\n        if (this._state === state) return;\n        const detail = {\n            type: \"google-cast\",\n            state\n        }, trigger = this._createEvent(data);\n        this._state = state;\n        this._notify(\"remote-playback-change\", detail, trigger);\n        if (state === \"disconnected\") {\n            this._disconnectFromReceiver();\n        }\n    }\n    _onMediaLoadedChange(event) {\n        const hasLoaded = !!this._player.isMediaLoaded;\n        if (!hasLoaded) return;\n        const src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source);\n        Promise.resolve().then(()=>{\n            if (src !== (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source) || !this._player.isMediaLoaded) return;\n            this._reset();\n            const duration = this._player.duration;\n            this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, duration);\n            const detail = {\n                provider: this,\n                duration,\n                buffered: new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0),\n                seekable: this._getSeekableRange()\n            }, trigger = this._createEvent(event);\n            this._notify(\"loaded-metadata\", void 0, trigger);\n            this._notify(\"loaded-data\", void 0, trigger);\n            this._notify(\"can-play\", detail, trigger);\n            this._onCanControlVolumeChange();\n            this._onCanSeekChange(event);\n            const { volume, muted } = this._ctx.$state;\n            this.setVolume(volume());\n            this.setMuted(muted());\n            this._timeRAF._start();\n            this._tracks._syncRemoteTracks(trigger);\n            this._tracks._syncRemoteActiveIds(trigger);\n        });\n    }\n    _onCanControlVolumeChange() {\n        this._ctx.$state.canSetVolume.set(this._player.canControlVolume);\n    }\n    _onCanSeekChange(event) {\n        const trigger = this._createEvent(event);\n        this._notify(\"stream-type-change\", this._getStreamType(), trigger);\n    }\n    _getStreamType() {\n        const streamType = this._player.mediaInfo?.streamType;\n        return streamType === chrome.cast.media.StreamType.LIVE ? this._player.canSeek ? \"live:dvr\" : \"live\" : \"on-demand\";\n    }\n    _onCurrentTimeChange() {\n        if (this._reloadInfo) return;\n        const currentTime = this._player.currentTime;\n        if (currentTime === this._currentTime) return;\n        this._notify(\"time-change\", currentTime);\n        if (currentTime > this._played) {\n            this._played = currentTime;\n            this._onProgress();\n        }\n        if (this._ctx.$state.seeking()) {\n            this._notify(\"seeked\", currentTime);\n        }\n        this._currentTime = currentTime;\n    }\n    _onDurationChange(event) {\n        if (!this._player.isMediaLoaded || this._reloadInfo) return;\n        const duration = this._player.duration, trigger = this._createEvent(event);\n        this._seekableRange = new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, duration);\n        this._notify(\"duration-change\", duration, trigger);\n    }\n    _onVolumeChange(event) {\n        if (!this._player.isMediaLoaded) return;\n        const detail = {\n            muted: this._player.isMuted,\n            volume: this._player.volumeLevel\n        }, trigger = this._createEvent(event);\n        this._notify(\"volume-change\", detail, trigger);\n    }\n    _onPausedChange(event) {\n        const trigger = this._createEvent(event);\n        if (this._player.isPaused) {\n            this._notify(\"pause\", void 0, trigger);\n        } else {\n            this._notify(\"play\", void 0, trigger);\n        }\n    }\n    _onProgress(event) {\n        const detail = {\n            seekable: this._getSeekableRange(),\n            buffered: new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, this._played)\n        }, trigger = event ? this._createEvent(event) : void 0;\n        this._notify(\"progress\", detail, trigger);\n    }\n    _onPlayerStateChange(event) {\n        const state = this._player.playerState, PlayerState = chrome.cast.media.PlayerState;\n        this._isIdle = state === PlayerState.IDLE;\n        if (state === PlayerState.PAUSED) return;\n        const trigger = this._createEvent(event);\n        switch(state){\n            case PlayerState.PLAYING:\n                this._notify(\"playing\", void 0, trigger);\n                break;\n            case PlayerState.BUFFERING:\n                this._notify(\"waiting\", void 0, trigger);\n                break;\n            case PlayerState.IDLE:\n                this._timeRAF._stop();\n                this._notify(\"pause\");\n                this._notify(\"end\");\n                break;\n        }\n    }\n    _getSeekableRange() {\n        return this._player.liveSeekableRange ? new _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(this._player.liveSeekableRange.start, this._player.liveSeekableRange.end) : this._seekableRange;\n    }\n    _createEvent(detail) {\n        return detail instanceof Event ? detail : new _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(detail.type, {\n            detail\n        });\n    }\n    _buildMediaInfo(src) {\n        const { streamType, title, poster } = this._ctx.$state;\n        return new GoogleCastMediaInfoBuilder(src)._setMetadata(title(), poster())._setStreamType(streamType())._setTracks(this._tracks._getLocalTextTracks()).build();\n    }\n    _buildLoadRequest(src) {\n        const mediaInfo = this._buildMediaInfo(src), request = new chrome.cast.media.LoadRequest(mediaInfo), savedState = this._ctx.$state.savedState();\n        request.autoplay = (this._reloadInfo?.paused ?? savedState?.paused) === false;\n        request.currentTime = this._reloadInfo?.time ?? savedState?.currentTime ?? 0;\n        return request;\n    }\n    async _reload(paused, time) {\n        const src = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this._ctx.$state.source);\n        this._reloadInfo = {\n            src,\n            paused,\n            time\n        };\n        await this.loadSource(src);\n    }\n    _onNewLocalTracks() {\n        this._reload(this._player.isPaused, this._player.currentTime).catch((error)=>{\n            {\n                this._ctx.logger?.errorGroup(\"[vidstack] cast failed to load new local tracks\").labelledLog(\"Error\", error).dispatch();\n            }\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-OqUG8Vsn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCastContext: () => (/* binding */ getCastContext),\n/* harmony export */   getCastErrorMessage: () => (/* binding */ getCastErrorMessage),\n/* harmony export */   getCastSession: () => (/* binding */ getCastSession),\n/* harmony export */   getCastSessionMedia: () => (/* binding */ getCastSessionMedia),\n/* harmony export */   hasActiveCastSession: () => (/* binding */ hasActiveCastSession),\n/* harmony export */   listenCastContextEvent: () => (/* binding */ listenCastContextEvent),\n/* harmony export */   loader: () => (/* binding */ loader)\n/* harmony export */ });\n/* harmony import */ var _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* __next_internal_client_entry_do_not_use__ getCastContext,getCastErrorMessage,getCastSession,getCastSessionMedia,hasActiveCastSession,listenCastContextEvent,loader auto */ \n\nfunction getCastFrameworkURL() {\n    return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n    return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n    return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n    return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n    return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n    return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n    return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n    const contentId = getCastSessionMedia()?.media.contentId;\n    return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n    return {\n        language: \"en-US\",\n        autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n        receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n        resumeSavedSession: true,\n        androidReceiverCompatible: true\n    };\n}\nfunction getCastErrorMessage(code) {\n    const defaultMessage = `Google Cast Error Code: ${code}`;\n    {\n        switch(code){\n            case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n                return \"The API is not initialized.\";\n            case chrome.cast.ErrorCode.CANCEL:\n                return \"The operation was canceled by the user\";\n            case chrome.cast.ErrorCode.CHANNEL_ERROR:\n                return \"A channel to the receiver is not available.\";\n            case chrome.cast.ErrorCode.EXTENSION_MISSING:\n                return \"The Cast extension is not available.\";\n            case chrome.cast.ErrorCode.INVALID_PARAMETER:\n                return \"The parameters to the operation were not valid.\";\n            case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n                return \"No receiver was compatible with the session request.\";\n            case chrome.cast.ErrorCode.SESSION_ERROR:\n                return \"A session could not be created, or a session was invalid.\";\n            case chrome.cast.ErrorCode.TIMEOUT:\n                return \"The operation timed out.\";\n            default:\n                return defaultMessage;\n        }\n    }\n}\nfunction listenCastContextEvent(type, handler) {\n    return (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.listen)(getCastContext(), type, handler);\n}\nclass GoogleCastLoader {\n    constructor(){\n        this.name = \"google-cast\";\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */ get cast() {\n        return getCastContext();\n    }\n    mediaType() {\n        return \"video\";\n    }\n    canPlay(src) {\n        return _vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.IS_CHROME && !_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.IS_IOS && (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canGoogleCastSrc)(src);\n    }\n    async prompt(ctx) {\n        let loadEvent, openEvent, errorEvent;\n        try {\n            loadEvent = await this._loadCastFramework(ctx);\n            if (!this._player) {\n                this._player = new cast.framework.RemotePlayer();\n                new cast.framework.RemotePlayerController(this._player);\n            }\n            openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n                trigger: loadEvent\n            });\n            ctx.player.dispatchEvent(openEvent);\n            this._notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n            await this._showPrompt((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.peek)(ctx.$props.googleCast));\n            ctx.$state.remotePlaybackInfo.set({\n                deviceName: getCastSession()?.getCastDevice().friendlyName\n            });\n            if (isCastConnected()) this._notifyRemoteStateChange(ctx, \"connected\", openEvent);\n        } catch (code) {\n            const error = code instanceof Error ? code : this._createError((code + \"\").toUpperCase(), \"Prompt failed.\");\n            errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n                detail: error,\n                trigger: openEvent ?? loadEvent,\n                cancelable: true\n            });\n            ctx.player.dispatch(errorEvent);\n            this._notifyRemoteStateChange(ctx, isCastConnected() ? \"connected\" : \"disconnected\", errorEvent);\n            throw error;\n        } finally{\n            ctx.player.dispatch(\"google-cast-prompt-close\", {\n                trigger: errorEvent ?? openEvent ?? loadEvent\n            });\n        }\n    }\n    async load(ctx) {\n        if (_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.IS_SERVER) {\n            throw Error(\"[vidstack] can not load google cast provider server-side\");\n        }\n        if (!this._player) {\n            throw Error(\"[vidstack] google cast player was not initialized\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-OqUG8Vsn.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-OqUG8Vsn.js\"))).GoogleCastProvider(this._player, ctx);\n    }\n    async _loadCastFramework(ctx) {\n        if (hasLoadedCastFramework()) return;\n        const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n        ctx.player.dispatch(loadStartEvent);\n        await (0,_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.loadScript)(getCastFrameworkURL());\n        await customElements.whenDefined(\"google-cast-launcher\");\n        const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", {\n            trigger: loadStartEvent\n        });\n        ctx.player.dispatch(loadedEvent);\n        if (!isCastAvailable()) {\n            throw this._createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n        }\n        return loadedEvent;\n    }\n    async _showPrompt(options) {\n        this._setOptions(options);\n        const errorCode = await this.cast.requestSession();\n        if (errorCode) {\n            throw this._createError(errorCode.toUpperCase(), getCastErrorMessage(errorCode));\n        }\n    }\n    _setOptions(options) {\n        this.cast?.setOptions({\n            ...getDefaultCastOptions(),\n            ...options\n        });\n    }\n    _notifyRemoteStateChange(ctx, state, trigger) {\n        const detail = {\n            type: \"google-cast\",\n            state\n        };\n        ctx.delegate._notify(\"remote-playback-change\", detail, trigger);\n    }\n    _createError(code, message) {\n        const error = Error(message);\n        error.code = code;\n        return error;\n    }\n}\nvar loader = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    GoogleCastLoader: GoogleCastLoader\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-VGbd3Q_b.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Wdd6fBp8.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Wdd6fBp8.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useActive: () => (/* binding */ useActive),\n/* harmony export */   useClassName: () => (/* binding */ useClassName),\n/* harmony export */   useColorSchemePreference: () => (/* binding */ useColorSchemePreference),\n/* harmony export */   useLayoutName: () => (/* binding */ useLayoutName),\n/* harmony export */   useResizeObserver: () => (/* binding */ useResizeObserver),\n/* harmony export */   useTransitionActive: () => (/* binding */ useTransitionActive)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-BOkHoBGu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BOkHoBGu.js\");\n/* __next_internal_client_entry_do_not_use__ useActive,useClassName,useColorSchemePreference,useLayoutName,useResizeObserver,useTransitionActive auto */ \n\n\nfunction useClassName(el, className) {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!el || !className) return;\n        const tokens = className.split(\" \");\n        for (const token of tokens)el.classList.add(token);\n        return ()=>{\n            for (const token of tokens)el.classList.remove(token);\n        };\n    }, [\n        el,\n        className\n    ]);\n}\nfunction useResizeObserver(el, callback) {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!el) return;\n        callback();\n        const observer = new ResizeObserver((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(callback));\n        observer.observe(el);\n        return ()=>observer.disconnect();\n    }, [\n        el,\n        callback\n    ]);\n}\nfunction useTransitionActive(el) {\n    const [isActive, setIsActive] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!el) return;\n        const disposal = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createDisposalBin)();\n        disposal.add((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"transitionstart\", ()=>setIsActive(true)), (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"transitionend\", ()=>setIsActive(false)));\n        return ()=>disposal.empty();\n    }, [\n        el\n    ]);\n    return isActive;\n}\nfunction useMouseEnter(el) {\n    const [isMouseEnter, setIsMouseEnter] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!el) return;\n        const disposal = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createDisposalBin)();\n        disposal.add((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"mouseenter\", ()=>setIsMouseEnter(true)), (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"mouseleave\", ()=>setIsMouseEnter(false)));\n        return ()=>disposal.empty();\n    }, [\n        el\n    ]);\n    return isMouseEnter;\n}\nfunction useFocusIn(el) {\n    const [isFocusIn, setIsFocusIn] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!el) return;\n        const disposal = (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createDisposalBin)();\n        disposal.add((0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"focusin\", ()=>setIsFocusIn(true)), (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"focusout\", ()=>setIsFocusIn(false)));\n        return ()=>disposal.empty();\n    }, [\n        el\n    ]);\n    return isFocusIn;\n}\nfunction useActive(el) {\n    const isMouseEnter = useMouseEnter(el), isFocusIn = useFocusIn(el), prevMouseEnter = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    if (prevMouseEnter.current && !isMouseEnter) return false;\n    prevMouseEnter.current = isMouseEnter;\n    return isMouseEnter || isFocusIn;\n}\nfunction useColorSchemePreference() {\n    const [colorScheme, setColorScheme] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"dark\");\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const media = window.matchMedia(\"(prefers-color-scheme: light)\");\n        function onChange() {\n            setColorScheme(media.matches ? \"light\" : \"dark\");\n        }\n        onChange();\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(media, \"change\", onChange);\n    }, []);\n    return colorScheme;\n}\nfunction useLayoutName(name) {\n    const player = (0,_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_2__.useMediaPlayer)();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!player) return;\n        return (0,_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const el = player.$el;\n            el?.setAttribute(\"data-layout\", name);\n            return ()=>el?.removeAttribute(\"data-layout\");\n        });\n    }, [\n        player\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Wdd6fBp8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findYouTubePoster: () => (/* binding */ findYouTubePoster),\n/* harmony export */   resolveYouTubeVideoId: () => (/* binding */ resolveYouTubeVideoId)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ findYouTubePoster,resolveYouTubeVideoId auto */ const videoIdRE = /(?:youtu\\.be|youtube|youtube\\.com|youtube-nocookie\\.com)\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=|)((?:\\w|-){11})/;\nconst posterCache = /* @__PURE__ */ new Map();\nconst pendingFetch = /* @__PURE__ */ new Map();\nfunction resolveYouTubeVideoId(src) {\n    return src.match(videoIdRE)?.[1];\n}\nasync function findYouTubePoster(videoId, abort) {\n    if (posterCache.has(videoId)) return posterCache.get(videoId);\n    if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);\n    const pending = new Promise(async (resolve)=>{\n        const sizes = [\n            \"maxresdefault\",\n            \"sddefault\",\n            \"hqdefault\"\n        ];\n        for (const size of sizes){\n            for (const webp of [\n                true,\n                false\n            ]){\n                const url = resolveYouTubePosterURL(videoId, size, webp), response = await fetch(url, {\n                    mode: \"no-cors\",\n                    signal: abort.signal\n                });\n                if (response.status < 400) {\n                    posterCache.set(videoId, url);\n                    resolve(url);\n                    return;\n                }\n            }\n        }\n    }).catch(()=>\"\").finally(()=>pendingFetch.delete(videoId));\n    pendingFetch.set(videoId, pending);\n    return pending;\n}\nfunction resolveYouTubePosterURL(videoId, size, webp) {\n    const type = webp ? \"webp\" : \"jpg\";\n    return `https://i.ytimg.com/${webp ? \"vi_webp\" : \"vi\"}/${videoId}/${size}.${type}`;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stWmMzSTdvT2QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7NkZBRUEsTUFBTUEsWUFBWTtBQUNsQixNQUFNQyxjQUFjLGFBQWEsR0FBRyxJQUFJQztBQUN4QyxNQUFNQyxlQUFlLGFBQWEsR0FBRyxJQUFJRDtBQUN6QyxTQUFTRSxzQkFBc0JDLEdBQUc7SUFDaEMsT0FBT0EsSUFBSUMsS0FBSyxDQUFDTixZQUFZLENBQUMsRUFBRTtBQUNsQztBQUNBLGVBQWVPLGtCQUFrQkMsT0FBTyxFQUFFQyxLQUFLO0lBQzdDLElBQUlSLFlBQVlTLEdBQUcsQ0FBQ0YsVUFBVSxPQUFPUCxZQUFZVSxHQUFHLENBQUNIO0lBQ3JELElBQUlMLGFBQWFPLEdBQUcsQ0FBQ0YsVUFBVSxPQUFPTCxhQUFhUSxHQUFHLENBQUNIO0lBQ3ZELE1BQU1JLFVBQVUsSUFBSUMsUUFBUSxPQUFPQztRQUNqQyxNQUFNQyxRQUFRO1lBQUM7WUFBaUI7WUFBYTtTQUFZO1FBQ3pELEtBQUssTUFBTUMsUUFBUUQsTUFBTztZQUN4QixLQUFLLE1BQU1FLFFBQVE7Z0JBQUM7Z0JBQU07YUFBTSxDQUFFO2dCQUNoQyxNQUFNQyxNQUFNQyx3QkFBd0JYLFNBQVNRLE1BQU1DLE9BQU9HLFdBQVcsTUFBTUMsTUFBTUgsS0FBSztvQkFDcEZJLE1BQU07b0JBQ05DLFFBQVFkLE1BQU1jLE1BQU07Z0JBQ3RCO2dCQUNBLElBQUlILFNBQVNJLE1BQU0sR0FBRyxLQUFLO29CQUN6QnZCLFlBQVl3QixHQUFHLENBQUNqQixTQUFTVTtvQkFDekJKLFFBQVFJO29CQUNSO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGLEdBQUdRLEtBQUssQ0FBQyxJQUFNLElBQUlDLE9BQU8sQ0FBQyxJQUFNeEIsYUFBYXlCLE1BQU0sQ0FBQ3BCO0lBQ3JETCxhQUFhc0IsR0FBRyxDQUFDakIsU0FBU0k7SUFDMUIsT0FBT0E7QUFDVDtBQUNBLFNBQVNPLHdCQUF3QlgsT0FBTyxFQUFFUSxJQUFJLEVBQUVDLElBQUk7SUFDbEQsTUFBTVksT0FBT1osT0FBTyxTQUFTO0lBQzdCLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRUEsT0FBTyxZQUFZLEtBQUssQ0FBQyxFQUFFVCxRQUFRLENBQUMsRUFBRVEsS0FBSyxDQUFDLEVBQUVhLEtBQUssQ0FBQztBQUNwRjtBQUVvRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Rqcm9wcm9qZXRvMS8uL25vZGVfbW9kdWxlcy9Admlkc3RhY2svcmVhY3QvZGV2L2NodW5rcy92aWRzdGFjay1aYzNJN29PZC5qcz81MTE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5cbmNvbnN0IHZpZGVvSWRSRSA9IC8oPzp5b3V0dVxcLmJlfHlvdXR1YmV8eW91dHViZVxcLmNvbXx5b3V0dWJlLW5vY29va2llXFwuY29tKVxcLyg/OmVtYmVkXFwvfHZcXC98d2F0Y2hcXD92PXx3YXRjaFxcPy4rJnY9fCkoKD86XFx3fC0pezExfSkvO1xuY29uc3QgcG9zdGVyQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuY29uc3QgcGVuZGluZ0ZldGNoID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJlc29sdmVZb3VUdWJlVmlkZW9JZChzcmMpIHtcbiAgcmV0dXJuIHNyYy5tYXRjaCh2aWRlb0lkUkUpPy5bMV07XG59XG5hc3luYyBmdW5jdGlvbiBmaW5kWW91VHViZVBvc3Rlcih2aWRlb0lkLCBhYm9ydCkge1xuICBpZiAocG9zdGVyQ2FjaGUuaGFzKHZpZGVvSWQpKSByZXR1cm4gcG9zdGVyQ2FjaGUuZ2V0KHZpZGVvSWQpO1xuICBpZiAocGVuZGluZ0ZldGNoLmhhcyh2aWRlb0lkKSkgcmV0dXJuIHBlbmRpbmdGZXRjaC5nZXQodmlkZW9JZCk7XG4gIGNvbnN0IHBlbmRpbmcgPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IHNpemVzID0gW1wibWF4cmVzZGVmYXVsdFwiLCBcInNkZGVmYXVsdFwiLCBcImhxZGVmYXVsdFwiXTtcbiAgICBmb3IgKGNvbnN0IHNpemUgb2Ygc2l6ZXMpIHtcbiAgICAgIGZvciAoY29uc3Qgd2VicCBvZiBbdHJ1ZSwgZmFsc2VdKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IHJlc29sdmVZb3VUdWJlUG9zdGVyVVJMKHZpZGVvSWQsIHNpemUsIHdlYnApLCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICAgIG1vZGU6IFwibm8tY29yc1wiLFxuICAgICAgICAgIHNpZ25hbDogYWJvcnQuc2lnbmFsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzIDwgNDAwKSB7XG4gICAgICAgICAgcG9zdGVyQ2FjaGUuc2V0KHZpZGVvSWQsIHVybCk7XG4gICAgICAgICAgcmVzb2x2ZSh1cmwpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSkuY2F0Y2goKCkgPT4gXCJcIikuZmluYWxseSgoKSA9PiBwZW5kaW5nRmV0Y2guZGVsZXRlKHZpZGVvSWQpKTtcbiAgcGVuZGluZ0ZldGNoLnNldCh2aWRlb0lkLCBwZW5kaW5nKTtcbiAgcmV0dXJuIHBlbmRpbmc7XG59XG5mdW5jdGlvbiByZXNvbHZlWW91VHViZVBvc3RlclVSTCh2aWRlb0lkLCBzaXplLCB3ZWJwKSB7XG4gIGNvbnN0IHR5cGUgPSB3ZWJwID8gXCJ3ZWJwXCIgOiBcImpwZ1wiO1xuICByZXR1cm4gYGh0dHBzOi8vaS55dGltZy5jb20vJHt3ZWJwID8gXCJ2aV93ZWJwXCIgOiBcInZpXCJ9LyR7dmlkZW9JZH0vJHtzaXplfS4ke3R5cGV9YDtcbn1cblxuZXhwb3J0IHsgZmluZFlvdVR1YmVQb3N0ZXIsIHJlc29sdmVZb3VUdWJlVmlkZW9JZCB9O1xuIl0sIm5hbWVzIjpbInZpZGVvSWRSRSIsInBvc3RlckNhY2hlIiwiTWFwIiwicGVuZGluZ0ZldGNoIiwicmVzb2x2ZVlvdVR1YmVWaWRlb0lkIiwic3JjIiwibWF0Y2giLCJmaW5kWW91VHViZVBvc3RlciIsInZpZGVvSWQiLCJhYm9ydCIsImhhcyIsImdldCIsInBlbmRpbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInNpemVzIiwic2l6ZSIsIndlYnAiLCJ1cmwiLCJyZXNvbHZlWW91VHViZVBvc3RlclVSTCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtb2RlIiwic2lnbmFsIiwic3RhdHVzIiwic2V0IiwiY2F0Y2giLCJmaW5hbGx5IiwiZGVsZXRlIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Zc3I7oOd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVimeoVideoInfo: () => (/* binding */ getVimeoVideoInfo),\n/* harmony export */   resolveVimeoVideoId: () => (/* binding */ resolveVimeoVideoId)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ getVimeoVideoInfo,resolveVimeoVideoId auto */ const videoIdRE = /(?:https:\\/\\/)?(?:player\\.)?vimeo(?:\\.com)?\\/(?:video\\/)?(\\d+)(?:(?:\\?hash=|\\?h=|\\/)(.*))?/;\nconst infoCache = /* @__PURE__ */ new Map();\nconst pendingFetch = /* @__PURE__ */ new Map();\nfunction resolveVimeoVideoId(src) {\n    const matches = src.match(videoIdRE);\n    return {\n        videoId: matches?.[1],\n        hash: matches?.[2]\n    };\n}\nasync function getVimeoVideoInfo(videoId, abort, videoHash) {\n    if (infoCache.has(videoId)) return infoCache.get(videoId);\n    if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);\n    let oembedSrc = `https://vimeo.com/api/oembed.json?url=https://player.vimeo.com/video/${videoId}`;\n    if (videoHash) {\n        oembedSrc = oembedSrc.concat(`?h=${videoHash}`);\n    }\n    const promise = window.fetch(oembedSrc, {\n        mode: \"cors\",\n        signal: abort.signal\n    }).then((response)=>response.json()).then((data)=>{\n        const thumnailRegex = /vimeocdn.com\\/video\\/(.*)?_/, thumbnailId = data?.thumbnail_url?.match(thumnailRegex)?.[1], poster = thumbnailId ? `https://i.vimeocdn.com/video/${thumbnailId}_1920x1080.webp` : \"\", info = {\n            title: data?.title ?? \"\",\n            duration: data?.duration ?? 0,\n            poster,\n            pro: data.account_type !== \"basic\"\n        };\n        infoCache.set(videoId, info);\n        return info;\n    }).finally(()=>pendingFetch.delete(videoId));\n    pendingFetch.set(videoId, promise);\n    return promise;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2sta3JPQXRLTWkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7MkZBRUEsTUFBTUEsWUFBWTtBQUNsQixNQUFNQyxZQUFZLGFBQWEsR0FBRyxJQUFJQztBQUN0QyxNQUFNQyxlQUFlLGFBQWEsR0FBRyxJQUFJRDtBQUN6QyxTQUFTRSxvQkFBb0JDLEdBQUc7SUFDOUIsTUFBTUMsVUFBVUQsSUFBSUUsS0FBSyxDQUFDUDtJQUMxQixPQUFPO1FBQUVRLFNBQVNGLFNBQVMsQ0FBQyxFQUFFO1FBQUVHLE1BQU1ILFNBQVMsQ0FBQyxFQUFFO0lBQUM7QUFDckQ7QUFDQSxlQUFlSSxrQkFBa0JGLE9BQU8sRUFBRUcsS0FBSyxFQUFFQyxTQUFTO0lBQ3hELElBQUlYLFVBQVVZLEdBQUcsQ0FBQ0wsVUFBVSxPQUFPUCxVQUFVYSxHQUFHLENBQUNOO0lBQ2pELElBQUlMLGFBQWFVLEdBQUcsQ0FBQ0wsVUFBVSxPQUFPTCxhQUFhVyxHQUFHLENBQUNOO0lBQ3ZELElBQUlPLFlBQVksQ0FBQyxxRUFBcUUsRUFBRVAsUUFBUSxDQUFDO0lBQ2pHLElBQUlJLFdBQVc7UUFDYkcsWUFBWUEsVUFBVUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFSixVQUFVLENBQUM7SUFDaEQ7SUFDQSxNQUFNSyxVQUFVQyxPQUFPQyxLQUFLLENBQUNKLFdBQVc7UUFDdENLLE1BQU07UUFDTkMsUUFBUVYsTUFBTVUsTUFBTTtJQUN0QixHQUFHQyxJQUFJLENBQUMsQ0FBQ0MsV0FBYUEsU0FBU0MsSUFBSSxJQUFJRixJQUFJLENBQUMsQ0FBQ0c7UUFDM0MsTUFBTUMsZ0JBQWdCLCtCQUErQkMsY0FBY0YsTUFBTUcsZUFBZXJCLE1BQU1tQixnQkFBZ0IsQ0FBQyxFQUFFLEVBQUVHLFNBQVNGLGNBQWMsQ0FBQyw2QkFBNkIsRUFBRUEsWUFBWSxlQUFlLENBQUMsR0FBRyxJQUFJRyxPQUFPO1lBQ2xOQyxPQUFPTixNQUFNTSxTQUFTO1lBQ3RCQyxVQUFVUCxNQUFNTyxZQUFZO1lBQzVCSDtZQUNBSSxLQUFLUixLQUFLUyxZQUFZLEtBQUs7UUFDN0I7UUFDQWpDLFVBQVVrQyxHQUFHLENBQUMzQixTQUFTc0I7UUFDdkIsT0FBT0E7SUFDVCxHQUFHTSxPQUFPLENBQUMsSUFBTWpDLGFBQWFrQyxNQUFNLENBQUM3QjtJQUNyQ0wsYUFBYWdDLEdBQUcsQ0FBQzNCLFNBQVNTO0lBQzFCLE9BQU9BO0FBQ1Q7QUFFa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90anJvcHJvamV0bzEvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2sta3JPQXRLTWkuanM/YzJiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5jb25zdCB2aWRlb0lkUkUgPSAvKD86aHR0cHM6XFwvXFwvKT8oPzpwbGF5ZXJcXC4pP3ZpbWVvKD86XFwuY29tKT9cXC8oPzp2aWRlb1xcLyk/KFxcZCspKD86KD86XFw/aGFzaD18XFw/aD18XFwvKSguKikpPy87XG5jb25zdCBpbmZvQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuY29uc3QgcGVuZGluZ0ZldGNoID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJlc29sdmVWaW1lb1ZpZGVvSWQoc3JjKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBzcmMubWF0Y2godmlkZW9JZFJFKTtcbiAgcmV0dXJuIHsgdmlkZW9JZDogbWF0Y2hlcz8uWzFdLCBoYXNoOiBtYXRjaGVzPy5bMl0gfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFZpbWVvVmlkZW9JbmZvKHZpZGVvSWQsIGFib3J0LCB2aWRlb0hhc2gpIHtcbiAgaWYgKGluZm9DYWNoZS5oYXModmlkZW9JZCkpIHJldHVybiBpbmZvQ2FjaGUuZ2V0KHZpZGVvSWQpO1xuICBpZiAocGVuZGluZ0ZldGNoLmhhcyh2aWRlb0lkKSkgcmV0dXJuIHBlbmRpbmdGZXRjaC5nZXQodmlkZW9JZCk7XG4gIGxldCBvZW1iZWRTcmMgPSBgaHR0cHM6Ly92aW1lby5jb20vYXBpL29lbWJlZC5qc29uP3VybD1odHRwczovL3BsYXllci52aW1lby5jb20vdmlkZW8vJHt2aWRlb0lkfWA7XG4gIGlmICh2aWRlb0hhc2gpIHtcbiAgICBvZW1iZWRTcmMgPSBvZW1iZWRTcmMuY29uY2F0KGA/aD0ke3ZpZGVvSGFzaH1gKTtcbiAgfVxuICBjb25zdCBwcm9taXNlID0gd2luZG93LmZldGNoKG9lbWJlZFNyYywge1xuICAgIG1vZGU6IFwiY29yc1wiLFxuICAgIHNpZ25hbDogYWJvcnQuc2lnbmFsXG4gIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpLnRoZW4oKGRhdGEpID0+IHtcbiAgICBjb25zdCB0aHVtbmFpbFJlZ2V4ID0gL3ZpbWVvY2RuLmNvbVxcL3ZpZGVvXFwvKC4qKT9fLywgdGh1bWJuYWlsSWQgPSBkYXRhPy50aHVtYm5haWxfdXJsPy5tYXRjaCh0aHVtbmFpbFJlZ2V4KT8uWzFdLCBwb3N0ZXIgPSB0aHVtYm5haWxJZCA/IGBodHRwczovL2kudmltZW9jZG4uY29tL3ZpZGVvLyR7dGh1bWJuYWlsSWR9XzE5MjB4MTA4MC53ZWJwYCA6IFwiXCIsIGluZm8gPSB7XG4gICAgICB0aXRsZTogZGF0YT8udGl0bGUgPz8gXCJcIixcbiAgICAgIGR1cmF0aW9uOiBkYXRhPy5kdXJhdGlvbiA/PyAwLFxuICAgICAgcG9zdGVyLFxuICAgICAgcHJvOiBkYXRhLmFjY291bnRfdHlwZSAhPT0gXCJiYXNpY1wiXG4gICAgfTtcbiAgICBpbmZvQ2FjaGUuc2V0KHZpZGVvSWQsIGluZm8pO1xuICAgIHJldHVybiBpbmZvO1xuICB9KS5maW5hbGx5KCgpID0+IHBlbmRpbmdGZXRjaC5kZWxldGUodmlkZW9JZCkpO1xuICBwZW5kaW5nRmV0Y2guc2V0KHZpZGVvSWQsIHByb21pc2UpO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IHsgZ2V0VmltZW9WaWRlb0luZm8sIHJlc29sdmVWaW1lb1ZpZGVvSWQgfTtcbiJdLCJuYW1lcyI6WyJ2aWRlb0lkUkUiLCJpbmZvQ2FjaGUiLCJNYXAiLCJwZW5kaW5nRmV0Y2giLCJyZXNvbHZlVmltZW9WaWRlb0lkIiwic3JjIiwibWF0Y2hlcyIsIm1hdGNoIiwidmlkZW9JZCIsImhhc2giLCJnZXRWaW1lb1ZpZGVvSW5mbyIsImFib3J0IiwidmlkZW9IYXNoIiwiaGFzIiwiZ2V0Iiwib2VtYmVkU3JjIiwiY29uY2F0IiwicHJvbWlzZSIsIndpbmRvdyIsImZldGNoIiwibW9kZSIsInNpZ25hbCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJkYXRhIiwidGh1bW5haWxSZWdleCIsInRodW1ibmFpbElkIiwidGh1bWJuYWlsX3VybCIsInBvc3RlciIsImluZm8iLCJ0aXRsZSIsImR1cmF0aW9uIiwicHJvIiwiYWNjb3VudF90eXBlIiwic2V0IiwiZmluYWxseSIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/player/vidstack-default-icons.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/player/vidstack-default-icons.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultLayoutIcons: () => (/* binding */ defaultLayoutIcons)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var _chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-CBF7iUqu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js\");\n/* __next_internal_client_entry_do_not_use__ defaultLayoutIcons auto */ \n\n\nfunction createIcon(paths) {\n    function DefaultLayoutIcon(props) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n            paths,\n            ...props\n        });\n    }\n    DefaultLayoutIcon.displayName = \"DefaultLayoutIcon\";\n    return DefaultLayoutIcon;\n}\nconst defaultLayoutIcons = {\n    AirPlayButton: {\n        Default: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$5)\n    },\n    GoogleCastButton: {\n        Default: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$24)\n    },\n    PlayButton: {\n        Play: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$62),\n        Pause: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$59),\n        Replay: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$74)\n    },\n    MuteButton: {\n        Mute: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$54),\n        VolumeLow: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$105),\n        VolumeHigh: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$104)\n    },\n    CaptionButton: {\n        On: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$26),\n        Off: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$27)\n    },\n    PIPButton: {\n        Enter: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$61),\n        Exit: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$60)\n    },\n    FullscreenButton: {\n        Enter: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$40),\n        Exit: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$39)\n    },\n    SeekButton: {\n        Backward: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$77),\n        Forward: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$81)\n    },\n    DownloadButton: {\n        Default: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$31)\n    },\n    Menu: {\n        Accessibility: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$0),\n        ArrowLeft: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$11),\n        ArrowRight: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$22),\n        Audio: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$53),\n        Chapters: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$16),\n        Captions: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$27),\n        Playback: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$63),\n        Settings: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$88),\n        AudioBoostUp: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$104),\n        AudioBoostDown: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$105),\n        SpeedUp: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$35),\n        SpeedDown: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$34),\n        QualityUp: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$13),\n        QualityDown: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$8),\n        FontSizeUp: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$13),\n        FontSizeDown: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$8),\n        OpacityUp: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$33),\n        OpacityDown: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$56),\n        RadioCheck: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$19)\n    },\n    KeyboardDisplay: {\n        Play: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$62),\n        Pause: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$59),\n        Mute: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$54),\n        VolumeUp: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$104),\n        VolumeDown: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$105),\n        EnterFullscreen: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$40),\n        ExitFullscreen: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$39),\n        EnterPiP: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$61),\n        ExitPiP: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$60),\n        CaptionsOn: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$26),\n        CaptionsOff: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$27),\n        SeekForward: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$35),\n        SeekBackward: createIcon(_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_2__.Icon$34)\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9wbGF5ZXIvdmlkc3RhY2stZGVmYXVsdC1pY29ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O3dFQUUrQjtBQUN1UztBQUNoUjtBQUV0RCxTQUFTaUMsV0FBV0MsS0FBSztJQUN2QixTQUFTQyxrQkFBa0JDLEtBQUs7UUFDOUIsT0FBTyxhQUFhLGlCQUFHcEMsZ0RBQW1CLENBQUNnQyw4REFBSUEsRUFBRTtZQUFFRTtZQUFPLEdBQUdFLEtBQUs7UUFBQztJQUNyRTtJQUNBRCxrQkFBa0JHLFdBQVcsR0FBRztJQUNoQyxPQUFPSDtBQUNUO0FBQ0EsTUFBTUkscUJBQXFCO0lBQ3pCQyxlQUFlO1FBQ2JDLFNBQVNSLFdBQVdoQywrREFBTUE7SUFDNUI7SUFDQXlDLGtCQUFrQjtRQUNoQkQsU0FBU1IsV0FBVy9CLGdFQUFPQTtJQUM3QjtJQUNBeUMsWUFBWTtRQUNWQyxNQUFNWCxXQUFXOUIsZ0VBQU9BO1FBQ3hCMEMsT0FBT1osV0FBVzdCLGdFQUFPQTtRQUN6QjBDLFFBQVFiLFdBQVc1QixnRUFBT0E7SUFDNUI7SUFDQTBDLFlBQVk7UUFDVkMsTUFBTWYsV0FBVzNCLGdFQUFPQTtRQUN4QjJDLFdBQVdoQixXQUFXMUIsaUVBQVFBO1FBQzlCMkMsWUFBWWpCLFdBQVd6QixpRUFBUUE7SUFDakM7SUFDQTJDLGVBQWU7UUFDYkMsSUFBSW5CLFdBQVd4QixnRUFBT0E7UUFDdEI0QyxLQUFLcEIsV0FBV3ZCLGdFQUFPQTtJQUN6QjtJQUNBNEMsV0FBVztRQUNUQyxPQUFPdEIsV0FBV3RCLGdFQUFPQTtRQUN6QjZDLE1BQU12QixXQUFXckIsZ0VBQU9BO0lBQzFCO0lBQ0E2QyxrQkFBa0I7UUFDaEJGLE9BQU90QixXQUFXcEIsZ0VBQU9BO1FBQ3pCMkMsTUFBTXZCLFdBQVduQixnRUFBT0E7SUFDMUI7SUFDQTRDLFlBQVk7UUFDVkMsVUFBVTFCLFdBQVdsQixnRUFBT0E7UUFDNUI2QyxTQUFTM0IsV0FBV2pCLGdFQUFPQTtJQUM3QjtJQUNBNkMsZ0JBQWdCO1FBQ2RwQixTQUFTUixXQUFXaEIsZ0VBQU9BO0lBQzdCO0lBQ0E2QyxNQUFNO1FBQ0pDLGVBQWU5QixXQUFXZiwrREFBTUE7UUFDaEM4QyxXQUFXL0IsV0FBV2QsZ0VBQU9BO1FBQzdCOEMsWUFBWWhDLFdBQVdiLGdFQUFPQTtRQUM5QjhDLE9BQU9qQyxXQUFXWixnRUFBT0E7UUFDekI4QyxVQUFVbEMsV0FBV1gsZ0VBQU9BO1FBQzVCOEMsVUFBVW5DLFdBQVd2QixnRUFBT0E7UUFDNUIyRCxVQUFVcEMsV0FBV1YsZ0VBQU9BO1FBQzVCK0MsVUFBVXJDLFdBQVdULGdFQUFPQTtRQUM1QitDLGNBQWN0QyxXQUFXekIsaUVBQVFBO1FBQ2pDZ0UsZ0JBQWdCdkMsV0FBVzFCLGlFQUFRQTtRQUNuQ2tFLFNBQVN4QyxXQUFXUixnRUFBT0E7UUFDM0JpRCxXQUFXekMsV0FBV1AsZ0VBQU9BO1FBQzdCaUQsV0FBVzFDLFdBQVdOLGdFQUFPQTtRQUM3QmlELGFBQWEzQyxXQUFXTCwrREFBTUE7UUFDOUJpRCxZQUFZNUMsV0FBV04sZ0VBQU9BO1FBQzlCbUQsY0FBYzdDLFdBQVdMLCtEQUFNQTtRQUMvQm1ELFdBQVc5QyxXQUFXSixnRUFBT0E7UUFDN0JtRCxhQUFhL0MsV0FBV0gsZ0VBQU9BO1FBQy9CbUQsWUFBWWhELFdBQVdGLGdFQUFPQTtJQUNoQztJQUNBbUQsaUJBQWlCO1FBQ2Z0QyxNQUFNWCxXQUFXOUIsZ0VBQU9BO1FBQ3hCMEMsT0FBT1osV0FBVzdCLGdFQUFPQTtRQUN6QjRDLE1BQU1mLFdBQVczQixnRUFBT0E7UUFDeEI2RSxVQUFVbEQsV0FBV3pCLGlFQUFRQTtRQUM3QjRFLFlBQVluRCxXQUFXMUIsaUVBQVFBO1FBQy9COEUsaUJBQWlCcEQsV0FBV3BCLGdFQUFPQTtRQUNuQ3lFLGdCQUFnQnJELFdBQVduQixnRUFBT0E7UUFDbEN5RSxVQUFVdEQsV0FBV3RCLGdFQUFPQTtRQUM1QjZFLFNBQVN2RCxXQUFXckIsZ0VBQU9BO1FBQzNCNkUsWUFBWXhELFdBQVd4QixnRUFBT0E7UUFDOUJpRixhQUFhekQsV0FBV3ZCLGdFQUFPQTtRQUMvQmlGLGFBQWExRCxXQUFXUixnRUFBT0E7UUFDL0JtRSxjQUFjM0QsV0FBV1AsZ0VBQU9BO0lBQ2xDO0FBQ0Y7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90anJvcHJvamV0bzEvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9wbGF5ZXIvdmlkc3RhY2stZGVmYXVsdC1pY29ucy5qcz9kM2UyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24kNSwgSWNvbiQyNCwgSWNvbiQ2MiwgSWNvbiQ1OSwgSWNvbiQ3NCwgSWNvbiQ1NCwgSWNvbiQxMDUsIEljb24kMTA0LCBJY29uJDI2LCBJY29uJDI3LCBJY29uJDYxLCBJY29uJDYwLCBJY29uJDQwLCBJY29uJDM5LCBJY29uJDc3LCBJY29uJDgxLCBJY29uJDMxLCBJY29uJDAsIEljb24kMTEsIEljb24kMjIsIEljb24kNTMsIEljb24kMTYsIEljb24kNjMsIEljb24kODgsIEljb24kMzUsIEljb24kMzQsIEljb24kMTMsIEljb24kOCwgSWNvbiQzMywgSWNvbiQ1NiwgSWNvbiQxOSB9IGZyb20gJy4uL2NodW5rcy92aWRzdGFjay0zaHMzLThpXy5qcyc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY2h1bmtzL3ZpZHN0YWNrLUNCRjdpVXF1LmpzJztcblxuZnVuY3Rpb24gY3JlYXRlSWNvbihwYXRocykge1xuICBmdW5jdGlvbiBEZWZhdWx0TGF5b3V0SWNvbihwcm9wcykge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IHBhdGhzLCAuLi5wcm9wcyB9KTtcbiAgfVxuICBEZWZhdWx0TGF5b3V0SWNvbi5kaXNwbGF5TmFtZSA9IFwiRGVmYXVsdExheW91dEljb25cIjtcbiAgcmV0dXJuIERlZmF1bHRMYXlvdXRJY29uO1xufVxuY29uc3QgZGVmYXVsdExheW91dEljb25zID0ge1xuICBBaXJQbGF5QnV0dG9uOiB7XG4gICAgRGVmYXVsdDogY3JlYXRlSWNvbihJY29uJDUpXG4gIH0sXG4gIEdvb2dsZUNhc3RCdXR0b246IHtcbiAgICBEZWZhdWx0OiBjcmVhdGVJY29uKEljb24kMjQpXG4gIH0sXG4gIFBsYXlCdXR0b246IHtcbiAgICBQbGF5OiBjcmVhdGVJY29uKEljb24kNjIpLFxuICAgIFBhdXNlOiBjcmVhdGVJY29uKEljb24kNTkpLFxuICAgIFJlcGxheTogY3JlYXRlSWNvbihJY29uJDc0KVxuICB9LFxuICBNdXRlQnV0dG9uOiB7XG4gICAgTXV0ZTogY3JlYXRlSWNvbihJY29uJDU0KSxcbiAgICBWb2x1bWVMb3c6IGNyZWF0ZUljb24oSWNvbiQxMDUpLFxuICAgIFZvbHVtZUhpZ2g6IGNyZWF0ZUljb24oSWNvbiQxMDQpXG4gIH0sXG4gIENhcHRpb25CdXR0b246IHtcbiAgICBPbjogY3JlYXRlSWNvbihJY29uJDI2KSxcbiAgICBPZmY6IGNyZWF0ZUljb24oSWNvbiQyNylcbiAgfSxcbiAgUElQQnV0dG9uOiB7XG4gICAgRW50ZXI6IGNyZWF0ZUljb24oSWNvbiQ2MSksXG4gICAgRXhpdDogY3JlYXRlSWNvbihJY29uJDYwKVxuICB9LFxuICBGdWxsc2NyZWVuQnV0dG9uOiB7XG4gICAgRW50ZXI6IGNyZWF0ZUljb24oSWNvbiQ0MCksXG4gICAgRXhpdDogY3JlYXRlSWNvbihJY29uJDM5KVxuICB9LFxuICBTZWVrQnV0dG9uOiB7XG4gICAgQmFja3dhcmQ6IGNyZWF0ZUljb24oSWNvbiQ3NyksXG4gICAgRm9yd2FyZDogY3JlYXRlSWNvbihJY29uJDgxKVxuICB9LFxuICBEb3dubG9hZEJ1dHRvbjoge1xuICAgIERlZmF1bHQ6IGNyZWF0ZUljb24oSWNvbiQzMSlcbiAgfSxcbiAgTWVudToge1xuICAgIEFjY2Vzc2liaWxpdHk6IGNyZWF0ZUljb24oSWNvbiQwKSxcbiAgICBBcnJvd0xlZnQ6IGNyZWF0ZUljb24oSWNvbiQxMSksXG4gICAgQXJyb3dSaWdodDogY3JlYXRlSWNvbihJY29uJDIyKSxcbiAgICBBdWRpbzogY3JlYXRlSWNvbihJY29uJDUzKSxcbiAgICBDaGFwdGVyczogY3JlYXRlSWNvbihJY29uJDE2KSxcbiAgICBDYXB0aW9uczogY3JlYXRlSWNvbihJY29uJDI3KSxcbiAgICBQbGF5YmFjazogY3JlYXRlSWNvbihJY29uJDYzKSxcbiAgICBTZXR0aW5nczogY3JlYXRlSWNvbihJY29uJDg4KSxcbiAgICBBdWRpb0Jvb3N0VXA6IGNyZWF0ZUljb24oSWNvbiQxMDQpLFxuICAgIEF1ZGlvQm9vc3REb3duOiBjcmVhdGVJY29uKEljb24kMTA1KSxcbiAgICBTcGVlZFVwOiBjcmVhdGVJY29uKEljb24kMzUpLFxuICAgIFNwZWVkRG93bjogY3JlYXRlSWNvbihJY29uJDM0KSxcbiAgICBRdWFsaXR5VXA6IGNyZWF0ZUljb24oSWNvbiQxMyksXG4gICAgUXVhbGl0eURvd246IGNyZWF0ZUljb24oSWNvbiQ4KSxcbiAgICBGb250U2l6ZVVwOiBjcmVhdGVJY29uKEljb24kMTMpLFxuICAgIEZvbnRTaXplRG93bjogY3JlYXRlSWNvbihJY29uJDgpLFxuICAgIE9wYWNpdHlVcDogY3JlYXRlSWNvbihJY29uJDMzKSxcbiAgICBPcGFjaXR5RG93bjogY3JlYXRlSWNvbihJY29uJDU2KSxcbiAgICBSYWRpb0NoZWNrOiBjcmVhdGVJY29uKEljb24kMTkpXG4gIH0sXG4gIEtleWJvYXJkRGlzcGxheToge1xuICAgIFBsYXk6IGNyZWF0ZUljb24oSWNvbiQ2MiksXG4gICAgUGF1c2U6IGNyZWF0ZUljb24oSWNvbiQ1OSksXG4gICAgTXV0ZTogY3JlYXRlSWNvbihJY29uJDU0KSxcbiAgICBWb2x1bWVVcDogY3JlYXRlSWNvbihJY29uJDEwNCksXG4gICAgVm9sdW1lRG93bjogY3JlYXRlSWNvbihJY29uJDEwNSksXG4gICAgRW50ZXJGdWxsc2NyZWVuOiBjcmVhdGVJY29uKEljb24kNDApLFxuICAgIEV4aXRGdWxsc2NyZWVuOiBjcmVhdGVJY29uKEljb24kMzkpLFxuICAgIEVudGVyUGlQOiBjcmVhdGVJY29uKEljb24kNjEpLFxuICAgIEV4aXRQaVA6IGNyZWF0ZUljb24oSWNvbiQ2MCksXG4gICAgQ2FwdGlvbnNPbjogY3JlYXRlSWNvbihJY29uJDI2KSxcbiAgICBDYXB0aW9uc09mZjogY3JlYXRlSWNvbihJY29uJDI3KSxcbiAgICBTZWVrRm9yd2FyZDogY3JlYXRlSWNvbihJY29uJDM1KSxcbiAgICBTZWVrQmFja3dhcmQ6IGNyZWF0ZUljb24oSWNvbiQzNClcbiAgfVxufTtcblxuZXhwb3J0IHsgZGVmYXVsdExheW91dEljb25zIH07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJJY29uJDUiLCJJY29uJDI0IiwiSWNvbiQ2MiIsIkljb24kNTkiLCJJY29uJDc0IiwiSWNvbiQ1NCIsIkljb24kMTA1IiwiSWNvbiQxMDQiLCJJY29uJDI2IiwiSWNvbiQyNyIsIkljb24kNjEiLCJJY29uJDYwIiwiSWNvbiQ0MCIsIkljb24kMzkiLCJJY29uJDc3IiwiSWNvbiQ4MSIsIkljb24kMzEiLCJJY29uJDAiLCJJY29uJDExIiwiSWNvbiQyMiIsIkljb24kNTMiLCJJY29uJDE2IiwiSWNvbiQ2MyIsIkljb24kODgiLCJJY29uJDM1IiwiSWNvbiQzNCIsIkljb24kMTMiLCJJY29uJDgiLCJJY29uJDMzIiwiSWNvbiQ1NiIsIkljb24kMTkiLCJJY29uIiwiY3JlYXRlSWNvbiIsInBhdGhzIiwiRGVmYXVsdExheW91dEljb24iLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJkaXNwbGF5TmFtZSIsImRlZmF1bHRMYXlvdXRJY29ucyIsIkFpclBsYXlCdXR0b24iLCJEZWZhdWx0IiwiR29vZ2xlQ2FzdEJ1dHRvbiIsIlBsYXlCdXR0b24iLCJQbGF5IiwiUGF1c2UiLCJSZXBsYXkiLCJNdXRlQnV0dG9uIiwiTXV0ZSIsIlZvbHVtZUxvdyIsIlZvbHVtZUhpZ2giLCJDYXB0aW9uQnV0dG9uIiwiT24iLCJPZmYiLCJQSVBCdXR0b24iLCJFbnRlciIsIkV4aXQiLCJGdWxsc2NyZWVuQnV0dG9uIiwiU2Vla0J1dHRvbiIsIkJhY2t3YXJkIiwiRm9yd2FyZCIsIkRvd25sb2FkQnV0dG9uIiwiTWVudSIsIkFjY2Vzc2liaWxpdHkiLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiQXVkaW8iLCJDaGFwdGVycyIsIkNhcHRpb25zIiwiUGxheWJhY2siLCJTZXR0aW5ncyIsIkF1ZGlvQm9vc3RVcCIsIkF1ZGlvQm9vc3REb3duIiwiU3BlZWRVcCIsIlNwZWVkRG93biIsIlF1YWxpdHlVcCIsIlF1YWxpdHlEb3duIiwiRm9udFNpemVVcCIsIkZvbnRTaXplRG93biIsIk9wYWNpdHlVcCIsIk9wYWNpdHlEb3duIiwiUmFkaW9DaGVjayIsIktleWJvYXJkRGlzcGxheSIsIlZvbHVtZVVwIiwiVm9sdW1lRG93biIsIkVudGVyRnVsbHNjcmVlbiIsIkV4aXRGdWxsc2NyZWVuIiwiRW50ZXJQaVAiLCJFeGl0UGlQIiwiQ2FwdGlvbnNPbiIsIkNhcHRpb25zT2ZmIiwiU2Vla0ZvcndhcmQiLCJTZWVrQmFja3dhcmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/player/vidstack-default-icons.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/vidstack.js":
/*!******************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/vidstack.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARIAKeyShortcuts: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.ARIAKeyShortcuts),\n/* harmony export */   AUDIO_EXTENSIONS: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_EXTENSIONS),\n/* harmony export */   AUDIO_TYPES: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_TYPES),\n/* harmony export */   AirPlayButton: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.AirPlayButton),\n/* harmony export */   AirPlayButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.AirPlayButtonInstance),\n/* harmony export */   AudioGainSlider: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.audioGainSlider),\n/* harmony export */   AudioGainSliderInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.AudioGainSliderInstance),\n/* harmony export */   AudioProviderLoader: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.AudioProviderLoader),\n/* harmony export */   AudioTrackList: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.AudioTrackList),\n/* harmony export */   Caption: () => (/* binding */ caption),\n/* harmony export */   CaptionButton: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.CaptionButton),\n/* harmony export */   CaptionButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.CaptionButtonInstance),\n/* harmony export */   Captions: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.Captions),\n/* harmony export */   CaptionsInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.CaptionsInstance),\n/* harmony export */   ChapterTitle: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.ChapterTitle),\n/* harmony export */   Controls: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.controls),\n/* harmony export */   ControlsGroupInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.ControlsGroupInstance),\n/* harmony export */   ControlsInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.ControlsInstance),\n/* harmony export */   DASHProviderLoader: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.DASHProviderLoader),\n/* harmony export */   DASH_VIDEO_EXTENSIONS: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.DASH_VIDEO_EXTENSIONS),\n/* harmony export */   DASH_VIDEO_TYPES: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.DASH_VIDEO_TYPES),\n/* harmony export */   DEFAULT_AUDIO_GAINS: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_AUDIO_GAINS),\n/* harmony export */   DEFAULT_PLAYBACK_RATES: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PLAYBACK_RATES),\n/* harmony export */   FullscreenButton: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.FullscreenButton),\n/* harmony export */   FullscreenButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.FullscreenButtonInstance),\n/* harmony export */   FullscreenController: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.FullscreenController),\n/* harmony export */   Gesture: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.Gesture),\n/* harmony export */   GestureInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.GestureInstance),\n/* harmony export */   GoogleCastButton: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.GoogleCastButton),\n/* harmony export */   GoogleCastButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.GoogleCastButtonInstance),\n/* harmony export */   HLSProviderLoader: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.HLSProviderLoader),\n/* harmony export */   HLS_VIDEO_EXTENSIONS: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.HLS_VIDEO_EXTENSIONS),\n/* harmony export */   HLS_VIDEO_TYPES: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.HLS_VIDEO_TYPES),\n/* harmony export */   Icon: () => (/* reexport safe */ _chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_7__.Icon),\n/* harmony export */   LibASSTextRenderer: () => (/* binding */ LibASSTextRenderer),\n/* harmony export */   List: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.List),\n/* harmony export */   LiveButton: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.LiveButton),\n/* harmony export */   LiveButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.LiveButtonInstance),\n/* harmony export */   LocalMediaStorage: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.LocalMediaStorage),\n/* harmony export */   Logger: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.Logger),\n/* harmony export */   MEDIA_KEY_SHORTCUTS: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MEDIA_KEY_SHORTCUTS),\n/* harmony export */   MediaAnnouncer: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.MediaAnnouncer),\n/* harmony export */   MediaAnnouncerInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MediaAnnouncerInstance),\n/* harmony export */   MediaControls: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MediaControls),\n/* harmony export */   MediaPlayer: () => (/* binding */ MediaPlayer),\n/* harmony export */   MediaPlayerInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MediaPlayerInstance),\n/* harmony export */   MediaProvider: () => (/* binding */ MediaProvider),\n/* harmony export */   MediaProviderInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MediaProviderInstance),\n/* harmony export */   MediaRemoteControl: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MediaRemoteControl),\n/* harmony export */   Menu: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.menu),\n/* harmony export */   MenuButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MenuButtonInstance),\n/* harmony export */   MenuInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MenuInstance),\n/* harmony export */   MenuItemInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MenuItemInstance),\n/* harmony export */   MenuItemsInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MenuItemsInstance),\n/* harmony export */   MenuPortalInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MenuPortalInstance),\n/* harmony export */   MuteButton: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.MuteButton),\n/* harmony export */   MuteButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MuteButtonInstance),\n/* harmony export */   PIPButton: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.PIPButton),\n/* harmony export */   PIPButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.PIPButtonInstance),\n/* harmony export */   PlayButton: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.PlayButton),\n/* harmony export */   PlayButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.PlayButtonInstance),\n/* harmony export */   Poster: () => (/* binding */ Poster),\n/* harmony export */   PosterInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.PosterInstance),\n/* harmony export */   QualitySlider: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.qualitySlider),\n/* harmony export */   QualitySliderInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.QualitySliderInstance),\n/* harmony export */   RadioGroup: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.radioGroup),\n/* harmony export */   RadioGroupInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.RadioGroupInstance),\n/* harmony export */   RadioInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.RadioInstance),\n/* harmony export */   ScreenOrientationController: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.ScreenOrientationController),\n/* harmony export */   SeekButton: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.SeekButton),\n/* harmony export */   SeekButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.SeekButtonInstance),\n/* harmony export */   Slider: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.slider),\n/* harmony export */   SliderChaptersInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.SliderChaptersInstance),\n/* harmony export */   SliderInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.SliderInstance),\n/* harmony export */   SliderPreviewInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.SliderPreviewInstance),\n/* harmony export */   SliderThumbnailInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.SliderThumbnailInstance),\n/* harmony export */   SliderValueInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.SliderValueInstance),\n/* harmony export */   SliderVideoInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.SliderVideoInstance),\n/* harmony export */   SpeedSlider: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.speedSlider),\n/* harmony export */   SpeedSliderInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.SpeedSliderInstance),\n/* harmony export */   Spinner: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.spinner),\n/* harmony export */   TextRenderers: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TextRenderers),\n/* harmony export */   TextTrack: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TextTrack),\n/* harmony export */   TextTrackList: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TextTrackList),\n/* harmony export */   Thumbnail: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.thumbnail),\n/* harmony export */   ThumbnailInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.ThumbnailInstance),\n/* harmony export */   Time: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.Time),\n/* harmony export */   TimeInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TimeInstance),\n/* harmony export */   TimeRange: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TimeRange),\n/* harmony export */   TimeSlider: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.timeSlider),\n/* harmony export */   TimeSliderInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TimeSliderInstance),\n/* harmony export */   Title: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.Title),\n/* harmony export */   ToggleButton: () => (/* binding */ ToggleButton),\n/* harmony export */   ToggleButtonInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.ToggleButtonInstance),\n/* harmony export */   Tooltip: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.tooltip),\n/* harmony export */   TooltipContentInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TooltipContentInstance),\n/* harmony export */   TooltipInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TooltipInstance),\n/* harmony export */   TooltipTriggerInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TooltipTriggerInstance),\n/* harmony export */   Track: () => (/* binding */ Track),\n/* harmony export */   VIDEO_EXTENSIONS: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_EXTENSIONS),\n/* harmony export */   VIDEO_TYPES: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_TYPES),\n/* harmony export */   VideoProviderLoader: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.VideoProviderLoader),\n/* harmony export */   VideoQualityList: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.VideoQualityList),\n/* harmony export */   VimeoProviderLoader: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.VimeoProviderLoader),\n/* harmony export */   VolumeSlider: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.volumeSlider),\n/* harmony export */   VolumeSliderInstance: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.VolumeSliderInstance),\n/* harmony export */   YouTubeProviderLoader: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.YouTubeProviderLoader),\n/* harmony export */   appendTriggerEvent: () => (/* reexport safe */ _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.appendTriggerEvent),\n/* harmony export */   canChangeVolume: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canChangeVolume),\n/* harmony export */   canFullscreen: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canFullscreen),\n/* harmony export */   canGoogleCastSrc: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canGoogleCastSrc),\n/* harmony export */   canOrientScreen: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canOrientScreen),\n/* harmony export */   canPlayHLSNatively: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canPlayHLSNatively),\n/* harmony export */   canRotateScreen: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canRotateScreen),\n/* harmony export */   canUsePictureInPicture: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canUsePictureInPicture),\n/* harmony export */   canUseVideoPresentation: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.canUseVideoPresentation),\n/* harmony export */   createTextTrack: () => (/* binding */ createTextTrack),\n/* harmony export */   findActiveCue: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.findActiveCue),\n/* harmony export */   findTriggerEvent: () => (/* reexport safe */ _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.findTriggerEvent),\n/* harmony export */   formatSpokenTime: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.formatSpokenTime),\n/* harmony export */   formatTime: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.formatTime),\n/* harmony export */   getDownloadFile: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.getDownloadFile),\n/* harmony export */   getTimeRangesEnd: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.getTimeRangesEnd),\n/* harmony export */   getTimeRangesStart: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.getTimeRangesStart),\n/* harmony export */   hasTriggerEvent: () => (/* reexport safe */ _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.hasTriggerEvent),\n/* harmony export */   isAudioProvider: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isAudioProvider),\n/* harmony export */   isAudioSrc: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isAudioSrc),\n/* harmony export */   isCueActive: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isCueActive),\n/* harmony export */   isDASHProvider: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isDASHProvider),\n/* harmony export */   isDASHSrc: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isDASHSrc),\n/* harmony export */   isGoogleCastProvider: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isGoogleCastProvider),\n/* harmony export */   isHLSProvider: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isHLSProvider),\n/* harmony export */   isHLSSrc: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isHLSSrc),\n/* harmony export */   isHTMLAudioElement: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLAudioElement),\n/* harmony export */   isHTMLIFrameElement: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLIFrameElement),\n/* harmony export */   isHTMLMediaElement: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLMediaElement),\n/* harmony export */   isHTMLVideoElement: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLVideoElement),\n/* harmony export */   isKeyboardClick: () => (/* reexport safe */ _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardClick),\n/* harmony export */   isKeyboardEvent: () => (/* reexport safe */ _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardEvent),\n/* harmony export */   isMediaStream: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isMediaStream),\n/* harmony export */   isPointerEvent: () => (/* reexport safe */ _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isPointerEvent),\n/* harmony export */   isTrackCaptionKind: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isTrackCaptionKind),\n/* harmony export */   isVideoProvider: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isVideoProvider),\n/* harmony export */   isVideoQualitySrc: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isVideoQualitySrc),\n/* harmony export */   isVideoSrc: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isVideoSrc),\n/* harmony export */   isVimeoProvider: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isVimeoProvider),\n/* harmony export */   isYouTubeProvider: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isYouTubeProvider),\n/* harmony export */   mediaContext: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.mediaContext),\n/* harmony export */   mediaState: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.mediaState),\n/* harmony export */   normalizeTimeIntervals: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTimeIntervals),\n/* harmony export */   parseJSONCaptionsFile: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.parseJSONCaptionsFile),\n/* harmony export */   sliderState: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.sliderState),\n/* harmony export */   softResetMediaState: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.softResetMediaState),\n/* harmony export */   sortVideoQualities: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.sortVideoQualities),\n/* harmony export */   updateTimeIntervals: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.updateTimeIntervals),\n/* harmony export */   useActiveTextCues: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.useActiveTextCues),\n/* harmony export */   useActiveTextTrack: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.useActiveTextTrack),\n/* harmony export */   useActiveThumbnail: () => (/* binding */ useActiveThumbnail),\n/* harmony export */   useAudioGainOptions: () => (/* binding */ useAudioGainOptions),\n/* harmony export */   useAudioOptions: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.useAudioOptions),\n/* harmony export */   useCaptionOptions: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.useCaptionOptions),\n/* harmony export */   useChapterOptions: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.useChapterOptions),\n/* harmony export */   useChapterTitle: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.useChapterTitle),\n/* harmony export */   useMediaContext: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext),\n/* harmony export */   useMediaPlayer: () => (/* reexport safe */ _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.useMediaPlayer),\n/* harmony export */   useMediaProvider: () => (/* binding */ useMediaProvider),\n/* harmony export */   useMediaRemote: () => (/* reexport safe */ _chunks_vidstack_D3MJ0cre_js__WEBPACK_IMPORTED_MODULE_5__.useMediaRemote),\n/* harmony export */   useMediaState: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.useMediaState),\n/* harmony export */   useMediaStore: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.useMediaStore),\n/* harmony export */   usePlaybackRateOptions: () => (/* reexport safe */ _chunks_vidstack_D3MJ0cre_js__WEBPACK_IMPORTED_MODULE_5__.usePlaybackRateOptions),\n/* harmony export */   useSliderPreview: () => (/* binding */ useSliderPreview),\n/* harmony export */   useSliderState: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.useSliderState),\n/* harmony export */   useSliderStore: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.useSliderStore),\n/* harmony export */   useState: () => (/* binding */ useState),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useTextCues: () => (/* reexport safe */ _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.useTextCues),\n/* harmony export */   useThumbnails: () => (/* binding */ useThumbnails),\n/* harmony export */   useVideoQualityOptions: () => (/* reexport safe */ _chunks_vidstack_D3MJ0cre_js__WEBPACK_IMPORTED_MODULE_5__.useVideoQualityOptions),\n/* harmony export */   walkTriggerEventChain: () => (/* reexport safe */ _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.walkTriggerEventChain),\n/* harmony export */   watchActiveTextTrack: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.watchActiveTextTrack),\n/* harmony export */   watchCueTextChange: () => (/* reexport safe */ _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.watchCueTextChange)\n/* harmony export */ });\n/* harmony import */ var _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/vidstack-Nm9OJy7x.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Nm9OJy7x.js\");\n/* harmony import */ var _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunks/vidstack-DcX2JzmB.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DcX2JzmB.js\");\n/* harmony import */ var _chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunks/vidstack-BOkHoBGu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BOkHoBGu.js\");\n/* harmony import */ var _chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunks/vidstack-CBF7iUqu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js\");\n/* harmony import */ var _chunks_vidstack_D3MJ0cre_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunks/vidstack-D3MJ0cre.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D3MJ0cre.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ ARIAKeyShortcuts,AUDIO_EXTENSIONS,AUDIO_TYPES,AirPlayButtonInstance,AudioGainSliderInstance,AudioProviderLoader,AudioTrackList,CaptionButtonInstance,CaptionsInstance,ControlsGroupInstance,ControlsInstance,DASHProviderLoader,DASH_VIDEO_EXTENSIONS,DASH_VIDEO_TYPES,DEFAULT_PLAYBACK_RATES,FullscreenButtonInstance,FullscreenController,GestureInstance,GoogleCastButtonInstance,HLSProviderLoader,HLS_VIDEO_EXTENSIONS,HLS_VIDEO_TYPES,List,LiveButtonInstance,LocalMediaStorage,Logger,MEDIA_KEY_SHORTCUTS,MediaAnnouncerInstance,MediaControls,MediaRemoteControl,MenuButtonInstance,MenuInstance,MenuItemInstance,MenuItemsInstance,MenuPortalInstance,MuteButtonInstance,PIPButtonInstance,PlayButtonInstance,QualitySliderInstance,RadioGroupInstance,RadioInstance,ScreenOrientationController,SeekButtonInstance,SliderChaptersInstance,SliderInstance,SliderPreviewInstance,SliderThumbnailInstance,SliderValueInstance,SliderVideoInstance,SpeedSliderInstance,TextRenderers,TextTrackList,ThumbnailInstance,TimeInstance,TimeRange,TimeSliderInstance,TooltipContentInstance,TooltipInstance,TooltipTriggerInstance,VIDEO_EXTENSIONS,VIDEO_TYPES,VideoProviderLoader,VideoQualityList,VimeoProviderLoader,VolumeSliderInstance,YouTubeProviderLoader,canChangeVolume,canFullscreen,canGoogleCastSrc,canOrientScreen,canPlayHLSNatively,canRotateScreen,canUsePictureInPicture,canUseVideoPresentation,findActiveCue,formatSpokenTime,formatTime,getDownloadFile,getTimeRangesEnd,getTimeRangesStart,isAudioProvider,isAudioSrc,isCueActive,isDASHProvider,isDASHSrc,isGoogleCastProvider,isHLSProvider,isHLSSrc,isHTMLAudioElement,isHTMLIFrameElement,isHTMLMediaElement,isHTMLVideoElement,isMediaStream,isTrackCaptionKind,isVideoProvider,isVideoQualitySrc,isVideoSrc,isVimeoProvider,isYouTubeProvider,mediaContext,normalizeTimeIntervals,parseJSONCaptionsFile,sliderState,softResetMediaState,sortVideoQualities,updateTimeIntervals,useMediaStore,useSliderState,useSliderStore,watchActiveTextTrack,watchCueTextChange,appendTriggerEvent,findTriggerEvent,hasTriggerEvent,isKeyboardClick,isKeyboardEvent,isPointerEvent,walkTriggerEventChain,AudioGainSlider,Captions,ChapterTitle,Controls,GoogleCastButton,MediaAnnouncer,QualitySlider,SpeedSlider,Spinner,Title,Tooltip,useActiveTextCues,useActiveTextTrack,useChapterOptions,useChapterTitle,useTextCues,AirPlayButton,CaptionButton,FullscreenButton,Gesture,LiveButton,Menu,MuteButton,PIPButton,PlayButton,RadioGroup,SeekButton,Slider,Thumbnail,Time,TimeSlider,VolumeSlider,useAudioOptions,useCaptionOptions,useMediaPlayer,useMediaRemote,usePlaybackRateOptions,useVideoQualityOptions,Caption,DEFAULT_AUDIO_GAINS,Icon,LibASSTextRenderer,MediaPlayer,MediaPlayerInstance,MediaProvider,MediaProviderInstance,Poster,PosterInstance,TextTrack,ToggleButton,ToggleButtonInstance,Track,createTextTrack,mediaState,useActiveThumbnail,useAudioGainOptions,useMediaContext,useMediaProvider,useMediaState,useSliderPreview,useState,useStore,useThumbnails auto */ \n\n\n\n\n\n\n\n\n\n\n\n\nclass LibASSTextRenderer {\n    constructor(loader, config){\n        this.loader = loader;\n        this.config = config;\n        this.priority = 1;\n        this._instance = null;\n        this._track = null;\n        this._typeRE = /(ssa|ass)$/;\n    }\n    canRender(track, video) {\n        return !!video && !!track.src && ((0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.isString)(track.type) && this._typeRE.test(track.type) || this._typeRE.test(track.src));\n    }\n    attach(video) {\n        if (!video) return;\n        this.loader().then(async (mod)=>{\n            this._instance = new mod.default({\n                ...this.config,\n                video,\n                subUrl: this._track?.src || \"\"\n            });\n            (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._instance, \"ready\", ()=>{\n                const canvas = this._instance?._canvas;\n                if (canvas) canvas.style.pointerEvents = \"none\";\n            });\n            (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this._instance, \"error\", (event)=>{\n                if (this._track) {\n                    this._track[_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TextTrackSymbol._readyState] = 3;\n                    this._track.dispatchEvent(new _chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"error\", {\n                        trigger: event,\n                        detail: event.error\n                    }));\n                }\n            });\n        });\n    }\n    changeTrack(track) {\n        if (!track || track.readyState === 3) {\n            this._freeTrack();\n        } else if (this._track !== track) {\n            this._instance?.setTrackByUrl(track.src);\n            this._track = track;\n        }\n    }\n    detach() {\n        this._freeTrack();\n    }\n    _freeTrack() {\n        this._instance?.freeTrack();\n        this._track = null;\n    }\n}\nconst playerCallbacks = [\n    \"onAbort\",\n    \"onAudioTrackChange\",\n    \"onAudioTracksChange\",\n    \"onAutoPlay\",\n    \"onAutoPlayChange\",\n    \"onAutoPlayFail\",\n    \"onCanLoad\",\n    \"onCanPlay\",\n    \"onCanPlayThrough\",\n    \"onControlsChange\",\n    \"onDestroy\",\n    \"onDurationChange\",\n    \"onEmptied\",\n    \"onEnd\",\n    \"onEnded\",\n    \"onError\",\n    \"onFindMediaPlayer\",\n    \"onFullscreenChange\",\n    \"onFullscreenError\",\n    \"onLiveChange\",\n    \"onLiveEdgeChange\",\n    \"onLoadedData\",\n    \"onLoadedMetadata\",\n    \"onLoadStart\",\n    \"onLoopChange\",\n    \"onOrientationChange\",\n    \"onPause\",\n    \"onPictureInPictureChange\",\n    \"onPictureInPictureError\",\n    \"onPlay\",\n    \"onPlayFail\",\n    \"onPlaying\",\n    \"onPlaysInlineChange\",\n    \"onPosterChange\",\n    \"onProgress\",\n    \"onProviderChange\",\n    \"onProviderLoaderChange\",\n    \"onProviderSetup\",\n    \"onQualitiesChange\",\n    \"onQualityChange\",\n    \"onRateChange\",\n    \"onReplay\",\n    \"onSeeked\",\n    \"onSeeking\",\n    \"onSourceChange\",\n    \"onSourceChange\",\n    \"onStalled\",\n    \"onStarted\",\n    \"onStreamTypeChange\",\n    \"onSuspend\",\n    \"onTextTrackChange\",\n    \"onTextTracksChange\",\n    \"onTimeUpdate\",\n    \"onTitleChange\",\n    \"onVdsLog\",\n    \"onVideoPresentationChange\",\n    \"onVolumeChange\",\n    \"onWaiting\"\n];\nconst MediaPlayerBridge = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MediaPlayerInstance, {\n    events: playerCallbacks,\n    eventsRegex: /^onHls/,\n    domEventsRegex: /^onMedia/\n});\nconst MediaPlayer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(({ aspectRatio, children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(MediaPlayerBridge, {\n        ...props,\n        src: props.src,\n        ref: forwardRef,\n        style: {\n            aspectRatio,\n            ...props.style\n        }\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.div, {\n            ...props2\n        }, children));\n});\nMediaPlayer.displayName = \"MediaPlayer\";\nconst MediaProviderBridge = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.MediaProviderInstance);\nconst MediaProvider = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(({ loaders = [], children, mediaProps, ...props }, forwardRef)=>{\n    const reactLoaders = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>loaders.map((Loader)=>new Loader()), loaders);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(MediaProviderBridge, {\n        ...props,\n        loaders: reactLoaders,\n        ref: forwardRef\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", {\n            ...props2\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(MediaOutlet, {\n            ...mediaProps,\n            provider: instance\n        }), children));\n});\nMediaProvider.displayName = \"MediaProvider\";\nfunction MediaOutlet({ provider, ...props }) {\n    const { crossOrigin, poster, remotePlaybackInfo, nativeControls, viewType } = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.mediaState), { loader } = provider.$state, { $provider: $$provider, $providerSetup: $$providerSetup } = (0,_chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext)(), $nativeControls = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(nativeControls), $crossOrigin = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(crossOrigin), $poster = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(poster), $loader = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(loader), $provider = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)($$provider), $providerSetup = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)($$providerSetup), $remoteInfo = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(remotePlaybackInfo), $mediaType = $loader?.mediaType(), $viewType = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(viewType), isAudioView = $viewType === \"audio\", isYouTubeEmbed = $loader?.name === \"youtube\", isVimeoEmbed = $loader?.name === \"vimeo\", isEmbed = isYouTubeEmbed || isVimeoEmbed, isRemotion = $loader?.name === \"remotion\", isGoogleCast = $loader?.name === \"google-cast\", [googleCastIconPaths, setGoogleCastIconPaths] = react__WEBPACK_IMPORTED_MODULE_2__.useState(\"\");\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!isGoogleCast || googleCastIconPaths) return;\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/vidstack-3hs3-8i_.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3hs3-8i_.js\")).then(function(n) {\n            return n.chromecast;\n        }).then((mod)=>{\n            setGoogleCastIconPaths(mod.default);\n        });\n    }, [\n        isGoogleCast\n    ]);\n    if (isGoogleCast) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", {\n            className: \"vds-google-cast\",\n            ref: (el)=>{\n                provider.load(el);\n            }\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_7__.Icon, {\n            paths: googleCastIconPaths\n        }), $remoteInfo?.deviceName ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"span\", {\n            className: \"vds-google-cast-info\"\n        }, \"Google Cast on\", \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"span\", {\n            className: \"vds-google-cast-device-name\"\n        }, $remoteInfo.deviceName)) : null);\n    }\n    if (isRemotion) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", {\n            \"data-remotion-canvas\": true\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", {\n            \"data-remotion-container\": true,\n            ref: (el)=>{\n                provider.load(el);\n            }\n        }, (0,_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.isRemotionProvider)($provider) && $providerSetup ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement($provider.render) : null));\n    }\n    return isEmbed ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"iframe\", {\n        className: isYouTubeEmbed ? \"vds-youtube\" : \"vds-vimeo\",\n        suppressHydrationWarning: true,\n        tabIndex: !$nativeControls ? -1 : void 0,\n        \"aria-hidden\": \"true\",\n        \"data-no-controls\": !$nativeControls ? \"\" : void 0,\n        ref (el) {\n            provider.load(el);\n        }\n    }), !$nativeControls && !isAudioView ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", {\n        className: \"vds-blocker\"\n    }) : null) : $mediaType ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement($mediaType === \"audio\" ? \"audio\" : \"video\", {\n        ...props,\n        controls: $nativeControls ? true : null,\n        crossOrigin: typeof $crossOrigin === \"boolean\" ? \"\" : $crossOrigin,\n        poster: $mediaType === \"video\" && $nativeControls && $poster ? $poster : null,\n        preload: \"none\",\n        \"aria-hidden\": \"true\",\n        suppressHydrationWarning: true,\n        ref (el) {\n            provider.load(el);\n        }\n    }) : null;\n}\nMediaOutlet.displayName = \"MediaOutlet\";\nfunction createTextTrack(init) {\n    const media = (0,_chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext)(), track = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>new _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.TextTrack(init), Object.values(init));\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        media.textTracks.add(track);\n        return ()=>void media.textTracks.remove(track);\n    }, [\n        track\n    ]);\n    return track;\n}\nfunction Track({ lang, ...props }) {\n    createTextTrack({\n        language: lang,\n        ...props\n    });\n    return null;\n}\nTrack.displayName = \"Track\";\nconst ToggleButtonBridge = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.ToggleButtonInstance);\nconst ToggleButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(ToggleButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.button, {\n            ...props2,\n            ref: (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nToggleButton.displayName = \"ToggleButton\";\nconst PosterBridge = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.PosterInstance);\nconst Poster = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(PosterBridge, {\n        ...props\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(PosterImg, {\n            ...props2,\n            instance,\n            ref: (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nPoster.displayName = \"Poster\";\nconst PosterImg = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(({ instance, children, ...props }, forwardRef)=>{\n    const { src, img, alt, crossOrigin, loading, hidden } = instance.$state, $src = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(src), $alt = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(alt), $crossOrigin = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(crossOrigin), $loading = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(loading), $hidden = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(hidden);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.img, {\n        ...props,\n        src: $src || void 0,\n        alt: $alt || void 0,\n        crossOrigin: $crossOrigin || void 0,\n        ref: (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(img.set, forwardRef),\n        style: {\n            display: $loading || $hidden ? \"none\" : void 0\n        }\n    }, children);\n});\nPosterImg.displayName = \"PosterImg\";\nconst Root = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.div, {\n        translate: \"yes\",\n        \"aria-live\": \"off\",\n        \"aria-atomic\": \"true\",\n        ...props,\n        ref: forwardRef\n    }, children);\n});\nRoot.displayName = \"Caption\";\nconst Text = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef((props, forwardRef)=>{\n    const textTrack = (0,_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.useMediaState)(\"textTrack\"), [activeCue, setActiveCue] = react__WEBPACK_IMPORTED_MODULE_2__.useState();\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!textTrack) return;\n        function onCueChange() {\n            setActiveCue(textTrack?.activeCues[0]);\n        }\n        textTrack.addEventListener(\"cue-change\", onCueChange);\n        return ()=>{\n            textTrack.removeEventListener(\"cue-change\", onCueChange);\n            setActiveCue(void 0);\n        };\n    }, [\n        textTrack\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.span, {\n        ...props,\n        \"data-part\": \"cue\",\n        dangerouslySetInnerHTML: {\n            __html: activeCue?.text || \"\"\n        },\n        ref: forwardRef\n    });\n});\nText.displayName = \"CaptionText\";\nvar caption = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Root: Root,\n    Text: Text\n});\nfunction useState(ctor, prop, ref) {\n    const initialValue = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>ctor.state.record[prop], [\n        ctor,\n        prop\n    ]);\n    return (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(ref.current ? ref.current.$state[prop] : initialValue);\n}\nconst storesCache = /* @__PURE__ */ new Map();\nfunction useStore(ctor, ref) {\n    const initialStore = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>{\n        let store = storesCache.get(ctor);\n        if (!store) {\n            store = new Proxy(ctor.state.record, {\n                get: (_, prop)=>()=>ctor.state.record[prop]\n            });\n            storesCache.set(ctor, store);\n        }\n        return store;\n    }, [\n        ctor\n    ]);\n    return (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignalRecord)(ref.current ? ref.current.$state : initialStore);\n}\nfunction useMediaProvider() {\n    const [provider, setProvider] = react__WEBPACK_IMPORTED_MODULE_2__.useState(null), context = (0,_chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext)();\n    if (!context) {\n        throw Error(\"[vidstack] no media context was found - was this called outside of `<MediaPlayer>`?\");\n    }\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!context) return;\n        return (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            setProvider(context.$provider());\n        });\n    }, []);\n    return provider;\n}\nfunction useThumbnails(src, crossOrigin = null) {\n    const scope = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)(), $src = (0,_chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.createSignal)(src), $crossOrigin = (0,_chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.createSignal)(crossOrigin), loader = (0,_chunks_vidstack_DcX2JzmB_js__WEBPACK_IMPORTED_MODULE_3__.useScoped)(()=>_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.ThumbnailsLoader.create($src, $crossOrigin));\n    if (!scope) {\n        console.warn(`[vidstack] \\`useThumbnails\\` must be called inside a child component of \\`<MediaPlayer>\\``);\n    }\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        $src.set(src);\n    }, [\n        src\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        $crossOrigin.set(crossOrigin);\n    }, [\n        crossOrigin\n    ]);\n    return (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(loader.$images);\n}\nfunction useActiveThumbnail(thumbnails, time) {\n    return react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>{\n        let activeIndex = -1;\n        for(let i = thumbnails.length - 1; i >= 0; i--){\n            const image = thumbnails[i];\n            if (time >= image.startTime && (!image.endTime || time < image.endTime)) {\n                activeIndex = i;\n                break;\n            }\n        }\n        return thumbnails[activeIndex] || null;\n    }, [\n        thumbnails,\n        time\n    ]);\n}\nfunction useSliderPreview({ clamp = false, offset = 0, orientation = \"horizontal\" } = {}) {\n    const [rootRef, setRootRef] = react__WEBPACK_IMPORTED_MODULE_2__.useState(null), [previewRef, setPreviewRef] = react__WEBPACK_IMPORTED_MODULE_2__.useState(null), [pointerValue, setPointerValue] = react__WEBPACK_IMPORTED_MODULE_2__.useState(0), [isVisible, setIsVisible] = react__WEBPACK_IMPORTED_MODULE_2__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!rootRef) return;\n        const dragging = (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        function updatePointerValue(event) {\n            if (!rootRef) return;\n            setPointerValue(getPointerValue(rootRef, event, orientation));\n        }\n        return (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            if (!dragging()) {\n                (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(rootRef, \"pointerenter\", ()=>{\n                    setIsVisible(true);\n                    previewRef?.setAttribute(\"data-visible\", \"\");\n                });\n                (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(rootRef, \"pointerdown\", (event)=>{\n                    dragging.set(true);\n                    updatePointerValue(event);\n                });\n                (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(rootRef, \"pointerleave\", ()=>{\n                    setIsVisible(false);\n                    previewRef?.removeAttribute(\"data-visible\");\n                });\n                (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(rootRef, \"pointermove\", (event)=>{\n                    updatePointerValue(event);\n                });\n                return;\n            }\n            previewRef?.setAttribute(\"data-dragging\", \"\");\n            (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"pointerup\", (event)=>{\n                dragging.set(false);\n                previewRef?.removeAttribute(\"data-dragging\");\n                updatePointerValue(event);\n            });\n            (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"pointermove\", (event)=>{\n                updatePointerValue(event);\n            });\n            (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"touchmove\", (e)=>e.preventDefault(), {\n                passive: false\n            });\n        });\n    }, [\n        rootRef\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (previewRef) {\n            previewRef.style.setProperty(\"--slider-pointer\", pointerValue + \"%\");\n        }\n    }, [\n        previewRef,\n        pointerValue\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!previewRef) return;\n        const update = ()=>{\n            (0,_chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.updateSliderPreviewPlacement)(previewRef, {\n                offset,\n                clamp,\n                orientation\n            });\n        };\n        update();\n        const resize = new ResizeObserver(update);\n        resize.observe(previewRef);\n        return ()=>resize.disconnect();\n    }, [\n        previewRef,\n        clamp,\n        offset,\n        orientation\n    ]);\n    return {\n        previewRootRef: setRootRef,\n        previewRef: setPreviewRef,\n        previewValue: pointerValue,\n        isPreviewVisible: isVisible\n    };\n}\nfunction getPointerValue(root, event, orientation) {\n    let thumbPositionRate, rect = root.getBoundingClientRect();\n    if (orientation === \"vertical\") {\n        const { bottom: trackBottom, height: trackHeight } = rect;\n        thumbPositionRate = (trackBottom - event.clientY) / trackHeight;\n    } else {\n        const { left: trackLeft, width: trackWidth } = rect;\n        thumbPositionRate = (event.clientX - trackLeft) / trackWidth;\n    }\n    return round(Math.max(0, Math.min(100, 100 * thumbPositionRate)));\n}\nfunction round(num) {\n    return Number(num.toFixed(3));\n}\nfunction useAudioGainOptions({ gains = _chunks_vidstack_Nm9OJy7x_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_AUDIO_GAINS, disabledLabel = \"disabled\" } = {}) {\n    const media = (0,_chunks_vidstack_BOkHoBGu_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext)(), { audioGain, canSetAudioGain } = media.$state;\n    (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(audioGain);\n    (0,_chunks_vidstack_3hs3_8i_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(canSetAudioGain);\n    return react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>{\n        const options = gains.map((opt)=>{\n            const label = typeof opt === \"number\" ? opt === 1 && disabledLabel ? disabledLabel : opt * 100 + \"%\" : opt.label, gain = typeof opt === \"number\" ? opt : opt.gain;\n            return {\n                label,\n                value: gain.toString(),\n                gain,\n                get selected () {\n                    return audioGain() === gain;\n                },\n                select (trigger) {\n                    media.remote.changeAudioGain(gain, trigger);\n                }\n            };\n        });\n        Object.defineProperty(options, \"disabled\", {\n            get () {\n                return !canSetAudioGain() || !options.length;\n            }\n        });\n        Object.defineProperty(options, \"selectedValue\", {\n            get () {\n                return audioGain()?.toString();\n            }\n        });\n        return options;\n    }, [\n        gains\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/vidstack.js\n");

/***/ })

};
;